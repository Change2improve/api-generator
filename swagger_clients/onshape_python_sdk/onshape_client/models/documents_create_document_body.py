# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocumentsCreateDocumentBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'tags': 'list[str]',
        'is_public': 'bool',
        'owner_type': 'float',
        'is_generate_unknown_messages': 'bool',
        'beta_capability_ids': 'list[str]',
        'owner_id': 'str'
    }

    attribute_map = {
        'name': 'name',
        'tags': 'tags',
        'is_public': 'isPublic',
        'owner_type': 'ownerType',
        'is_generate_unknown_messages': 'isGenerateUnknownMessages',
        'beta_capability_ids': 'betaCapabilityIds',
        'owner_id': 'ownerId'
    }

    def __init__(self, name=None, tags=None, is_public=None, owner_type=None, is_generate_unknown_messages=None, beta_capability_ids=None, owner_id=None):  # noqa: E501
        """DocumentsCreateDocumentBody - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._tags = None
        self._is_public = None
        self._owner_type = None
        self._is_generate_unknown_messages = None
        self._beta_capability_ids = None
        self._owner_id = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if tags is not None:
            self.tags = tags
        if is_public is not None:
            self.is_public = is_public
        if owner_type is not None:
            self.owner_type = owner_type
        if is_generate_unknown_messages is not None:
            self.is_generate_unknown_messages = is_generate_unknown_messages
        if beta_capability_ids is not None:
            self.beta_capability_ids = beta_capability_ids
        if owner_id is not None:
            self.owner_id = owner_id

    @property
    def name(self):
        """Gets the name of this DocumentsCreateDocumentBody.  # noqa: E501

        Document name  # noqa: E501

        :return: The name of this DocumentsCreateDocumentBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this DocumentsCreateDocumentBody.

        Document name  # noqa: E501

        :param name: The name of this DocumentsCreateDocumentBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def tags(self):
        """Gets the tags of this DocumentsCreateDocumentBody.  # noqa: E501

        Onshape internal use  # noqa: E501

        :return: The tags of this DocumentsCreateDocumentBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._tags

    @tags.setter
    def tags(self, tags):
        """Sets the tags of this DocumentsCreateDocumentBody.

        Onshape internal use  # noqa: E501

        :param tags: The tags of this DocumentsCreateDocumentBody.  # noqa: E501
        :type: list[str]
        """

        self._tags = tags

    @property
    def is_public(self):
        """Gets the is_public of this DocumentsCreateDocumentBody.  # noqa: E501

        Whether document is public  # noqa: E501

        :return: The is_public of this DocumentsCreateDocumentBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this DocumentsCreateDocumentBody.

        Whether document is public  # noqa: E501

        :param is_public: The is_public of this DocumentsCreateDocumentBody.  # noqa: E501
        :type: bool
        """

        self._is_public = is_public

    @property
    def owner_type(self):
        """Gets the owner_type of this DocumentsCreateDocumentBody.  # noqa: E501

        Owner's user type, which can be 0: user, 1: company  # noqa: E501

        :return: The owner_type of this DocumentsCreateDocumentBody.  # noqa: E501
        :rtype: float
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type):
        """Sets the owner_type of this DocumentsCreateDocumentBody.

        Owner's user type, which can be 0: user, 1: company  # noqa: E501

        :param owner_type: The owner_type of this DocumentsCreateDocumentBody.  # noqa: E501
        :type: float
        """

        self._owner_type = owner_type

    @property
    def is_generate_unknown_messages(self):
        """Gets the is_generate_unknown_messages of this DocumentsCreateDocumentBody.  # noqa: E501

        Onshape internal use  # noqa: E501

        :return: The is_generate_unknown_messages of this DocumentsCreateDocumentBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_generate_unknown_messages

    @is_generate_unknown_messages.setter
    def is_generate_unknown_messages(self, is_generate_unknown_messages):
        """Sets the is_generate_unknown_messages of this DocumentsCreateDocumentBody.

        Onshape internal use  # noqa: E501

        :param is_generate_unknown_messages: The is_generate_unknown_messages of this DocumentsCreateDocumentBody.  # noqa: E501
        :type: bool
        """

        self._is_generate_unknown_messages = is_generate_unknown_messages

    @property
    def beta_capability_ids(self):
        """Gets the beta_capability_ids of this DocumentsCreateDocumentBody.  # noqa: E501

        Onshape internal use  # noqa: E501

        :return: The beta_capability_ids of this DocumentsCreateDocumentBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._beta_capability_ids

    @beta_capability_ids.setter
    def beta_capability_ids(self, beta_capability_ids):
        """Sets the beta_capability_ids of this DocumentsCreateDocumentBody.

        Onshape internal use  # noqa: E501

        :param beta_capability_ids: The beta_capability_ids of this DocumentsCreateDocumentBody.  # noqa: E501
        :type: list[str]
        """

        self._beta_capability_ids = beta_capability_ids

    @property
    def owner_id(self):
        """Gets the owner_id of this DocumentsCreateDocumentBody.  # noqa: E501

        Owner's user ID (default: current user)  # noqa: E501

        :return: The owner_id of this DocumentsCreateDocumentBody.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this DocumentsCreateDocumentBody.

        Owner's user ID (default: current user)  # noqa: E501

        :param owner_id: The owner_id of this DocumentsCreateDocumentBody.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentsCreateDocumentBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
