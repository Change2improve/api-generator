# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PartStudiosCreateTranslationBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format_name': 'str',
        'part_ids': 'str',
        'store_in_document': 'bool',
        'configuration': 'str',
        'include_export_ids': 'bool',
        'link_document_workspace_id': 'str'
    }

    attribute_map = {
        'format_name': 'formatName',
        'part_ids': 'partIds',
        'store_in_document': 'storeInDocument',
        'configuration': 'configuration',
        'include_export_ids': 'includeExportIds',
        'link_document_workspace_id': 'linkDocumentWorkspaceId'
    }

    def __init__(self, format_name=None, part_ids=None, store_in_document=None, configuration=None, include_export_ids=None, link_document_workspace_id=None):  # noqa: E501
        """PartStudiosCreateTranslationBody - a model defined in Swagger"""  # noqa: E501

        self._format_name = None
        self._part_ids = None
        self._store_in_document = None
        self._configuration = None
        self._include_export_ids = None
        self._link_document_workspace_id = None
        self.discriminator = None

        if format_name is not None:
            self.format_name = format_name
        if part_ids is not None:
            self.part_ids = part_ids
        if store_in_document is not None:
            self.store_in_document = store_in_document
        if configuration is not None:
            self.configuration = configuration
        if include_export_ids is not None:
            self.include_export_ids = include_export_ids
        if link_document_workspace_id is not None:
            self.link_document_workspace_id = link_document_workspace_id

    @property
    def format_name(self):
        """Gets the format_name of this PartStudiosCreateTranslationBody.  # noqa: E501

        Name of format into which this element should be translated. ONSHAPE        indicates that the model file should be translated into a Part Studio or Assembly.  # noqa: E501

        :return: The format_name of this PartStudiosCreateTranslationBody.  # noqa: E501
        :rtype: str
        """
        return self._format_name

    @format_name.setter
    def format_name(self, format_name):
        """Sets the format_name of this PartStudiosCreateTranslationBody.

        Name of format into which this element should be translated. ONSHAPE        indicates that the model file should be translated into a Part Studio or Assembly.  # noqa: E501

        :param format_name: The format_name of this PartStudiosCreateTranslationBody.  # noqa: E501
        :type: str
        """

        self._format_name = format_name

    @property
    def part_ids(self):
        """Gets the part_ids of this PartStudiosCreateTranslationBody.  # noqa: E501

        A comma-separated list of part ids that should be translated. If not specified,           all parts are translated.  # noqa: E501

        :return: The part_ids of this PartStudiosCreateTranslationBody.  # noqa: E501
        :rtype: str
        """
        return self._part_ids

    @part_ids.setter
    def part_ids(self, part_ids):
        """Sets the part_ids of this PartStudiosCreateTranslationBody.

        A comma-separated list of part ids that should be translated. If not specified,           all parts are translated.  # noqa: E501

        :param part_ids: The part_ids of this PartStudiosCreateTranslationBody.  # noqa: E501
        :type: str
        """

        self._part_ids = part_ids

    @property
    def store_in_document(self):
        """Gets the store_in_document of this PartStudiosCreateTranslationBody.  # noqa: E501

        controls whether the translation is stored as a new element or        whether the data is stored as external data (storeInDocument=false).  # noqa: E501

        :return: The store_in_document of this PartStudiosCreateTranslationBody.  # noqa: E501
        :rtype: bool
        """
        return self._store_in_document

    @store_in_document.setter
    def store_in_document(self, store_in_document):
        """Sets the store_in_document of this PartStudiosCreateTranslationBody.

        controls whether the translation is stored as a new element or        whether the data is stored as external data (storeInDocument=false).  # noqa: E501

        :param store_in_document: The store_in_document of this PartStudiosCreateTranslationBody.  # noqa: E501
        :type: bool
        """

        self._store_in_document = store_in_document

    @property
    def configuration(self):
        """Gets the configuration of this PartStudiosCreateTranslationBody.  # noqa: E501

        A configuration string indicating the particular configuration that           should be translated  # noqa: E501

        :return: The configuration of this PartStudiosCreateTranslationBody.  # noqa: E501
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this PartStudiosCreateTranslationBody.

        A configuration string indicating the particular configuration that           should be translated  # noqa: E501

        :param configuration: The configuration of this PartStudiosCreateTranslationBody.  # noqa: E501
        :type: str
        """

        self._configuration = configuration

    @property
    def include_export_ids(self):
        """Gets the include_export_ids of this PartStudiosCreateTranslationBody.  # noqa: E501

        Whether to include topology id strings in parasolid output format.  # noqa: E501

        :return: The include_export_ids of this PartStudiosCreateTranslationBody.  # noqa: E501
        :rtype: bool
        """
        return self._include_export_ids

    @include_export_ids.setter
    def include_export_ids(self, include_export_ids):
        """Sets the include_export_ids of this PartStudiosCreateTranslationBody.

        Whether to include topology id strings in parasolid output format.  # noqa: E501

        :param include_export_ids: The include_export_ids of this PartStudiosCreateTranslationBody.  # noqa: E501
        :type: bool
        """

        self._include_export_ids = include_export_ids

    @property
    def link_document_workspace_id(self):
        """Gets the link_document_workspace_id of this PartStudiosCreateTranslationBody.  # noqa: E501

        If storeInDocument is true and linkDocumentId is specified, this        specifies a workspace to be used for result storage within the linkDocument.  # noqa: E501

        :return: The link_document_workspace_id of this PartStudiosCreateTranslationBody.  # noqa: E501
        :rtype: str
        """
        return self._link_document_workspace_id

    @link_document_workspace_id.setter
    def link_document_workspace_id(self, link_document_workspace_id):
        """Sets the link_document_workspace_id of this PartStudiosCreateTranslationBody.

        If storeInDocument is true and linkDocumentId is specified, this        specifies a workspace to be used for result storage within the linkDocument.  # noqa: E501

        :param link_document_workspace_id: The link_document_workspace_id of this PartStudiosCreateTranslationBody.  # noqa: E501
        :type: str
        """

        self._link_document_workspace_id = link_document_workspace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartStudiosCreateTranslationBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
