# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.parts_get_mass_properties_response200_bodies_key_principal_axes import PartsGetMassPropertiesResponse200BodiesKeyPrincipalAxes  # noqa: F401,E501


class PartsGetMassPropertiesResponse200BodiesKey(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'mass_missing_count': 'float',
        'volume': 'list[float]',
        'centroid': 'list[float]',
        'periphery': 'list[float]',
        'principal_inertia': 'list[float]',
        'mass': 'list[float]',
        'principal_axes': 'list[PartsGetMassPropertiesResponse200BodiesKeyPrincipalAxes]',
        'inertia': 'list[float]',
        'has_mass': 'bool'
    }

    attribute_map = {
        'mass_missing_count': 'massMissingCount',
        'volume': 'volume',
        'centroid': 'centroid',
        'periphery': 'periphery',
        'principal_inertia': 'principalInertia',
        'mass': 'mass',
        'principal_axes': 'principalAxes',
        'inertia': 'inertia',
        'has_mass': 'hasMass'
    }

    def __init__(self, mass_missing_count=None, volume=None, centroid=None, periphery=None, principal_inertia=None, mass=None, principal_axes=None, inertia=None, has_mass=None):  # noqa: E501
        """PartsGetMassPropertiesResponse200BodiesKey - a model defined in Swagger"""  # noqa: E501

        self._mass_missing_count = None
        self._volume = None
        self._centroid = None
        self._periphery = None
        self._principal_inertia = None
        self._mass = None
        self._principal_axes = None
        self._inertia = None
        self._has_mass = None
        self.discriminator = None

        if mass_missing_count is not None:
            self.mass_missing_count = mass_missing_count
        if volume is not None:
            self.volume = volume
        if centroid is not None:
            self.centroid = centroid
        if periphery is not None:
            self.periphery = periphery
        if principal_inertia is not None:
            self.principal_inertia = principal_inertia
        if mass is not None:
            self.mass = mass
        if principal_axes is not None:
            self.principal_axes = principal_axes
        if inertia is not None:
            self.inertia = inertia
        if has_mass is not None:
            self.has_mass = has_mass

    @property
    def mass_missing_count(self):
        """Gets the mass_missing_count of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501

        Number of parts without mass  # noqa: E501

        :return: The mass_missing_count of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :rtype: float
        """
        return self._mass_missing_count

    @mass_missing_count.setter
    def mass_missing_count(self, mass_missing_count):
        """Sets the mass_missing_count of this PartsGetMassPropertiesResponse200BodiesKey.

        Number of parts without mass  # noqa: E501

        :param mass_missing_count: The mass_missing_count of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :type: float
        """

        self._mass_missing_count = mass_missing_count

    @property
    def volume(self):
        """Gets the volume of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501

        Volume in cubic meters, along with minimum and maximum  # noqa: E501

        :return: The volume of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :rtype: list[float]
        """
        return self._volume

    @volume.setter
    def volume(self, volume):
        """Sets the volume of this PartsGetMassPropertiesResponse200BodiesKey.

        Volume in cubic meters, along with minimum and maximum  # noqa: E501

        :param volume: The volume of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :type: list[float]
        """

        self._volume = volume

    @property
    def centroid(self):
        """Gets the centroid of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501

        Coordinates of the centroid (center of mass) in metric             units (3 numbers), along with minimum (3 numbers) and maximum (3 numbers)  # noqa: E501

        :return: The centroid of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :rtype: list[float]
        """
        return self._centroid

    @centroid.setter
    def centroid(self, centroid):
        """Sets the centroid of this PartsGetMassPropertiesResponse200BodiesKey.

        Coordinates of the centroid (center of mass) in metric             units (3 numbers), along with minimum (3 numbers) and maximum (3 numbers)  # noqa: E501

        :param centroid: The centroid of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :type: list[float]
        """

        self._centroid = centroid

    @property
    def periphery(self):
        """Gets the periphery of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501

        Periphery in metric units which depend on context, along             with minimum and maximum; for a solid part, the periphery is the surface area in square meters; for a             surface, the periphery is the perimeter in meters  # noqa: E501

        :return: The periphery of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :rtype: list[float]
        """
        return self._periphery

    @periphery.setter
    def periphery(self, periphery):
        """Sets the periphery of this PartsGetMassPropertiesResponse200BodiesKey.

        Periphery in metric units which depend on context, along             with minimum and maximum; for a solid part, the periphery is the surface area in square meters; for a             surface, the periphery is the perimeter in meters  # noqa: E501

        :param periphery: The periphery of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :type: list[float]
        """

        self._periphery = periphery

    @property
    def principal_inertia(self):
        """Gets the principal_inertia of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501

        Moment of inertia around the principal axes in             metric units (3 numbers)  # noqa: E501

        :return: The principal_inertia of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :rtype: list[float]
        """
        return self._principal_inertia

    @principal_inertia.setter
    def principal_inertia(self, principal_inertia):
        """Sets the principal_inertia of this PartsGetMassPropertiesResponse200BodiesKey.

        Moment of inertia around the principal axes in             metric units (3 numbers)  # noqa: E501

        :param principal_inertia: The principal_inertia of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :type: list[float]
        """

        self._principal_inertia = principal_inertia

    @property
    def mass(self):
        """Gets the mass of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501

        Mass in kilograms, along with minimum and maximum  # noqa: E501

        :return: The mass of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :rtype: list[float]
        """
        return self._mass

    @mass.setter
    def mass(self, mass):
        """Sets the mass of this PartsGetMassPropertiesResponse200BodiesKey.

        Mass in kilograms, along with minimum and maximum  # noqa: E501

        :param mass: The mass of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :type: list[float]
        """

        self._mass = mass

    @property
    def principal_axes(self):
        """Gets the principal_axes of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501

        Principal axes as unit vectors  # noqa: E501

        :return: The principal_axes of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :rtype: list[PartsGetMassPropertiesResponse200BodiesKeyPrincipalAxes]
        """
        return self._principal_axes

    @principal_axes.setter
    def principal_axes(self, principal_axes):
        """Sets the principal_axes of this PartsGetMassPropertiesResponse200BodiesKey.

        Principal axes as unit vectors  # noqa: E501

        :param principal_axes: The principal_axes of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :type: list[PartsGetMassPropertiesResponse200BodiesKeyPrincipalAxes]
        """

        self._principal_axes = principal_axes

    @property
    def inertia(self):
        """Gets the inertia of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501

        Moment of inertia tensor about the centroid in metric units             with respect to the coordinate axes (9 numbers), along with minimum (9 numbers) and maximum (9             numbers)  # noqa: E501

        :return: The inertia of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :rtype: list[float]
        """
        return self._inertia

    @inertia.setter
    def inertia(self, inertia):
        """Sets the inertia of this PartsGetMassPropertiesResponse200BodiesKey.

        Moment of inertia tensor about the centroid in metric units             with respect to the coordinate axes (9 numbers), along with minimum (9 numbers) and maximum (9             numbers)  # noqa: E501

        :param inertia: The inertia of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :type: list[float]
        """

        self._inertia = inertia

    @property
    def has_mass(self):
        """Gets the has_mass of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501

        Whether part has mass  # noqa: E501

        :return: The has_mass of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :rtype: bool
        """
        return self._has_mass

    @has_mass.setter
    def has_mass(self, has_mass):
        """Sets the has_mass of this PartsGetMassPropertiesResponse200BodiesKey.

        Whether part has mass  # noqa: E501

        :param has_mass: The has_mass of this PartsGetMassPropertiesResponse200BodiesKey.  # noqa: E501
        :type: bool
        """

        self._has_mass = has_mass

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartsGetMassPropertiesResponse200BodiesKey):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
