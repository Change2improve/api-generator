# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.assemblies_get_bill_of_materials_response200_bom_table_bom_source_document import AssembliesGetBillOfMaterialsResponse200BomTableBomSourceDocument  # noqa: F401,E501
from onshape_client.models.assemblies_get_bill_of_materials_response200_bom_table_bom_source_element import AssembliesGetBillOfMaterialsResponse200BomTableBomSourceElement  # noqa: F401,E501
from onshape_client.models.assemblies_get_bill_of_materials_response200_bom_table_bom_source_version import AssembliesGetBillOfMaterialsResponse200BomTableBomSourceVersion  # noqa: F401,E501
from onshape_client.models.assemblies_get_bill_of_materials_response200_bom_table_bom_source_workspace import AssembliesGetBillOfMaterialsResponse200BomTableBomSourceWorkspace  # noqa: F401,E501


class AssembliesGetBillOfMaterialsResponse200BomTableBomSource(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document': 'AssembliesGetBillOfMaterialsResponse200BomTableBomSourceDocument',
        'version': 'AssembliesGetBillOfMaterialsResponse200BomTableBomSourceVersion',
        'workspace': 'AssembliesGetBillOfMaterialsResponse200BomTableBomSourceWorkspace',
        'element': 'AssembliesGetBillOfMaterialsResponse200BomTableBomSourceElement'
    }

    attribute_map = {
        'document': 'document',
        'version': 'version',
        'workspace': 'workspace',
        'element': 'element'
    }

    def __init__(self, document=None, version=None, workspace=None, element=None):  # noqa: E501
        """AssembliesGetBillOfMaterialsResponse200BomTableBomSource - a model defined in Swagger"""  # noqa: E501

        self._document = None
        self._version = None
        self._workspace = None
        self._element = None
        self.discriminator = None

        if document is not None:
            self.document = document
        if version is not None:
            self.version = version
        if workspace is not None:
            self.workspace = workspace
        if element is not None:
            self.element = element

    @property
    def document(self):
        """Gets the document of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.  # noqa: E501


        :return: The document of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.  # noqa: E501
        :rtype: AssembliesGetBillOfMaterialsResponse200BomTableBomSourceDocument
        """
        return self._document

    @document.setter
    def document(self, document):
        """Sets the document of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.


        :param document: The document of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.  # noqa: E501
        :type: AssembliesGetBillOfMaterialsResponse200BomTableBomSourceDocument
        """

        self._document = document

    @property
    def version(self):
        """Gets the version of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.  # noqa: E501


        :return: The version of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.  # noqa: E501
        :rtype: AssembliesGetBillOfMaterialsResponse200BomTableBomSourceVersion
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.


        :param version: The version of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.  # noqa: E501
        :type: AssembliesGetBillOfMaterialsResponse200BomTableBomSourceVersion
        """

        self._version = version

    @property
    def workspace(self):
        """Gets the workspace of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.  # noqa: E501


        :return: The workspace of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.  # noqa: E501
        :rtype: AssembliesGetBillOfMaterialsResponse200BomTableBomSourceWorkspace
        """
        return self._workspace

    @workspace.setter
    def workspace(self, workspace):
        """Sets the workspace of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.


        :param workspace: The workspace of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.  # noqa: E501
        :type: AssembliesGetBillOfMaterialsResponse200BomTableBomSourceWorkspace
        """

        self._workspace = workspace

    @property
    def element(self):
        """Gets the element of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.  # noqa: E501


        :return: The element of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.  # noqa: E501
        :rtype: AssembliesGetBillOfMaterialsResponse200BomTableBomSourceElement
        """
        return self._element

    @element.setter
    def element(self, element):
        """Sets the element of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.


        :param element: The element of this AssembliesGetBillOfMaterialsResponse200BomTableBomSource.  # noqa: E501
        :type: AssembliesGetBillOfMaterialsResponse200BomTableBomSourceElement
        """

        self._element = element

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssembliesGetBillOfMaterialsResponse200BomTableBomSource):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
