# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.app_elements_update_element_body_changes import AppElementsUpdateElementBodyChanges  # noqa: F401,E501


class AppElementsUpdateElementBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'parent_change_id': 'str',
        'transaction_id': 'str',
        'changes': 'list[AppElementsUpdateElementBodyChanges]',
        'description': 'str'
    }

    attribute_map = {
        'parent_change_id': 'parentChangeId',
        'transaction_id': 'transactionId',
        'changes': 'changes',
        'description': 'description'
    }

    def __init__(self, parent_change_id=None, transaction_id=None, changes=None, description=None):  # noqa: E501
        """AppElementsUpdateElementBody - a model defined in Swagger"""  # noqa: E501

        self._parent_change_id = None
        self._transaction_id = None
        self._changes = None
        self._description = None
        self.discriminator = None

        if parent_change_id is not None:
            self.parent_change_id = parent_change_id
        if transaction_id is not None:
            self.transaction_id = transaction_id
        if changes is not None:
            self.changes = changes
        if description is not None:
            self.description = description

    @property
    def parent_change_id(self):
        """Gets the parent_change_id of this AppElementsUpdateElementBody.  # noqa: E501

        Id of the last change made by this application to this element  # noqa: E501

        :return: The parent_change_id of this AppElementsUpdateElementBody.  # noqa: E501
        :rtype: str
        """
        return self._parent_change_id

    @parent_change_id.setter
    def parent_change_id(self, parent_change_id):
        """Sets the parent_change_id of this AppElementsUpdateElementBody.

        Id of the last change made by this application to this element  # noqa: E501

        :param parent_change_id: The parent_change_id of this AppElementsUpdateElementBody.  # noqa: E501
        :type: str
        """

        self._parent_change_id = parent_change_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this AppElementsUpdateElementBody.  # noqa: E501

        Id of transaction in which the update should be performed  # noqa: E501

        :return: The transaction_id of this AppElementsUpdateElementBody.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this AppElementsUpdateElementBody.

        Id of transaction in which the update should be performed  # noqa: E501

        :param transaction_id: The transaction_id of this AppElementsUpdateElementBody.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    @property
    def changes(self):
        """Gets the changes of this AppElementsUpdateElementBody.  # noqa: E501

        List of changes to make to the application element  # noqa: E501

        :return: The changes of this AppElementsUpdateElementBody.  # noqa: E501
        :rtype: list[AppElementsUpdateElementBodyChanges]
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this AppElementsUpdateElementBody.

        List of changes to make to the application element  # noqa: E501

        :param changes: The changes of this AppElementsUpdateElementBody.  # noqa: E501
        :type: list[AppElementsUpdateElementBodyChanges]
        """

        self._changes = changes

    @property
    def description(self):
        """Gets the description of this AppElementsUpdateElementBody.  # noqa: E501

        Description of the change being made, for history tracking  # noqa: E501

        :return: The description of this AppElementsUpdateElementBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppElementsUpdateElementBody.

        Description of the change being made, for history tracking  # noqa: E501

        :param description: The description of this AppElementsUpdateElementBody.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppElementsUpdateElementBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
