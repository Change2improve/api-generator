# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class WebhooksCreateWebhookBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'url': 'str',
        'filter': 'str',
        'data': 'str',
        'events': 'list[str]',
        'options': 'object'
    }

    attribute_map = {
        'url': 'url',
        'filter': 'filter',
        'data': 'data',
        'events': 'events',
        'options': 'options'
    }

    def __init__(self, url=None, filter=None, data=None, events=None, options=None):  # noqa: E501
        """WebhooksCreateWebhookBody - a model defined in Swagger"""  # noqa: E501

        self._url = None
        self._filter = None
        self._data = None
        self._events = None
        self._options = None
        self.discriminator = None

        if url is not None:
            self.url = url
        if filter is not None:
            self.filter = filter
        if data is not None:
            self.data = data
        if events is not None:
            self.events = events
        if options is not None:
            self.options = options

    @property
    def url(self):
        """Gets the url of this WebhooksCreateWebhookBody.  # noqa: E501

        URL to which to send notifications  # noqa: E501

        :return: The url of this WebhooksCreateWebhookBody.  # noqa: E501
        :rtype: str
        """
        return self._url

    @url.setter
    def url(self, url):
        """Sets the url of this WebhooksCreateWebhookBody.

        URL to which to send notifications  # noqa: E501

        :param url: The url of this WebhooksCreateWebhookBody.  # noqa: E501
        :type: str
        """

        self._url = url

    @property
    def filter(self):
        """Gets the filter of this WebhooksCreateWebhookBody.  # noqa: E501

        Context for webhook, in one of two forms:  \"{$DocumentId} = '[did]' && {$WorkspaceId} = '[wid]' && {$ElementId} = '[eid]'\"  or \"{$UserId} = '[uid]' && {$ClientId} = 'cid'\"  [did] is a document ID, etc., but the components in brackets and the quotes must remain exactly as written, in the same order  # noqa: E501

        :return: The filter of this WebhooksCreateWebhookBody.  # noqa: E501
        :rtype: str
        """
        return self._filter

    @filter.setter
    def filter(self, filter):
        """Sets the filter of this WebhooksCreateWebhookBody.

        Context for webhook, in one of two forms:  \"{$DocumentId} = '[did]' && {$WorkspaceId} = '[wid]' && {$ElementId} = '[eid]'\"  or \"{$UserId} = '[uid]' && {$ClientId} = 'cid'\"  [did] is a document ID, etc., but the components in brackets and the quotes must remain exactly as written, in the same order  # noqa: E501

        :param filter: The filter of this WebhooksCreateWebhookBody.  # noqa: E501
        :type: str
        """

        self._filter = filter

    @property
    def data(self):
        """Gets the data of this WebhooksCreateWebhookBody.  # noqa: E501

        Data to encapsulate in webhook  # noqa: E501

        :return: The data of this WebhooksCreateWebhookBody.  # noqa: E501
        :rtype: str
        """
        return self._data

    @data.setter
    def data(self, data):
        """Sets the data of this WebhooksCreateWebhookBody.

        Data to encapsulate in webhook  # noqa: E501

        :param data: The data of this WebhooksCreateWebhookBody.  # noqa: E501
        :type: str
        """

        self._data = data

    @property
    def events(self):
        """Gets the events of this WebhooksCreateWebhookBody.  # noqa: E501

        Array of event names for which to register webhook  # noqa: E501

        :return: The events of this WebhooksCreateWebhookBody.  # noqa: E501
        :rtype: list[str]
        """
        return self._events

    @events.setter
    def events(self, events):
        """Sets the events of this WebhooksCreateWebhookBody.

        Array of event names for which to register webhook  # noqa: E501

        :param events: The events of this WebhooksCreateWebhookBody.  # noqa: E501
        :type: list[str]
        """

        self._events = events

    @property
    def options(self):
        """Gets the options of this WebhooksCreateWebhookBody.  # noqa: E501

        Options object, with one optional field: collapseEvents, which is set to true/false and says whether similar events should be collapsed into one notification  # noqa: E501

        :return: The options of this WebhooksCreateWebhookBody.  # noqa: E501
        :rtype: object
        """
        return self._options

    @options.setter
    def options(self, options):
        """Sets the options of this WebhooksCreateWebhookBody.

        Options object, with one optional field: collapseEvents, which is set to true/false and says whether similar events should be collapsed into one notification  # noqa: E501

        :param options: The options of this WebhooksCreateWebhookBody.  # noqa: E501
        :type: object
        """

        self._options = options

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, WebhooksCreateWebhookBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
