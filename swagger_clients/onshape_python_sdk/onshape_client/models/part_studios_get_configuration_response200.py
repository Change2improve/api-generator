# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PartStudiosGetConfigurationResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'configuration_parameters': 'list[object]',
        'serialization_version': 'str',
        'source_microversion': 'str',
        'current_configuration': 'list[object]'
    }

    attribute_map = {
        'configuration_parameters': 'configurationParameters',
        'serialization_version': 'serializationVersion',
        'source_microversion': 'sourceMicroversion',
        'current_configuration': 'currentConfiguration'
    }

    def __init__(self, configuration_parameters=None, serialization_version=None, source_microversion=None, current_configuration=None):  # noqa: E501
        """PartStudiosGetConfigurationResponse200 - a model defined in Swagger"""  # noqa: E501

        self._configuration_parameters = None
        self._serialization_version = None
        self._source_microversion = None
        self._current_configuration = None
        self.discriminator = None

        if configuration_parameters is not None:
            self.configuration_parameters = configuration_parameters
        if serialization_version is not None:
            self.serialization_version = serialization_version
        if source_microversion is not None:
            self.source_microversion = source_microversion
        if current_configuration is not None:
            self.current_configuration = current_configuration

    @property
    def configuration_parameters(self):
        """Gets the configuration_parameters of this PartStudiosGetConfigurationResponse200.  # noqa: E501

        List of configuration parameters, which define the             configurability of the Part Studio.  # noqa: E501

        :return: The configuration_parameters of this PartStudiosGetConfigurationResponse200.  # noqa: E501
        :rtype: list[object]
        """
        return self._configuration_parameters

    @configuration_parameters.setter
    def configuration_parameters(self, configuration_parameters):
        """Sets the configuration_parameters of this PartStudiosGetConfigurationResponse200.

        List of configuration parameters, which define the             configurability of the Part Studio.  # noqa: E501

        :param configuration_parameters: The configuration_parameters of this PartStudiosGetConfigurationResponse200.  # noqa: E501
        :type: list[object]
        """

        self._configuration_parameters = configuration_parameters

    @property
    def serialization_version(self):
        """Gets the serialization_version of this PartStudiosGetConfigurationResponse200.  # noqa: E501

        The version of the serialization protocol for the response  # noqa: E501

        :return: The serialization_version of this PartStudiosGetConfigurationResponse200.  # noqa: E501
        :rtype: str
        """
        return self._serialization_version

    @serialization_version.setter
    def serialization_version(self, serialization_version):
        """Sets the serialization_version of this PartStudiosGetConfigurationResponse200.

        The version of the serialization protocol for the response  # noqa: E501

        :param serialization_version: The serialization_version of this PartStudiosGetConfigurationResponse200.  # noqa: E501
        :type: str
        """

        self._serialization_version = serialization_version

    @property
    def source_microversion(self):
        """Gets the source_microversion of this PartStudiosGetConfigurationResponse200.  # noqa: E501

        The document microversion from which the feature was extracted  # noqa: E501

        :return: The source_microversion of this PartStudiosGetConfigurationResponse200.  # noqa: E501
        :rtype: str
        """
        return self._source_microversion

    @source_microversion.setter
    def source_microversion(self, source_microversion):
        """Sets the source_microversion of this PartStudiosGetConfigurationResponse200.

        The document microversion from which the feature was extracted  # noqa: E501

        :param source_microversion: The source_microversion of this PartStudiosGetConfigurationResponse200.  # noqa: E501
        :type: str
        """

        self._source_microversion = source_microversion

    @property
    def current_configuration(self):
        """Gets the current_configuration of this PartStudiosGetConfigurationResponse200.  # noqa: E501

        List of parameter settings, which define the current             configuration Part Studio.  # noqa: E501

        :return: The current_configuration of this PartStudiosGetConfigurationResponse200.  # noqa: E501
        :rtype: list[object]
        """
        return self._current_configuration

    @current_configuration.setter
    def current_configuration(self, current_configuration):
        """Sets the current_configuration of this PartStudiosGetConfigurationResponse200.

        List of parameter settings, which define the current             configuration Part Studio.  # noqa: E501

        :param current_configuration: The current_configuration of this PartStudiosGetConfigurationResponse200.  # noqa: E501
        :type: list[object]
        """

        self._current_configuration = current_configuration

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartStudiosGetConfigurationResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
