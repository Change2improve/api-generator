# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.documents_get_version_response200_version_creator import DocumentsGetVersionResponse200VersionCreator  # noqa: F401,E501


class DocumentsCreateVersionResponse200Version(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'description': 'str',
        'parent': 'str',
        'creator': 'DocumentsGetVersionResponse200VersionCreator',
        'microversion': 'str',
        'modified_at': 'datetime',
        'id': 'str',
        'created_at': 'datetime'
    }

    attribute_map = {
        'description': 'description',
        'parent': 'parent',
        'creator': 'creator',
        'microversion': 'microversion',
        'modified_at': 'modifiedAt',
        'id': 'id',
        'created_at': 'createdAt'
    }

    def __init__(self, description=None, parent=None, creator=None, microversion=None, modified_at=None, id=None, created_at=None):  # noqa: E501
        """DocumentsCreateVersionResponse200Version - a model defined in Swagger"""  # noqa: E501

        self._description = None
        self._parent = None
        self._creator = None
        self._microversion = None
        self._modified_at = None
        self._id = None
        self._created_at = None
        self.discriminator = None

        if description is not None:
            self.description = description
        if parent is not None:
            self.parent = parent
        if creator is not None:
            self.creator = creator
        if microversion is not None:
            self.microversion = microversion
        if modified_at is not None:
            self.modified_at = modified_at
        if id is not None:
            self.id = id
        if created_at is not None:
            self.created_at = created_at

    @property
    def description(self):
        """Gets the description of this DocumentsCreateVersionResponse200Version.  # noqa: E501

        User-provided description of version  # noqa: E501

        :return: The description of this DocumentsCreateVersionResponse200Version.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this DocumentsCreateVersionResponse200Version.

        User-provided description of version  # noqa: E501

        :param description: The description of this DocumentsCreateVersionResponse200Version.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def parent(self):
        """Gets the parent of this DocumentsCreateVersionResponse200Version.  # noqa: E501

        ID of parent version  # noqa: E501

        :return: The parent of this DocumentsCreateVersionResponse200Version.  # noqa: E501
        :rtype: str
        """
        return self._parent

    @parent.setter
    def parent(self, parent):
        """Sets the parent of this DocumentsCreateVersionResponse200Version.

        ID of parent version  # noqa: E501

        :param parent: The parent of this DocumentsCreateVersionResponse200Version.  # noqa: E501
        :type: str
        """

        self._parent = parent

    @property
    def creator(self):
        """Gets the creator of this DocumentsCreateVersionResponse200Version.  # noqa: E501


        :return: The creator of this DocumentsCreateVersionResponse200Version.  # noqa: E501
        :rtype: DocumentsGetVersionResponse200VersionCreator
        """
        return self._creator

    @creator.setter
    def creator(self, creator):
        """Sets the creator of this DocumentsCreateVersionResponse200Version.


        :param creator: The creator of this DocumentsCreateVersionResponse200Version.  # noqa: E501
        :type: DocumentsGetVersionResponse200VersionCreator
        """

        self._creator = creator

    @property
    def microversion(self):
        """Gets the microversion of this DocumentsCreateVersionResponse200Version.  # noqa: E501

        Document microversion ID for version  # noqa: E501

        :return: The microversion of this DocumentsCreateVersionResponse200Version.  # noqa: E501
        :rtype: str
        """
        return self._microversion

    @microversion.setter
    def microversion(self, microversion):
        """Sets the microversion of this DocumentsCreateVersionResponse200Version.

        Document microversion ID for version  # noqa: E501

        :param microversion: The microversion of this DocumentsCreateVersionResponse200Version.  # noqa: E501
        :type: str
        """

        self._microversion = microversion

    @property
    def modified_at(self):
        """Gets the modified_at of this DocumentsCreateVersionResponse200Version.  # noqa: E501

        Last modification date  # noqa: E501

        :return: The modified_at of this DocumentsCreateVersionResponse200Version.  # noqa: E501
        :rtype: datetime
        """
        return self._modified_at

    @modified_at.setter
    def modified_at(self, modified_at):
        """Sets the modified_at of this DocumentsCreateVersionResponse200Version.

        Last modification date  # noqa: E501

        :param modified_at: The modified_at of this DocumentsCreateVersionResponse200Version.  # noqa: E501
        :type: datetime
        """

        self._modified_at = modified_at

    @property
    def id(self):
        """Gets the id of this DocumentsCreateVersionResponse200Version.  # noqa: E501

        ID of version  # noqa: E501

        :return: The id of this DocumentsCreateVersionResponse200Version.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this DocumentsCreateVersionResponse200Version.

        ID of version  # noqa: E501

        :param id: The id of this DocumentsCreateVersionResponse200Version.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def created_at(self):
        """Gets the created_at of this DocumentsCreateVersionResponse200Version.  # noqa: E501

        Creation date  # noqa: E501

        :return: The created_at of this DocumentsCreateVersionResponse200Version.  # noqa: E501
        :rtype: datetime
        """
        return self._created_at

    @created_at.setter
    def created_at(self, created_at):
        """Sets the created_at of this DocumentsCreateVersionResponse200Version.

        Creation date  # noqa: E501

        :param created_at: The created_at of this DocumentsCreateVersionResponse200Version.  # noqa: E501
        :type: datetime
        """

        self._created_at = created_at

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentsCreateVersionResponse200Version):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
