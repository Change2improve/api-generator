# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.release_management_create_obsoletion_package_response200_properties import ReleaseManagementCreateObsoletionPackageResponse200Properties  # noqa: F401,E501
from onshape_client.models.release_management_create_obsoletion_package_response200_workflow import ReleaseManagementCreateObsoletionPackageResponse200Workflow  # noqa: F401,E501


class ReleaseManagementCreateObsoletionPackageResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_id': 'str',
        'items': 'list[object]',
        'workflow': 'ReleaseManagementCreateObsoletionPackageResponse200Workflow',
        'id': 'str',
        'version_id': 'str',
        'properties': 'list[ReleaseManagementCreateObsoletionPackageResponse200Properties]',
        'document_id': 'str'
    }

    attribute_map = {
        'company_id': 'companyId',
        'items': 'Items',
        'workflow': 'workflow',
        'id': 'id',
        'version_id': 'versionId',
        'properties': 'properties',
        'document_id': 'documentId'
    }

    def __init__(self, company_id=None, items=None, workflow=None, id=None, version_id=None, properties=None, document_id=None):  # noqa: E501
        """ReleaseManagementCreateObsoletionPackageResponse200 - a model defined in Swagger"""  # noqa: E501

        self._company_id = None
        self._items = None
        self._workflow = None
        self._id = None
        self._version_id = None
        self._properties = None
        self._document_id = None
        self.discriminator = None

        if company_id is not None:
            self.company_id = company_id
        if items is not None:
            self.items = items
        if workflow is not None:
            self.workflow = workflow
        if id is not None:
            self.id = id
        if version_id is not None:
            self.version_id = version_id
        if properties is not None:
            self.properties = properties
        if document_id is not None:
            self.document_id = document_id

    @property
    def company_id(self):
        """Gets the company_id of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501

        Company ID for the obsoletion package  # noqa: E501

        :return: The company_id of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this ReleaseManagementCreateObsoletionPackageResponse200.

        Company ID for the obsoletion package  # noqa: E501

        :param company_id: The company_id of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def items(self):
        """Gets the items of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501

        in the package as determined by the revision. Always just one item  # noqa: E501

        :return: The items of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501
        :rtype: list[object]
        """
        return self._items

    @items.setter
    def items(self, items):
        """Sets the items of this ReleaseManagementCreateObsoletionPackageResponse200.

        in the package as determined by the revision. Always just one item  # noqa: E501

        :param items: The items of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501
        :type: list[object]
        """

        self._items = items

    @property
    def workflow(self):
        """Gets the workflow of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501


        :return: The workflow of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501
        :rtype: ReleaseManagementCreateObsoletionPackageResponse200Workflow
        """
        return self._workflow

    @workflow.setter
    def workflow(self, workflow):
        """Sets the workflow of this ReleaseManagementCreateObsoletionPackageResponse200.


        :param workflow: The workflow of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501
        :type: ReleaseManagementCreateObsoletionPackageResponse200Workflow
        """

        self._workflow = workflow

    @property
    def id(self):
        """Gets the id of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501

        ID of the obsoletion package.  # noqa: E501

        :return: The id of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ReleaseManagementCreateObsoletionPackageResponse200.

        ID of the obsoletion package.  # noqa: E501

        :param id: The id of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def version_id(self):
        """Gets the version_id of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501

        Version ID of the revision  # noqa: E501

        :return: The version_id of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this ReleaseManagementCreateObsoletionPackageResponse200.

        Version ID of the revision  # noqa: E501

        :param version_id: The version_id of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def properties(self):
        """Gets the properties of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501

        Array of properties for the package  # noqa: E501

        :return: The properties of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501
        :rtype: list[ReleaseManagementCreateObsoletionPackageResponse200Properties]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this ReleaseManagementCreateObsoletionPackageResponse200.

        Array of properties for the package  # noqa: E501

        :param properties: The properties of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501
        :type: list[ReleaseManagementCreateObsoletionPackageResponse200Properties]
        """

        self._properties = properties

    @property
    def document_id(self):
        """Gets the document_id of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501

        Document ID of the revision  # noqa: E501

        :return: The document_id of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this ReleaseManagementCreateObsoletionPackageResponse200.

        Document ID of the revision  # noqa: E501

        :param document_id: The document_id of this ReleaseManagementCreateObsoletionPackageResponse200.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ReleaseManagementCreateObsoletionPackageResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
