# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.parts_update_part_metadata_body_appearance_color import PartsUpdatePartMetadataBodyAppearanceColor  # noqa: F401,E501


class PartsGetPartsInPartstudioResponse200Appearance(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'opacity': 'float',
        'is_generated': 'bool',
        'color': 'PartsUpdatePartMetadataBodyAppearanceColor'
    }

    attribute_map = {
        'opacity': 'opacity',
        'is_generated': 'isGenerated',
        'color': 'color'
    }

    def __init__(self, opacity=None, is_generated=None, color=None):  # noqa: E501
        """PartsGetPartsInPartstudioResponse200Appearance - a model defined in Swagger"""  # noqa: E501

        self._opacity = None
        self._is_generated = None
        self._color = None
        self.discriminator = None

        if opacity is not None:
            self.opacity = opacity
        if is_generated is not None:
            self.is_generated = is_generated
        if color is not None:
            self.color = color

    @property
    def opacity(self):
        """Gets the opacity of this PartsGetPartsInPartstudioResponse200Appearance.  # noqa: E501

        Part opacity  # noqa: E501

        :return: The opacity of this PartsGetPartsInPartstudioResponse200Appearance.  # noqa: E501
        :rtype: float
        """
        return self._opacity

    @opacity.setter
    def opacity(self, opacity):
        """Sets the opacity of this PartsGetPartsInPartstudioResponse200Appearance.

        Part opacity  # noqa: E501

        :param opacity: The opacity of this PartsGetPartsInPartstudioResponse200Appearance.  # noqa: E501
        :type: float
        """

        self._opacity = opacity

    @property
    def is_generated(self):
        """Gets the is_generated of this PartsGetPartsInPartstudioResponse200Appearance.  # noqa: E501

        Whether the appearance was set by the user or             generated by Onshape  # noqa: E501

        :return: The is_generated of this PartsGetPartsInPartstudioResponse200Appearance.  # noqa: E501
        :rtype: bool
        """
        return self._is_generated

    @is_generated.setter
    def is_generated(self, is_generated):
        """Sets the is_generated of this PartsGetPartsInPartstudioResponse200Appearance.

        Whether the appearance was set by the user or             generated by Onshape  # noqa: E501

        :param is_generated: The is_generated of this PartsGetPartsInPartstudioResponse200Appearance.  # noqa: E501
        :type: bool
        """

        self._is_generated = is_generated

    @property
    def color(self):
        """Gets the color of this PartsGetPartsInPartstudioResponse200Appearance.  # noqa: E501


        :return: The color of this PartsGetPartsInPartstudioResponse200Appearance.  # noqa: E501
        :rtype: PartsUpdatePartMetadataBodyAppearanceColor
        """
        return self._color

    @color.setter
    def color(self, color):
        """Sets the color of this PartsGetPartsInPartstudioResponse200Appearance.


        :param color: The color of this PartsGetPartsInPartstudioResponse200Appearance.  # noqa: E501
        :type: PartsUpdatePartMetadataBodyAppearanceColor
        """

        self._color = color

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartsGetPartsInPartstudioResponse200Appearance):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
