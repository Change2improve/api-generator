# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'path': 'list[str]',
        'hidden': 'bool',
        'fixed': 'bool',
        'transform': 'list[float]'
    }

    attribute_map = {
        'path': 'path',
        'hidden': 'hidden',
        'fixed': 'fixed',
        'transform': 'transform'
    }

    def __init__(self, path=None, hidden=None, fixed=None, transform=None):  # noqa: E501
        """AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences - a model defined in Swagger"""  # noqa: E501

        self._path = None
        self._hidden = None
        self._fixed = None
        self._transform = None
        self.discriminator = None

        if path is not None:
            self.path = path
        if hidden is not None:
            self.hidden = hidden
        if fixed is not None:
            self.fixed = fixed
        if transform is not None:
            self.transform = transform

    @property
    def path(self):
        """Gets the path of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.  # noqa: E501

        A list of occurrence IDs, representing the             hierachical inclusion structure of the occurrence within the assembly. Each element in the list is an             id value for an entry in rootAssembly.instances or rootAssembly.subAssemblies.N.instances  # noqa: E501

        :return: The path of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.  # noqa: E501
        :rtype: list[str]
        """
        return self._path

    @path.setter
    def path(self, path):
        """Sets the path of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.

        A list of occurrence IDs, representing the             hierachical inclusion structure of the occurrence within the assembly. Each element in the list is an             id value for an entry in rootAssembly.instances or rootAssembly.subAssemblies.N.instances  # noqa: E501

        :param path: The path of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.  # noqa: E501
        :type: list[str]
        """

        self._path = path

    @property
    def hidden(self):
        """Gets the hidden of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.  # noqa: E501

        Occurrence hidden or displayed  # noqa: E501

        :return: The hidden of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.  # noqa: E501
        :rtype: bool
        """
        return self._hidden

    @hidden.setter
    def hidden(self, hidden):
        """Sets the hidden of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.

        Occurrence hidden or displayed  # noqa: E501

        :param hidden: The hidden of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.  # noqa: E501
        :type: bool
        """

        self._hidden = hidden

    @property
    def fixed(self):
        """Gets the fixed of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.  # noqa: E501

        Occurrence fixed or not  # noqa: E501

        :return: The fixed of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.  # noqa: E501
        :rtype: bool
        """
        return self._fixed

    @fixed.setter
    def fixed(self, fixed):
        """Sets the fixed of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.

        Occurrence fixed or not  # noqa: E501

        :param fixed: The fixed of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.  # noqa: E501
        :type: bool
        """

        self._fixed = fixed

    @property
    def transform(self):
        """Gets the transform of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.  # noqa: E501

        A 16-element transform matrix that             transforms the occurrence into the world space of the top-level assembly.  # noqa: E501

        :return: The transform of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.  # noqa: E501
        :rtype: list[float]
        """
        return self._transform

    @transform.setter
    def transform(self, transform):
        """Sets the transform of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.

        A 16-element transform matrix that             transforms the occurrence into the world space of the top-level assembly.  # noqa: E501

        :param transform: The transform of this AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences.  # noqa: E501
        :type: list[float]
        """

        self._transform = transform

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
