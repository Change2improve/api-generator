# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.part_studios_get_sketch_info_response200_geom_entities import PartStudiosGetSketchInfoResponse200GeomEntities  # noqa: F401,E501


class PartStudiosGetSketchInfoResponse200Sketches(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature_id': 'str',
        'transform_matrix': 'list[float]',
        'sketch': 'str',
        'geom_entities': 'list[PartStudiosGetSketchInfoResponse200GeomEntities]',
        'features_used': 'list[object]'
    }

    attribute_map = {
        'feature_id': 'featureId',
        'transform_matrix': 'transformMatrix',
        'sketch': 'sketch',
        'geom_entities': 'geomEntities',
        'features_used': 'featuresUsed'
    }

    def __init__(self, feature_id=None, transform_matrix=None, sketch=None, geom_entities=None, features_used=None):  # noqa: E501
        """PartStudiosGetSketchInfoResponse200Sketches - a model defined in Swagger"""  # noqa: E501

        self._feature_id = None
        self._transform_matrix = None
        self._sketch = None
        self._geom_entities = None
        self._features_used = None
        self.discriminator = None

        if feature_id is not None:
            self.feature_id = feature_id
        if transform_matrix is not None:
            self.transform_matrix = transform_matrix
        if sketch is not None:
            self.sketch = sketch
        if geom_entities is not None:
            self.geom_entities = geom_entities
        if features_used is not None:
            self.features_used = features_used

    @property
    def feature_id(self):
        """Gets the feature_id of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501

        ID of a sketch  # noqa: E501

        :return: The feature_id of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501
        :rtype: str
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this PartStudiosGetSketchInfoResponse200Sketches.

        ID of a sketch  # noqa: E501

        :param feature_id: The feature_id of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501
        :type: str
        """

        self._feature_id = feature_id

    @property
    def transform_matrix(self):
        """Gets the transform_matrix of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501

        A transformation matrix to of the sketch plane,    if output3D is false.  # noqa: E501

        :return: The transform_matrix of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501
        :rtype: list[float]
        """
        return self._transform_matrix

    @transform_matrix.setter
    def transform_matrix(self, transform_matrix):
        """Sets the transform_matrix of this PartStudiosGetSketchInfoResponse200Sketches.

        A transformation matrix to of the sketch plane,    if output3D is false.  # noqa: E501

        :param transform_matrix: The transform_matrix of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501
        :type: list[float]
        """

        self._transform_matrix = transform_matrix

    @property
    def sketch(self):
        """Gets the sketch of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501

        Name of a sketch  # noqa: E501

        :return: The sketch of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501
        :rtype: str
        """
        return self._sketch

    @sketch.setter
    def sketch(self, sketch):
        """Sets the sketch of this PartStudiosGetSketchInfoResponse200Sketches.

        Name of a sketch  # noqa: E501

        :param sketch: The sketch of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501
        :type: str
        """

        self._sketch = sketch

    @property
    def geom_entities(self):
        """Gets the geom_entities of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501

        Geometries of sketch entities.  # noqa: E501

        :return: The geom_entities of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501
        :rtype: list[PartStudiosGetSketchInfoResponse200GeomEntities]
        """
        return self._geom_entities

    @geom_entities.setter
    def geom_entities(self, geom_entities):
        """Sets the geom_entities of this PartStudiosGetSketchInfoResponse200Sketches.

        Geometries of sketch entities.  # noqa: E501

        :param geom_entities: The geom_entities of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501
        :type: list[PartStudiosGetSketchInfoResponse200GeomEntities]
        """

        self._geom_entities = geom_entities

    @property
    def features_used(self):
        """Gets the features_used of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501

        Names of the features using the sketch  # noqa: E501

        :return: The features_used of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501
        :rtype: list[object]
        """
        return self._features_used

    @features_used.setter
    def features_used(self, features_used):
        """Sets the features_used of this PartStudiosGetSketchInfoResponse200Sketches.

        Names of the features using the sketch  # noqa: E501

        :param features_used: The features_used of this PartStudiosGetSketchInfoResponse200Sketches.  # noqa: E501
        :type: list[object]
        """

        self._features_used = features_used

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartStudiosGetSketchInfoResponse200Sketches):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
