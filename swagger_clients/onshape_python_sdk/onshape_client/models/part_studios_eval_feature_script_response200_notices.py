# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PartStudiosEvalFeatureScriptResponse200Notices(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'stack_trace': 'list[object]',
        'level': 'str',
        'try_node': 'object',
        'parameter_id': 'list[object]',
        'message': 'str',
        'type': 'str'
    }

    attribute_map = {
        'stack_trace': 'stackTrace',
        'level': 'level',
        'try_node': 'tryNode',
        'parameter_id': 'parameterId',
        'message': 'message',
        'type': 'type'
    }

    def __init__(self, stack_trace=None, level=None, try_node=None, parameter_id=None, message=None, type=None):  # noqa: E501
        """PartStudiosEvalFeatureScriptResponse200Notices - a model defined in Swagger"""  # noqa: E501

        self._stack_trace = None
        self._level = None
        self._try_node = None
        self._parameter_id = None
        self._message = None
        self._type = None
        self.discriminator = None

        if stack_trace is not None:
            self.stack_trace = stack_trace
        if level is not None:
            self.level = level
        if try_node is not None:
            self.try_node = try_node
        if parameter_id is not None:
            self.parameter_id = parameter_id
        if message is not None:
            self.message = message
        if type is not None:
            self.type = type

    @property
    def stack_trace(self):
        """Gets the stack_trace of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501

        A stack trace indicating the execution location for the notice  # noqa: E501

        :return: The stack_trace of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501
        :rtype: list[object]
        """
        return self._stack_trace

    @stack_trace.setter
    def stack_trace(self, stack_trace):
        """Sets the stack_trace of this PartStudiosEvalFeatureScriptResponse200Notices.

        A stack trace indicating the execution location for the notice  # noqa: E501

        :param stack_trace: The stack_trace of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501
        :type: list[object]
        """

        self._stack_trace = stack_trace

    @property
    def level(self):
        """Gets the level of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501

        The severity level of a notice entry  # noqa: E501

        :return: The level of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501
        :rtype: str
        """
        return self._level

    @level.setter
    def level(self, level):
        """Sets the level of this PartStudiosEvalFeatureScriptResponse200Notices.

        The severity level of a notice entry  # noqa: E501

        :param level: The level of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501
        :type: str
        """

        self._level = level

    @property
    def try_node(self):
        """Gets the try_node of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501

        Undocumented  # noqa: E501

        :return: The try_node of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501
        :rtype: object
        """
        return self._try_node

    @try_node.setter
    def try_node(self, try_node):
        """Sets the try_node of this PartStudiosEvalFeatureScriptResponse200Notices.

        Undocumented  # noqa: E501

        :param try_node: The try_node of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501
        :type: object
        """

        self._try_node = try_node

    @property
    def parameter_id(self):
        """Gets the parameter_id of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501

        The id of the parameter to which the notice applies,    where applicable  # noqa: E501

        :return: The parameter_id of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501
        :rtype: list[object]
        """
        return self._parameter_id

    @parameter_id.setter
    def parameter_id(self, parameter_id):
        """Sets the parameter_id of this PartStudiosEvalFeatureScriptResponse200Notices.

        The id of the parameter to which the notice applies,    where applicable  # noqa: E501

        :param parameter_id: The parameter_id of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501
        :type: list[object]
        """

        self._parameter_id = parameter_id

    @property
    def message(self):
        """Gets the message of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501

        A readable message  # noqa: E501

        :return: The message of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this PartStudiosEvalFeatureScriptResponse200Notices.

        A readable message  # noqa: E501

        :param message: The message of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501
        :type: str
        """

        self._message = message

    @property
    def type(self):
        """Gets the type of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501

        The type of notice indicating the phase of analysis where found  # noqa: E501

        :return: The type of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PartStudiosEvalFeatureScriptResponse200Notices.

        The type of notice indicating the phase of analysis where found  # noqa: E501

        :param type: The type of this PartStudiosEvalFeatureScriptResponse200Notices.  # noqa: E501
        :type: str
        """

        self._type = type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartStudiosEvalFeatureScriptResponse200Notices):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
