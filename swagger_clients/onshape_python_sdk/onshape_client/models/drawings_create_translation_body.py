# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DrawingsCreateTranslationBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'color_method': 'str',
        'text_as_geometry': 'bool',
        'splines_as_polylines': 'bool',
        'version_string': 'str',
        'destination_name': 'str',
        'format_name': 'str',
        'current_sheet_only': 'bool',
        'show_overidden_dimensions': 'bool',
        'notify_user': 'bool',
        'store_in_document': 'bool',
        'link_document_workspace_id': 'str',
        'selectable_pdf_text': 'bool',
        'flatten': 'bool'
    }

    attribute_map = {
        'color_method': 'colorMethod',
        'text_as_geometry': 'textAsGeometry',
        'splines_as_polylines': 'splinesAsPolylines',
        'version_string': 'versionString',
        'destination_name': 'destinationName',
        'format_name': 'formatName',
        'current_sheet_only': 'currentSheetOnly',
        'show_overidden_dimensions': 'showOveriddenDimensions',
        'notify_user': 'notifyUser',
        'store_in_document': 'storeInDocument',
        'link_document_workspace_id': 'linkDocumentWorkspaceId',
        'selectable_pdf_text': 'selectablePdfText',
        'flatten': 'flatten'
    }

    def __init__(self, color_method=None, text_as_geometry=None, splines_as_polylines=None, version_string=None, destination_name=None, format_name=None, current_sheet_only=None, show_overidden_dimensions=None, notify_user=None, store_in_document=None, link_document_workspace_id=None, selectable_pdf_text=None, flatten=None):  # noqa: E501
        """DrawingsCreateTranslationBody - a model defined in Swagger"""  # noqa: E501

        self._color_method = None
        self._text_as_geometry = None
        self._splines_as_polylines = None
        self._version_string = None
        self._destination_name = None
        self._format_name = None
        self._current_sheet_only = None
        self._show_overidden_dimensions = None
        self._notify_user = None
        self._store_in_document = None
        self._link_document_workspace_id = None
        self._selectable_pdf_text = None
        self._flatten = None
        self.discriminator = None

        if color_method is not None:
            self.color_method = color_method
        if text_as_geometry is not None:
            self.text_as_geometry = text_as_geometry
        if splines_as_polylines is not None:
            self.splines_as_polylines = splines_as_polylines
        if version_string is not None:
            self.version_string = version_string
        if destination_name is not None:
            self.destination_name = destination_name
        if format_name is not None:
            self.format_name = format_name
        if current_sheet_only is not None:
            self.current_sheet_only = current_sheet_only
        if show_overidden_dimensions is not None:
            self.show_overidden_dimensions = show_overidden_dimensions
        if notify_user is not None:
            self.notify_user = notify_user
        if store_in_document is not None:
            self.store_in_document = store_in_document
        if link_document_workspace_id is not None:
            self.link_document_workspace_id = link_document_workspace_id
        if selectable_pdf_text is not None:
            self.selectable_pdf_text = selectable_pdf_text
        if flatten is not None:
            self.flatten = flatten

    @property
    def color_method(self):
        """Gets the color_method of this DrawingsCreateTranslationBody.  # noqa: E501

        (PDF only) The color transformation that should be applied to the drawing on export. Supported options are: color, blackandwhite and grayscale  # noqa: E501

        :return: The color_method of this DrawingsCreateTranslationBody.  # noqa: E501
        :rtype: str
        """
        return self._color_method

    @color_method.setter
    def color_method(self, color_method):
        """Sets the color_method of this DrawingsCreateTranslationBody.

        (PDF only) The color transformation that should be applied to the drawing on export. Supported options are: color, blackandwhite and grayscale  # noqa: E501

        :param color_method: The color_method of this DrawingsCreateTranslationBody.  # noqa: E501
        :type: str
        """

        self._color_method = color_method

    @property
    def text_as_geometry(self):
        """Gets the text_as_geometry of this DrawingsCreateTranslationBody.  # noqa: E501

        Whether text should be exploded into polylines  # noqa: E501

        :return: The text_as_geometry of this DrawingsCreateTranslationBody.  # noqa: E501
        :rtype: bool
        """
        return self._text_as_geometry

    @text_as_geometry.setter
    def text_as_geometry(self, text_as_geometry):
        """Sets the text_as_geometry of this DrawingsCreateTranslationBody.

        Whether text should be exploded into polylines  # noqa: E501

        :param text_as_geometry: The text_as_geometry of this DrawingsCreateTranslationBody.  # noqa: E501
        :type: bool
        """

        self._text_as_geometry = text_as_geometry

    @property
    def splines_as_polylines(self):
        """Gets the splines_as_polylines of this DrawingsCreateTranslationBody.  # noqa: E501

        Whether splines should be converted to polylines on the export  # noqa: E501

        :return: The splines_as_polylines of this DrawingsCreateTranslationBody.  # noqa: E501
        :rtype: bool
        """
        return self._splines_as_polylines

    @splines_as_polylines.setter
    def splines_as_polylines(self, splines_as_polylines):
        """Sets the splines_as_polylines of this DrawingsCreateTranslationBody.

        Whether splines should be converted to polylines on the export  # noqa: E501

        :param splines_as_polylines: The splines_as_polylines of this DrawingsCreateTranslationBody.  # noqa: E501
        :type: bool
        """

        self._splines_as_polylines = splines_as_polylines

    @property
    def version_string(self):
        """Gets the version_string of this DrawingsCreateTranslationBody.  # noqa: E501

        (DWG only) Version of output format to use (format-dependent). Currently supported formats are: 2013, 2010, 2007, 2004, 2000, R14, R13, R12  # noqa: E501

        :return: The version_string of this DrawingsCreateTranslationBody.  # noqa: E501
        :rtype: str
        """
        return self._version_string

    @version_string.setter
    def version_string(self, version_string):
        """Sets the version_string of this DrawingsCreateTranslationBody.

        (DWG only) Version of output format to use (format-dependent). Currently supported formats are: 2013, 2010, 2007, 2004, 2000, R14, R13, R12  # noqa: E501

        :param version_string: The version_string of this DrawingsCreateTranslationBody.  # noqa: E501
        :type: str
        """

        self._version_string = version_string

    @property
    def destination_name(self):
        """Gets the destination_name of this DrawingsCreateTranslationBody.  # noqa: E501

        Name of the output file or new element. If the name does not include a file extension the extension will be derived from the formatName parameter  # noqa: E501

        :return: The destination_name of this DrawingsCreateTranslationBody.  # noqa: E501
        :rtype: str
        """
        return self._destination_name

    @destination_name.setter
    def destination_name(self, destination_name):
        """Sets the destination_name of this DrawingsCreateTranslationBody.

        Name of the output file or new element. If the name does not include a file extension the extension will be derived from the formatName parameter  # noqa: E501

        :param destination_name: The destination_name of this DrawingsCreateTranslationBody.  # noqa: E501
        :type: str
        """

        self._destination_name = destination_name

    @property
    def format_name(self):
        """Gets the format_name of this DrawingsCreateTranslationBody.  # noqa: E501

        Name of format into which this element should be translated.  # noqa: E501

        :return: The format_name of this DrawingsCreateTranslationBody.  # noqa: E501
        :rtype: str
        """
        return self._format_name

    @format_name.setter
    def format_name(self, format_name):
        """Sets the format_name of this DrawingsCreateTranslationBody.

        Name of format into which this element should be translated.  # noqa: E501

        :param format_name: The format_name of this DrawingsCreateTranslationBody.  # noqa: E501
        :type: str
        """

        self._format_name = format_name

    @property
    def current_sheet_only(self):
        """Gets the current_sheet_only of this DrawingsCreateTranslationBody.  # noqa: E501

        (DWG only) Whether to only export the last active sheet or all sheets  # noqa: E501

        :return: The current_sheet_only of this DrawingsCreateTranslationBody.  # noqa: E501
        :rtype: bool
        """
        return self._current_sheet_only

    @current_sheet_only.setter
    def current_sheet_only(self, current_sheet_only):
        """Sets the current_sheet_only of this DrawingsCreateTranslationBody.

        (DWG only) Whether to only export the last active sheet or all sheets  # noqa: E501

        :param current_sheet_only: The current_sheet_only of this DrawingsCreateTranslationBody.  # noqa: E501
        :type: bool
        """

        self._current_sheet_only = current_sheet_only

    @property
    def show_overidden_dimensions(self):
        """Gets the show_overidden_dimensions of this DrawingsCreateTranslationBody.  # noqa: E501

        (DWG only) Whether overridden dimensions should be underlined  # noqa: E501

        :return: The show_overidden_dimensions of this DrawingsCreateTranslationBody.  # noqa: E501
        :rtype: bool
        """
        return self._show_overidden_dimensions

    @show_overidden_dimensions.setter
    def show_overidden_dimensions(self, show_overidden_dimensions):
        """Sets the show_overidden_dimensions of this DrawingsCreateTranslationBody.

        (DWG only) Whether overridden dimensions should be underlined  # noqa: E501

        :param show_overidden_dimensions: The show_overidden_dimensions of this DrawingsCreateTranslationBody.  # noqa: E501
        :type: bool
        """

        self._show_overidden_dimensions = show_overidden_dimensions

    @property
    def notify_user(self):
        """Gets the notify_user of this DrawingsCreateTranslationBody.  # noqa: E501

        Whether a user notification should be generated on completion  # noqa: E501

        :return: The notify_user of this DrawingsCreateTranslationBody.  # noqa: E501
        :rtype: bool
        """
        return self._notify_user

    @notify_user.setter
    def notify_user(self, notify_user):
        """Sets the notify_user of this DrawingsCreateTranslationBody.

        Whether a user notification should be generated on completion  # noqa: E501

        :param notify_user: The notify_user of this DrawingsCreateTranslationBody.  # noqa: E501
        :type: bool
        """

        self._notify_user = notify_user

    @property
    def store_in_document(self):
        """Gets the store_in_document of this DrawingsCreateTranslationBody.  # noqa: E501

        controls whether the translation is stored as a new element or        whether the data is stored as external data (storeInDocument=false).  # noqa: E501

        :return: The store_in_document of this DrawingsCreateTranslationBody.  # noqa: E501
        :rtype: bool
        """
        return self._store_in_document

    @store_in_document.setter
    def store_in_document(self, store_in_document):
        """Sets the store_in_document of this DrawingsCreateTranslationBody.

        controls whether the translation is stored as a new element or        whether the data is stored as external data (storeInDocument=false).  # noqa: E501

        :param store_in_document: The store_in_document of this DrawingsCreateTranslationBody.  # noqa: E501
        :type: bool
        """

        self._store_in_document = store_in_document

    @property
    def link_document_workspace_id(self):
        """Gets the link_document_workspace_id of this DrawingsCreateTranslationBody.  # noqa: E501

        If storeInDocument is true and linkDocumentId is specified, this        specifies a workspace to be used for result storage within the linkDocument.  # noqa: E501

        :return: The link_document_workspace_id of this DrawingsCreateTranslationBody.  # noqa: E501
        :rtype: str
        """
        return self._link_document_workspace_id

    @link_document_workspace_id.setter
    def link_document_workspace_id(self, link_document_workspace_id):
        """Sets the link_document_workspace_id of this DrawingsCreateTranslationBody.

        If storeInDocument is true and linkDocumentId is specified, this        specifies a workspace to be used for result storage within the linkDocument.  # noqa: E501

        :param link_document_workspace_id: The link_document_workspace_id of this DrawingsCreateTranslationBody.  # noqa: E501
        :type: str
        """

        self._link_document_workspace_id = link_document_workspace_id

    @property
    def selectable_pdf_text(self):
        """Gets the selectable_pdf_text of this DrawingsCreateTranslationBody.  # noqa: E501

        (PDF only) Controls if text on the drawing should be selectable on the output PDF.  # noqa: E501

        :return: The selectable_pdf_text of this DrawingsCreateTranslationBody.  # noqa: E501
        :rtype: bool
        """
        return self._selectable_pdf_text

    @selectable_pdf_text.setter
    def selectable_pdf_text(self, selectable_pdf_text):
        """Sets the selectable_pdf_text of this DrawingsCreateTranslationBody.

        (PDF only) Controls if text on the drawing should be selectable on the output PDF.  # noqa: E501

        :param selectable_pdf_text: The selectable_pdf_text of this DrawingsCreateTranslationBody.  # noqa: E501
        :type: bool
        """

        self._selectable_pdf_text = selectable_pdf_text

    @property
    def flatten(self):
        """Gets the flatten of this DrawingsCreateTranslationBody.  # noqa: E501

        Whether to set z-height to zero and normals to positive  # noqa: E501

        :return: The flatten of this DrawingsCreateTranslationBody.  # noqa: E501
        :rtype: bool
        """
        return self._flatten

    @flatten.setter
    def flatten(self, flatten):
        """Sets the flatten of this DrawingsCreateTranslationBody.

        Whether to set z-height to zero and normals to positive  # noqa: E501

        :param flatten: The flatten of this DrawingsCreateTranslationBody.  # noqa: E501
        :type: bool
        """

        self._flatten = flatten

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DrawingsCreateTranslationBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
