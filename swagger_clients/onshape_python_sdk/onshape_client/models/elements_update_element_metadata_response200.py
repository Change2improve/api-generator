# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.elements_update_element_metadata_response200_custom_properties import ElementsUpdateElementMetadataResponse200CustomProperties  # noqa: F401,E501


class ElementsUpdateElementMetadataResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vendor': 'str',
        'name': 'str',
        'title3': 'str',
        'data_type': 'str',
        'safe_to_show': 'bool',
        'supports_collaboration': 'bool',
        'project': 'str',
        'title1': 'str',
        'state': 'str',
        'href': 'str',
        'element_id': 'str',
        'custom_properties': 'ElementsUpdateElementMetadataResponse200CustomProperties',
        'product_line': 'str',
        'part_number': 'str',
        'revision': 'str',
        'type': 'str',
        'id': 'str',
        'title2': 'str',
        'description': 'str'
    }

    attribute_map = {
        'vendor': 'vendor',
        'name': 'name',
        'title3': 'title3',
        'data_type': 'dataType',
        'safe_to_show': 'safeToShow',
        'supports_collaboration': 'supportsCollaboration',
        'project': 'project',
        'title1': 'title1',
        'state': 'state',
        'href': 'href',
        'element_id': 'elementId',
        'custom_properties': 'customProperties',
        'product_line': 'productLine',
        'part_number': 'partNumber',
        'revision': 'revision',
        'type': 'type',
        'id': 'id',
        'title2': 'title2',
        'description': 'description'
    }

    def __init__(self, vendor=None, name=None, title3=None, data_type=None, safe_to_show=None, supports_collaboration=None, project=None, title1=None, state=None, href=None, element_id=None, custom_properties=None, product_line=None, part_number=None, revision=None, type=None, id=None, title2=None, description=None):  # noqa: E501
        """ElementsUpdateElementMetadataResponse200 - a model defined in Swagger"""  # noqa: E501

        self._vendor = None
        self._name = None
        self._title3 = None
        self._data_type = None
        self._safe_to_show = None
        self._supports_collaboration = None
        self._project = None
        self._title1 = None
        self._state = None
        self._href = None
        self._element_id = None
        self._custom_properties = None
        self._product_line = None
        self._part_number = None
        self._revision = None
        self._type = None
        self._id = None
        self._title2 = None
        self._description = None
        self.discriminator = None

        if vendor is not None:
            self.vendor = vendor
        if name is not None:
            self.name = name
        if title3 is not None:
            self.title3 = title3
        if data_type is not None:
            self.data_type = data_type
        if safe_to_show is not None:
            self.safe_to_show = safe_to_show
        if supports_collaboration is not None:
            self.supports_collaboration = supports_collaboration
        if project is not None:
            self.project = project
        if title1 is not None:
            self.title1 = title1
        if state is not None:
            self.state = state
        if href is not None:
            self.href = href
        if element_id is not None:
            self.element_id = element_id
        if custom_properties is not None:
            self.custom_properties = custom_properties
        if product_line is not None:
            self.product_line = product_line
        if part_number is not None:
            self.part_number = part_number
        if revision is not None:
            self.revision = revision
        if type is not None:
            self.type = type
        if id is not None:
            self.id = id
        if title2 is not None:
            self.title2 = title2
        if description is not None:
            self.description = description

    @property
    def vendor(self):
        """Gets the vendor of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Element vendor (user-specified)  # noqa: E501

        :return: The vendor of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._vendor

    @vendor.setter
    def vendor(self, vendor):
        """Sets the vendor of this ElementsUpdateElementMetadataResponse200.

        Element vendor (user-specified)  # noqa: E501

        :param vendor: The vendor of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._vendor = vendor

    @property
    def name(self):
        """Gets the name of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Element name  # noqa: E501

        :return: The name of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this ElementsUpdateElementMetadataResponse200.

        Element name  # noqa: E501

        :param name: The name of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def title3(self):
        """Gets the title3 of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Element title 3 (user-specified)  # noqa: E501

        :return: The title3 of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._title3

    @title3.setter
    def title3(self, title3):
        """Sets the title3 of this ElementsUpdateElementMetadataResponse200.

        Element title 3 (user-specified)  # noqa: E501

        :param title3: The title3 of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._title3 = title3

    @property
    def data_type(self):
        """Gets the data_type of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Onshape internal use  # noqa: E501

        :return: The data_type of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._data_type

    @data_type.setter
    def data_type(self, data_type):
        """Sets the data_type of this ElementsUpdateElementMetadataResponse200.

        Onshape internal use  # noqa: E501

        :param data_type: The data_type of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._data_type = data_type

    @property
    def safe_to_show(self):
        """Gets the safe_to_show of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Onshape internal use  # noqa: E501

        :return: The safe_to_show of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._safe_to_show

    @safe_to_show.setter
    def safe_to_show(self, safe_to_show):
        """Sets the safe_to_show of this ElementsUpdateElementMetadataResponse200.

        Onshape internal use  # noqa: E501

        :param safe_to_show: The safe_to_show of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: bool
        """

        self._safe_to_show = safe_to_show

    @property
    def supports_collaboration(self):
        """Gets the supports_collaboration of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Onshape internal use  # noqa: E501

        :return: The supports_collaboration of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._supports_collaboration

    @supports_collaboration.setter
    def supports_collaboration(self, supports_collaboration):
        """Sets the supports_collaboration of this ElementsUpdateElementMetadataResponse200.

        Onshape internal use  # noqa: E501

        :param supports_collaboration: The supports_collaboration of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: bool
        """

        self._supports_collaboration = supports_collaboration

    @property
    def project(self):
        """Gets the project of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Element project (user-specified)  # noqa: E501

        :return: The project of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._project

    @project.setter
    def project(self, project):
        """Sets the project of this ElementsUpdateElementMetadataResponse200.

        Element project (user-specified)  # noqa: E501

        :param project: The project of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._project = project

    @property
    def title1(self):
        """Gets the title1 of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Element title 1 (user-specified)  # noqa: E501

        :return: The title1 of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._title1

    @title1.setter
    def title1(self, title1):
        """Sets the title1 of this ElementsUpdateElementMetadataResponse200.

        Element title 1 (user-specified)  # noqa: E501

        :param title1: The title1 of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._title1 = title1

    @property
    def state(self):
        """Gets the state of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Element state, which can be: IN_PROGRESS, PENDING, RELEASED, OBSOLETE, UNKNOWN  # noqa: E501

        :return: The state of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._state

    @state.setter
    def state(self, state):
        """Sets the state of this ElementsUpdateElementMetadataResponse200.

        Element state, which can be: IN_PROGRESS, PENDING, RELEASED, OBSOLETE, UNKNOWN  # noqa: E501

        :param state: The state of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._state = state

    @property
    def href(self):
        """Gets the href of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Onshape internal use  # noqa: E501

        :return: The href of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this ElementsUpdateElementMetadataResponse200.

        Onshape internal use  # noqa: E501

        :param href: The href of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def element_id(self):
        """Gets the element_id of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Element ID  # noqa: E501

        :return: The element_id of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this ElementsUpdateElementMetadataResponse200.

        Element ID  # noqa: E501

        :param element_id: The element_id of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._element_id = element_id

    @property
    def custom_properties(self):
        """Gets the custom_properties of this ElementsUpdateElementMetadataResponse200.  # noqa: E501


        :return: The custom_properties of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: ElementsUpdateElementMetadataResponse200CustomProperties
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this ElementsUpdateElementMetadataResponse200.


        :param custom_properties: The custom_properties of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: ElementsUpdateElementMetadataResponse200CustomProperties
        """

        self._custom_properties = custom_properties

    @property
    def product_line(self):
        """Gets the product_line of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Element product line (user-specified)  # noqa: E501

        :return: The product_line of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._product_line

    @product_line.setter
    def product_line(self, product_line):
        """Sets the product_line of this ElementsUpdateElementMetadataResponse200.

        Element product line (user-specified)  # noqa: E501

        :param product_line: The product_line of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._product_line = product_line

    @property
    def part_number(self):
        """Gets the part_number of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Element part number (user-specified)  # noqa: E501

        :return: The part_number of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this ElementsUpdateElementMetadataResponse200.

        Element part number (user-specified)  # noqa: E501

        :param part_number: The part_number of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def revision(self):
        """Gets the revision of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Element revision (user-specified)  # noqa: E501

        :return: The revision of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this ElementsUpdateElementMetadataResponse200.

        Element revision (user-specified)  # noqa: E501

        :param revision: The revision of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._revision = revision

    @property
    def type(self):
        """Gets the type of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Element type (PARTSTUDIO, ASSEMBLY, BLOB, etc.)  # noqa: E501

        :return: The type of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this ElementsUpdateElementMetadataResponse200.

        Element type (PARTSTUDIO, ASSEMBLY, BLOB, etc.)  # noqa: E501

        :param type: The type of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def id(self):
        """Gets the id of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Onshape internal use  # noqa: E501

        :return: The id of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this ElementsUpdateElementMetadataResponse200.

        Onshape internal use  # noqa: E501

        :param id: The id of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def title2(self):
        """Gets the title2 of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Element title 2 (user-specified)  # noqa: E501

        :return: The title2 of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._title2

    @title2.setter
    def title2(self, title2):
        """Sets the title2 of this ElementsUpdateElementMetadataResponse200.

        Element title 2 (user-specified)  # noqa: E501

        :param title2: The title2 of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._title2 = title2

    @property
    def description(self):
        """Gets the description of this ElementsUpdateElementMetadataResponse200.  # noqa: E501

        Element description (user-specified)  # noqa: E501

        :return: The description of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this ElementsUpdateElementMetadataResponse200.

        Element description (user-specified)  # noqa: E501

        :param description: The description of this ElementsUpdateElementMetadataResponse200.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, ElementsUpdateElementMetadataResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
