# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AppElementsResolveReferenceResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'resolved_document_microversion_id': 'str',
        'reference_id': 'str',
        'target_version_id': 'str',
        'track_new_versions': 'bool',
        'id_tag': 'str',
        'target_element_id': 'str',
        'target_document_id': 'str',
        'target_document_microversion_id': 'str',
        'target_configuration': 'str',
        'id_tag_is_valid': 'str',
        'change_id': 'str',
        'is_configurable': 'bool'
    }

    attribute_map = {
        'resolved_document_microversion_id': 'resolvedDocumentMicroversionId',
        'reference_id': 'referenceId',
        'target_version_id': 'targetVersionId',
        'track_new_versions': 'trackNewVersions',
        'id_tag': 'idTag',
        'target_element_id': 'targetElementId',
        'target_document_id': 'targetDocumentId',
        'target_document_microversion_id': 'targetDocumentMicroversionId',
        'target_configuration': 'targetConfiguration',
        'id_tag_is_valid': 'idTagIsValid',
        'change_id': 'changeId',
        'is_configurable': 'isConfigurable'
    }

    def __init__(self, resolved_document_microversion_id=None, reference_id=None, target_version_id=None, track_new_versions=None, id_tag=None, target_element_id=None, target_document_id=None, target_document_microversion_id=None, target_configuration=None, id_tag_is_valid=None, change_id=None, is_configurable=None):  # noqa: E501
        """AppElementsResolveReferenceResponse200 - a model defined in Swagger"""  # noqa: E501

        self._resolved_document_microversion_id = None
        self._reference_id = None
        self._target_version_id = None
        self._track_new_versions = None
        self._id_tag = None
        self._target_element_id = None
        self._target_document_id = None
        self._target_document_microversion_id = None
        self._target_configuration = None
        self._id_tag_is_valid = None
        self._change_id = None
        self._is_configurable = None
        self.discriminator = None

        if resolved_document_microversion_id is not None:
            self.resolved_document_microversion_id = resolved_document_microversion_id
        if reference_id is not None:
            self.reference_id = reference_id
        if target_version_id is not None:
            self.target_version_id = target_version_id
        if track_new_versions is not None:
            self.track_new_versions = track_new_versions
        if id_tag is not None:
            self.id_tag = id_tag
        if target_element_id is not None:
            self.target_element_id = target_element_id
        if target_document_id is not None:
            self.target_document_id = target_document_id
        if target_document_microversion_id is not None:
            self.target_document_microversion_id = target_document_microversion_id
        if target_configuration is not None:
            self.target_configuration = target_configuration
        if id_tag_is_valid is not None:
            self.id_tag_is_valid = id_tag_is_valid
        if change_id is not None:
            self.change_id = change_id
        if is_configurable is not None:
            self.is_configurable = is_configurable

    @property
    def resolved_document_microversion_id(self):
        """Gets the resolved_document_microversion_id of this AppElementsResolveReferenceResponse200.  # noqa: E501

        The document microversion contained in the             reference, or the current document microversion if not set in the reference  # noqa: E501

        :return: The resolved_document_microversion_id of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :rtype: str
        """
        return self._resolved_document_microversion_id

    @resolved_document_microversion_id.setter
    def resolved_document_microversion_id(self, resolved_document_microversion_id):
        """Sets the resolved_document_microversion_id of this AppElementsResolveReferenceResponse200.

        The document microversion contained in the             reference, or the current document microversion if not set in the reference  # noqa: E501

        :param resolved_document_microversion_id: The resolved_document_microversion_id of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :type: str
        """

        self._resolved_document_microversion_id = resolved_document_microversion_id

    @property
    def reference_id(self):
        """Gets the reference_id of this AppElementsResolveReferenceResponse200.  # noqa: E501

        The id of the retrieved reference  # noqa: E501

        :return: The reference_id of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :rtype: str
        """
        return self._reference_id

    @reference_id.setter
    def reference_id(self, reference_id):
        """Sets the reference_id of this AppElementsResolveReferenceResponse200.

        The id of the retrieved reference  # noqa: E501

        :param reference_id: The reference_id of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :type: str
        """

        self._reference_id = reference_id

    @property
    def target_version_id(self):
        """Gets the target_version_id of this AppElementsResolveReferenceResponse200.  # noqa: E501

        The Id of the version of the document contained in the reference  # noqa: E501

        :return: The target_version_id of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :rtype: str
        """
        return self._target_version_id

    @target_version_id.setter
    def target_version_id(self, target_version_id):
        """Sets the target_version_id of this AppElementsResolveReferenceResponse200.

        The Id of the version of the document contained in the reference  # noqa: E501

        :param target_version_id: The target_version_id of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :type: str
        """

        self._target_version_id = target_version_id

    @property
    def track_new_versions(self):
        """Gets the track_new_versions of this AppElementsResolveReferenceResponse200.  # noqa: E501

        for internal use  # noqa: E501

        :return: The track_new_versions of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._track_new_versions

    @track_new_versions.setter
    def track_new_versions(self, track_new_versions):
        """Sets the track_new_versions of this AppElementsResolveReferenceResponse200.

        for internal use  # noqa: E501

        :param track_new_versions: The track_new_versions of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :type: bool
        """

        self._track_new_versions = track_new_versions

    @property
    def id_tag(self):
        """Gets the id_tag of this AppElementsResolveReferenceResponse200.  # noqa: E501

        The idTag of a target within the target element  # noqa: E501

        :return: The id_tag of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :rtype: str
        """
        return self._id_tag

    @id_tag.setter
    def id_tag(self, id_tag):
        """Sets the id_tag of this AppElementsResolveReferenceResponse200.

        The idTag of a target within the target element  # noqa: E501

        :param id_tag: The id_tag of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :type: str
        """

        self._id_tag = id_tag

    @property
    def target_element_id(self):
        """Gets the target_element_id of this AppElementsResolveReferenceResponse200.  # noqa: E501

        The id of the referenced element  # noqa: E501

        :return: The target_element_id of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :rtype: str
        """
        return self._target_element_id

    @target_element_id.setter
    def target_element_id(self, target_element_id):
        """Sets the target_element_id of this AppElementsResolveReferenceResponse200.

        The id of the referenced element  # noqa: E501

        :param target_element_id: The target_element_id of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :type: str
        """

        self._target_element_id = target_element_id

    @property
    def target_document_id(self):
        """Gets the target_document_id of this AppElementsResolveReferenceResponse200.  # noqa: E501

        The Id of the document contained in the reference  # noqa: E501

        :return: The target_document_id of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :rtype: str
        """
        return self._target_document_id

    @target_document_id.setter
    def target_document_id(self, target_document_id):
        """Sets the target_document_id of this AppElementsResolveReferenceResponse200.

        The Id of the document contained in the reference  # noqa: E501

        :param target_document_id: The target_document_id of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :type: str
        """

        self._target_document_id = target_document_id

    @property
    def target_document_microversion_id(self):
        """Gets the target_document_microversion_id of this AppElementsResolveReferenceResponse200.  # noqa: E501

        The document microversion contained in the             reference, if set  # noqa: E501

        :return: The target_document_microversion_id of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :rtype: str
        """
        return self._target_document_microversion_id

    @target_document_microversion_id.setter
    def target_document_microversion_id(self, target_document_microversion_id):
        """Sets the target_document_microversion_id of this AppElementsResolveReferenceResponse200.

        The document microversion contained in the             reference, if set  # noqa: E501

        :param target_document_microversion_id: The target_document_microversion_id of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :type: str
        """

        self._target_document_microversion_id = target_document_microversion_id

    @property
    def target_configuration(self):
        """Gets the target_configuration of this AppElementsResolveReferenceResponse200.  # noqa: E501

        The configuration string for the target element  # noqa: E501

        :return: The target_configuration of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :rtype: str
        """
        return self._target_configuration

    @target_configuration.setter
    def target_configuration(self, target_configuration):
        """Sets the target_configuration of this AppElementsResolveReferenceResponse200.

        The configuration string for the target element  # noqa: E501

        :param target_configuration: The target_configuration of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :type: str
        """

        self._target_configuration = target_configuration

    @property
    def id_tag_is_valid(self):
        """Gets the id_tag_is_valid of this AppElementsResolveReferenceResponse200.  # noqa: E501

        Set to true if the idTag value is valid  # noqa: E501

        :return: The id_tag_is_valid of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :rtype: str
        """
        return self._id_tag_is_valid

    @id_tag_is_valid.setter
    def id_tag_is_valid(self, id_tag_is_valid):
        """Sets the id_tag_is_valid of this AppElementsResolveReferenceResponse200.

        Set to true if the idTag value is valid  # noqa: E501

        :param id_tag_is_valid: The id_tag_is_valid of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :type: str
        """

        self._id_tag_is_valid = id_tag_is_valid

    @property
    def change_id(self):
        """Gets the change_id of this AppElementsResolveReferenceResponse200.  # noqa: E501

        The changeId of the creation operation  # noqa: E501

        :return: The change_id of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :rtype: str
        """
        return self._change_id

    @change_id.setter
    def change_id(self, change_id):
        """Sets the change_id of this AppElementsResolveReferenceResponse200.

        The changeId of the creation operation  # noqa: E501

        :param change_id: The change_id of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :type: str
        """

        self._change_id = change_id

    @property
    def is_configurable(self):
        """Gets the is_configurable of this AppElementsResolveReferenceResponse200.  # noqa: E501

        True if the element configuration can be changed to a             non-default value  # noqa: E501

        :return: The is_configurable of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._is_configurable

    @is_configurable.setter
    def is_configurable(self, is_configurable):
        """Sets the is_configurable of this AppElementsResolveReferenceResponse200.

        True if the element configuration can be changed to a             non-default value  # noqa: E501

        :param is_configurable: The is_configurable of this AppElementsResolveReferenceResponse200.  # noqa: E501
        :type: bool
        """

        self._is_configurable = is_configurable

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppElementsResolveReferenceResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
