# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AppElementsUpdateReferenceBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'target_version_id': 'str',
        'parent_change_id': 'str',
        'id_tag': 'str',
        'target_element_id': 'str',
        'target_microversion_id': 'str',
        'target_configuration': 'str',
        'id_tag_microversion_id': 'str',
        'transaction_id': 'str'
    }

    attribute_map = {
        'target_version_id': 'targetVersionId',
        'parent_change_id': 'parentChangeId',
        'id_tag': 'idTag',
        'target_element_id': 'targetElementId',
        'target_microversion_id': 'targetMicroversionId',
        'target_configuration': 'targetConfiguration',
        'id_tag_microversion_id': 'idTagMicroversionId',
        'transaction_id': 'transactionId'
    }

    def __init__(self, target_version_id=None, parent_change_id=None, id_tag=None, target_element_id=None, target_microversion_id=None, target_configuration=None, id_tag_microversion_id=None, transaction_id=None):  # noqa: E501
        """AppElementsUpdateReferenceBody - a model defined in Swagger"""  # noqa: E501

        self._target_version_id = None
        self._parent_change_id = None
        self._id_tag = None
        self._target_element_id = None
        self._target_microversion_id = None
        self._target_configuration = None
        self._id_tag_microversion_id = None
        self._transaction_id = None
        self.discriminator = None

        if target_version_id is not None:
            self.target_version_id = target_version_id
        if parent_change_id is not None:
            self.parent_change_id = parent_change_id
        if id_tag is not None:
            self.id_tag = id_tag
        if target_element_id is not None:
            self.target_element_id = target_element_id
        if target_microversion_id is not None:
            self.target_microversion_id = target_microversion_id
        if target_configuration is not None:
            self.target_configuration = target_configuration
        if id_tag_microversion_id is not None:
            self.id_tag_microversion_id = id_tag_microversion_id
        if transaction_id is not None:
            self.transaction_id = transaction_id

    @property
    def target_version_id(self):
        """Gets the target_version_id of this AppElementsUpdateReferenceBody.  # noqa: E501

        The Id of the version the document that contains the target of the           reference  # noqa: E501

        :return: The target_version_id of this AppElementsUpdateReferenceBody.  # noqa: E501
        :rtype: str
        """
        return self._target_version_id

    @target_version_id.setter
    def target_version_id(self, target_version_id):
        """Sets the target_version_id of this AppElementsUpdateReferenceBody.

        The Id of the version the document that contains the target of the           reference  # noqa: E501

        :param target_version_id: The target_version_id of this AppElementsUpdateReferenceBody.  # noqa: E501
        :type: str
        """

        self._target_version_id = target_version_id

    @property
    def parent_change_id(self):
        """Gets the parent_change_id of this AppElementsUpdateReferenceBody.  # noqa: E501

        Id of the prior change to the application element  # noqa: E501

        :return: The parent_change_id of this AppElementsUpdateReferenceBody.  # noqa: E501
        :rtype: str
        """
        return self._parent_change_id

    @parent_change_id.setter
    def parent_change_id(self, parent_change_id):
        """Sets the parent_change_id of this AppElementsUpdateReferenceBody.

        Id of the prior change to the application element  # noqa: E501

        :param parent_change_id: The parent_change_id of this AppElementsUpdateReferenceBody.  # noqa: E501
        :type: str
        """

        self._parent_change_id = parent_change_id

    @property
    def id_tag(self):
        """Gets the id_tag of this AppElementsUpdateReferenceBody.  # noqa: E501

        An optional deterministic id within the target element that should be tracked  # noqa: E501

        :return: The id_tag of this AppElementsUpdateReferenceBody.  # noqa: E501
        :rtype: str
        """
        return self._id_tag

    @id_tag.setter
    def id_tag(self, id_tag):
        """Sets the id_tag of this AppElementsUpdateReferenceBody.

        An optional deterministic id within the target element that should be tracked  # noqa: E501

        :param id_tag: The id_tag of this AppElementsUpdateReferenceBody.  # noqa: E501
        :type: str
        """

        self._id_tag = id_tag

    @property
    def target_element_id(self):
        """Gets the target_element_id of this AppElementsUpdateReferenceBody.  # noqa: E501

        The element Id of the element that is or contains the target of the           reference  # noqa: E501

        :return: The target_element_id of this AppElementsUpdateReferenceBody.  # noqa: E501
        :rtype: str
        """
        return self._target_element_id

    @target_element_id.setter
    def target_element_id(self, target_element_id):
        """Sets the target_element_id of this AppElementsUpdateReferenceBody.

        The element Id of the element that is or contains the target of the           reference  # noqa: E501

        :param target_element_id: The target_element_id of this AppElementsUpdateReferenceBody.  # noqa: E501
        :type: str
        """

        self._target_element_id = target_element_id

    @property
    def target_microversion_id(self):
        """Gets the target_microversion_id of this AppElementsUpdateReferenceBody.  # noqa: E501

        An optional document microversionId that should be tracked, in           case a specific point in history should be tracked by the reference  # noqa: E501

        :return: The target_microversion_id of this AppElementsUpdateReferenceBody.  # noqa: E501
        :rtype: str
        """
        return self._target_microversion_id

    @target_microversion_id.setter
    def target_microversion_id(self, target_microversion_id):
        """Sets the target_microversion_id of this AppElementsUpdateReferenceBody.

        An optional document microversionId that should be tracked, in           case a specific point in history should be tracked by the reference  # noqa: E501

        :param target_microversion_id: The target_microversion_id of this AppElementsUpdateReferenceBody.  # noqa: E501
        :type: str
        """

        self._target_microversion_id = target_microversion_id

    @property
    def target_configuration(self):
        """Gets the target_configuration of this AppElementsUpdateReferenceBody.  # noqa: E501

        If not blank, specifies a new configuration of the element  # noqa: E501

        :return: The target_configuration of this AppElementsUpdateReferenceBody.  # noqa: E501
        :rtype: str
        """
        return self._target_configuration

    @target_configuration.setter
    def target_configuration(self, target_configuration):
        """Sets the target_configuration of this AppElementsUpdateReferenceBody.

        If not blank, specifies a new configuration of the element  # noqa: E501

        :param target_configuration: The target_configuration of this AppElementsUpdateReferenceBody.  # noqa: E501
        :type: str
        """

        self._target_configuration = target_configuration

    @property
    def id_tag_microversion_id(self):
        """Gets the id_tag_microversion_id of this AppElementsUpdateReferenceBody.  # noqa: E501

        If idTag is specified, the document microversion associated with           the idTag  # noqa: E501

        :return: The id_tag_microversion_id of this AppElementsUpdateReferenceBody.  # noqa: E501
        :rtype: str
        """
        return self._id_tag_microversion_id

    @id_tag_microversion_id.setter
    def id_tag_microversion_id(self, id_tag_microversion_id):
        """Sets the id_tag_microversion_id of this AppElementsUpdateReferenceBody.

        If idTag is specified, the document microversion associated with           the idTag  # noqa: E501

        :param id_tag_microversion_id: The id_tag_microversion_id of this AppElementsUpdateReferenceBody.  # noqa: E501
        :type: str
        """

        self._id_tag_microversion_id = id_tag_microversion_id

    @property
    def transaction_id(self):
        """Gets the transaction_id of this AppElementsUpdateReferenceBody.  # noqa: E501

        Id of the transaction in which the reference update should occur  # noqa: E501

        :return: The transaction_id of this AppElementsUpdateReferenceBody.  # noqa: E501
        :rtype: str
        """
        return self._transaction_id

    @transaction_id.setter
    def transaction_id(self, transaction_id):
        """Sets the transaction_id of this AppElementsUpdateReferenceBody.

        Id of the transaction in which the reference update should occur  # noqa: E501

        :param transaction_id: The transaction_id of this AppElementsUpdateReferenceBody.  # noqa: E501
        :type: str
        """

        self._transaction_id = transaction_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppElementsUpdateReferenceBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
