# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.part_studios_compare_part_studio_response200_changes import PartStudiosComparePartStudioResponse200Changes  # noqa: F401,E501


class PartStudiosComparePartStudioResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'source_microversion_id': 'str',
        'target_version_id': 'str',
        'type': 'str',
        'target_microversion_id': 'str',
        'source_version_id': 'str',
        'changes': 'PartStudiosComparePartStudioResponse200Changes',
        'source_workspace_id': 'str',
        'target_workspace_id': 'str'
    }

    attribute_map = {
        'source_microversion_id': 'sourceMicroversionId',
        'target_version_id': 'targetVersionId',
        'type': 'type',
        'target_microversion_id': 'targetMicroversionId',
        'source_version_id': 'sourceVersionId',
        'changes': 'changes',
        'source_workspace_id': 'sourceWorkspaceId',
        'target_workspace_id': 'targetWorkspaceId'
    }

    def __init__(self, source_microversion_id=None, target_version_id=None, type=None, target_microversion_id=None, source_version_id=None, changes=None, source_workspace_id=None, target_workspace_id=None):  # noqa: E501
        """PartStudiosComparePartStudioResponse200 - a model defined in Swagger"""  # noqa: E501

        self._source_microversion_id = None
        self._target_version_id = None
        self._type = None
        self._target_microversion_id = None
        self._source_version_id = None
        self._changes = None
        self._source_workspace_id = None
        self._target_workspace_id = None
        self.discriminator = None

        if source_microversion_id is not None:
            self.source_microversion_id = source_microversion_id
        if target_version_id is not None:
            self.target_version_id = target_version_id
        if type is not None:
            self.type = type
        if target_microversion_id is not None:
            self.target_microversion_id = target_microversion_id
        if source_version_id is not None:
            self.source_version_id = source_version_id
        if changes is not None:
            self.changes = changes
        if source_workspace_id is not None:
            self.source_workspace_id = source_workspace_id
        if target_workspace_id is not None:
            self.target_workspace_id = target_workspace_id

    @property
    def source_microversion_id(self):
        """Gets the source_microversion_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501

        Source document microversion id  # noqa: E501

        :return: The source_microversion_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :rtype: str
        """
        return self._source_microversion_id

    @source_microversion_id.setter
    def source_microversion_id(self, source_microversion_id):
        """Sets the source_microversion_id of this PartStudiosComparePartStudioResponse200.

        Source document microversion id  # noqa: E501

        :param source_microversion_id: The source_microversion_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :type: str
        """

        self._source_microversion_id = source_microversion_id

    @property
    def target_version_id(self):
        """Gets the target_version_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501

        Target version id, can be null  # noqa: E501

        :return: The target_version_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :rtype: str
        """
        return self._target_version_id

    @target_version_id.setter
    def target_version_id(self, target_version_id):
        """Sets the target_version_id of this PartStudiosComparePartStudioResponse200.

        Target version id, can be null  # noqa: E501

        :param target_version_id: The target_version_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :type: str
        """

        self._target_version_id = target_version_id

    @property
    def type(self):
        """Gets the type of this PartStudiosComparePartStudioResponse200.  # noqa: E501

        Part Studio change type (see API description)  # noqa: E501

        :return: The type of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :rtype: str
        """
        return self._type

    @type.setter
    def type(self, type):
        """Sets the type of this PartStudiosComparePartStudioResponse200.

        Part Studio change type (see API description)  # noqa: E501

        :param type: The type of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :type: str
        """

        self._type = type

    @property
    def target_microversion_id(self):
        """Gets the target_microversion_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501

        Target document microversion id  # noqa: E501

        :return: The target_microversion_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :rtype: str
        """
        return self._target_microversion_id

    @target_microversion_id.setter
    def target_microversion_id(self, target_microversion_id):
        """Sets the target_microversion_id of this PartStudiosComparePartStudioResponse200.

        Target document microversion id  # noqa: E501

        :param target_microversion_id: The target_microversion_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :type: str
        """

        self._target_microversion_id = target_microversion_id

    @property
    def source_version_id(self):
        """Gets the source_version_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501

        Source version id, can be null  # noqa: E501

        :return: The source_version_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :rtype: str
        """
        return self._source_version_id

    @source_version_id.setter
    def source_version_id(self, source_version_id):
        """Sets the source_version_id of this PartStudiosComparePartStudioResponse200.

        Source version id, can be null  # noqa: E501

        :param source_version_id: The source_version_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :type: str
        """

        self._source_version_id = source_version_id

    @property
    def changes(self):
        """Gets the changes of this PartStudiosComparePartStudioResponse200.  # noqa: E501


        :return: The changes of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :rtype: PartStudiosComparePartStudioResponse200Changes
        """
        return self._changes

    @changes.setter
    def changes(self, changes):
        """Sets the changes of this PartStudiosComparePartStudioResponse200.


        :param changes: The changes of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :type: PartStudiosComparePartStudioResponse200Changes
        """

        self._changes = changes

    @property
    def source_workspace_id(self):
        """Gets the source_workspace_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501

        Source workspace id, can be null  # noqa: E501

        :return: The source_workspace_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :rtype: str
        """
        return self._source_workspace_id

    @source_workspace_id.setter
    def source_workspace_id(self, source_workspace_id):
        """Sets the source_workspace_id of this PartStudiosComparePartStudioResponse200.

        Source workspace id, can be null  # noqa: E501

        :param source_workspace_id: The source_workspace_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :type: str
        """

        self._source_workspace_id = source_workspace_id

    @property
    def target_workspace_id(self):
        """Gets the target_workspace_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501

        Target workspace id, can be null  # noqa: E501

        :return: The target_workspace_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :rtype: str
        """
        return self._target_workspace_id

    @target_workspace_id.setter
    def target_workspace_id(self, target_workspace_id):
        """Sets the target_workspace_id of this PartStudiosComparePartStudioResponse200.

        Target workspace id, can be null  # noqa: E501

        :param target_workspace_id: The target_workspace_id of this PartStudiosComparePartStudioResponse200.  # noqa: E501
        :type: str
        """

        self._target_workspace_id = target_workspace_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartStudiosComparePartStudioResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
