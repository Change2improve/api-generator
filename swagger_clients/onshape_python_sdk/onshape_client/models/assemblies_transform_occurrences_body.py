# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.assemblies_transform_occurrences_body_occurrences import AssembliesTransformOccurrencesBodyOccurrences  # noqa: F401,E501


class AssembliesTransformOccurrencesBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_relative': 'bool',
        'occurrences': 'list[AssembliesTransformOccurrencesBodyOccurrences]',
        'transform': 'list[float]'
    }

    attribute_map = {
        'is_relative': 'isRelative',
        'occurrences': 'occurrences',
        'transform': 'transform'
    }

    def __init__(self, is_relative=None, occurrences=None, transform=None):  # noqa: E501
        """AssembliesTransformOccurrencesBody - a model defined in Swagger"""  # noqa: E501

        self._is_relative = None
        self._occurrences = None
        self._transform = None
        self.discriminator = None

        if is_relative is not None:
            self.is_relative = is_relative
        if occurrences is not None:
            self.occurrences = occurrences
        if transform is not None:
            self.transform = transform

    @property
    def is_relative(self):
        """Gets the is_relative of this AssembliesTransformOccurrencesBody.  # noqa: E501

        Whether the transform is relative or absolute. Each occurrence in an    assembly has a transform that positions it relative to the top-most assembly. An absolute transform operation    sets the transform of the occurrence and each child occurrence to the specified transform. A relative    transform operation combines the specified transform with the existing transform of the occurrence and with    each child occurrence transform.  # noqa: E501

        :return: The is_relative of this AssembliesTransformOccurrencesBody.  # noqa: E501
        :rtype: bool
        """
        return self._is_relative

    @is_relative.setter
    def is_relative(self, is_relative):
        """Sets the is_relative of this AssembliesTransformOccurrencesBody.

        Whether the transform is relative or absolute. Each occurrence in an    assembly has a transform that positions it relative to the top-most assembly. An absolute transform operation    sets the transform of the occurrence and each child occurrence to the specified transform. A relative    transform operation combines the specified transform with the existing transform of the occurrence and with    each child occurrence transform.  # noqa: E501

        :param is_relative: The is_relative of this AssembliesTransformOccurrencesBody.  # noqa: E501
        :type: bool
        """

        self._is_relative = is_relative

    @property
    def occurrences(self):
        """Gets the occurrences of this AssembliesTransformOccurrencesBody.  # noqa: E501

        A list of occurrences to transform.  # noqa: E501

        :return: The occurrences of this AssembliesTransformOccurrencesBody.  # noqa: E501
        :rtype: list[AssembliesTransformOccurrencesBodyOccurrences]
        """
        return self._occurrences

    @occurrences.setter
    def occurrences(self, occurrences):
        """Sets the occurrences of this AssembliesTransformOccurrencesBody.

        A list of occurrences to transform.  # noqa: E501

        :param occurrences: The occurrences of this AssembliesTransformOccurrencesBody.  # noqa: E501
        :type: list[AssembliesTransformOccurrencesBodyOccurrences]
        """

        self._occurrences = occurrences

    @property
    def transform(self):
        """Gets the transform of this AssembliesTransformOccurrencesBody.  # noqa: E501

        The transform to apply to the occurrences.  Must be 9, 12, or 16    elements in length, representing a 3x3, 4x3 or 4x4 matrix, respectively.  All translation matrix components are in meters.  # noqa: E501

        :return: The transform of this AssembliesTransformOccurrencesBody.  # noqa: E501
        :rtype: list[float]
        """
        return self._transform

    @transform.setter
    def transform(self, transform):
        """Sets the transform of this AssembliesTransformOccurrencesBody.

        The transform to apply to the occurrences.  Must be 9, 12, or 16    elements in length, representing a 3x3, 4x3 or 4x4 matrix, respectively.  All translation matrix components are in meters.  # noqa: E501

        :param transform: The transform of this AssembliesTransformOccurrencesBody.  # noqa: E501
        :type: list[float]
        """

        self._transform = transform

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssembliesTransformOccurrencesBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
