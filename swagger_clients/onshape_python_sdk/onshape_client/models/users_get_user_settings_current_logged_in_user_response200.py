# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.users_get_user_settings_current_logged_in_user_response200_common_units import UsersGetUserSettingsCurrentLoggedInUserResponse200CommonUnits  # noqa: F401,E501
from onshape_client.models.users_get_user_settings_current_logged_in_user_response200_default_units import UsersGetUserSettingsCurrentLoggedInUserResponse200DefaultUnits  # noqa: F401,E501
from onshape_client.models.users_get_user_settings_current_logged_in_user_response200_view_manipulation_mouse_key_mapping import UsersGetUserSettingsCurrentLoggedInUserResponse200ViewManipulationMouseKeyMapping  # noqa: F401,E501


class UsersGetUserSettingsCurrentLoggedInUserResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'view_mapping_id': 'float',
        'view_manipulation_mouse_key_mapping': 'UsersGetUserSettingsCurrentLoggedInUserResponse200ViewManipulationMouseKeyMapping',
        'locale': 'str',
        'drawing_background_id': 'float',
        'common_units': 'UsersGetUserSettingsCurrentLoggedInUserResponse200CommonUnits',
        'enforce_application_acl': 'bool',
        'default_units': 'UsersGetUserSettingsCurrentLoggedInUserResponse200DefaultUnits',
        'mouse_actions': 'str',
        'reverse_scroll_wheel_zoom_direction': 'bool',
        'id': 'str'
    }

    attribute_map = {
        'view_mapping_id': 'viewMappingId',
        'view_manipulation_mouse_key_mapping': 'viewManipulationMouseKeyMapping',
        'locale': 'locale',
        'drawing_background_id': 'drawingBackgroundId',
        'common_units': 'commonUnits',
        'enforce_application_acl': 'enforceApplicationAcl',
        'default_units': 'defaultUnits',
        'mouse_actions': 'mouseActions',
        'reverse_scroll_wheel_zoom_direction': 'reverseScrollWheelZoomDirection',
        'id': 'id'
    }

    def __init__(self, view_mapping_id=None, view_manipulation_mouse_key_mapping=None, locale=None, drawing_background_id=None, common_units=None, enforce_application_acl=None, default_units=None, mouse_actions=None, reverse_scroll_wheel_zoom_direction=None, id=None):  # noqa: E501
        """UsersGetUserSettingsCurrentLoggedInUserResponse200 - a model defined in Swagger"""  # noqa: E501

        self._view_mapping_id = None
        self._view_manipulation_mouse_key_mapping = None
        self._locale = None
        self._drawing_background_id = None
        self._common_units = None
        self._enforce_application_acl = None
        self._default_units = None
        self._mouse_actions = None
        self._reverse_scroll_wheel_zoom_direction = None
        self._id = None
        self.discriminator = None

        if view_mapping_id is not None:
            self.view_mapping_id = view_mapping_id
        if view_manipulation_mouse_key_mapping is not None:
            self.view_manipulation_mouse_key_mapping = view_manipulation_mouse_key_mapping
        if locale is not None:
            self.locale = locale
        if drawing_background_id is not None:
            self.drawing_background_id = drawing_background_id
        if common_units is not None:
            self.common_units = common_units
        if enforce_application_acl is not None:
            self.enforce_application_acl = enforce_application_acl
        if default_units is not None:
            self.default_units = default_units
        if mouse_actions is not None:
            self.mouse_actions = mouse_actions
        if reverse_scroll_wheel_zoom_direction is not None:
            self.reverse_scroll_wheel_zoom_direction = reverse_scroll_wheel_zoom_direction
        if id is not None:
            self.id = id

    @property
    def view_mapping_id(self):
        """Gets the view_mapping_id of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501

        Onshape internal use  # noqa: E501

        :return: The view_mapping_id of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :rtype: float
        """
        return self._view_mapping_id

    @view_mapping_id.setter
    def view_mapping_id(self, view_mapping_id):
        """Sets the view_mapping_id of this UsersGetUserSettingsCurrentLoggedInUserResponse200.

        Onshape internal use  # noqa: E501

        :param view_mapping_id: The view_mapping_id of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :type: float
        """

        self._view_mapping_id = view_mapping_id

    @property
    def view_manipulation_mouse_key_mapping(self):
        """Gets the view_manipulation_mouse_key_mapping of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501


        :return: The view_manipulation_mouse_key_mapping of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :rtype: UsersGetUserSettingsCurrentLoggedInUserResponse200ViewManipulationMouseKeyMapping
        """
        return self._view_manipulation_mouse_key_mapping

    @view_manipulation_mouse_key_mapping.setter
    def view_manipulation_mouse_key_mapping(self, view_manipulation_mouse_key_mapping):
        """Sets the view_manipulation_mouse_key_mapping of this UsersGetUserSettingsCurrentLoggedInUserResponse200.


        :param view_manipulation_mouse_key_mapping: The view_manipulation_mouse_key_mapping of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :type: UsersGetUserSettingsCurrentLoggedInUserResponse200ViewManipulationMouseKeyMapping
        """

        self._view_manipulation_mouse_key_mapping = view_manipulation_mouse_key_mapping

    @property
    def locale(self):
        """Gets the locale of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501

        Locale and language in which user uses Onshape  # noqa: E501

        :return: The locale of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :rtype: str
        """
        return self._locale

    @locale.setter
    def locale(self, locale):
        """Sets the locale of this UsersGetUserSettingsCurrentLoggedInUserResponse200.

        Locale and language in which user uses Onshape  # noqa: E501

        :param locale: The locale of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :type: str
        """

        self._locale = locale

    @property
    def drawing_background_id(self):
        """Gets the drawing_background_id of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501

        Onshape internal use  # noqa: E501

        :return: The drawing_background_id of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :rtype: float
        """
        return self._drawing_background_id

    @drawing_background_id.setter
    def drawing_background_id(self, drawing_background_id):
        """Sets the drawing_background_id of this UsersGetUserSettingsCurrentLoggedInUserResponse200.

        Onshape internal use  # noqa: E501

        :param drawing_background_id: The drawing_background_id of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :type: float
        """

        self._drawing_background_id = drawing_background_id

    @property
    def common_units(self):
        """Gets the common_units of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501


        :return: The common_units of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :rtype: UsersGetUserSettingsCurrentLoggedInUserResponse200CommonUnits
        """
        return self._common_units

    @common_units.setter
    def common_units(self, common_units):
        """Sets the common_units of this UsersGetUserSettingsCurrentLoggedInUserResponse200.


        :param common_units: The common_units of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :type: UsersGetUserSettingsCurrentLoggedInUserResponse200CommonUnits
        """

        self._common_units = common_units

    @property
    def enforce_application_acl(self):
        """Gets the enforce_application_acl of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501

        Onshape internal use  # noqa: E501

        :return: The enforce_application_acl of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._enforce_application_acl

    @enforce_application_acl.setter
    def enforce_application_acl(self, enforce_application_acl):
        """Sets the enforce_application_acl of this UsersGetUserSettingsCurrentLoggedInUserResponse200.

        Onshape internal use  # noqa: E501

        :param enforce_application_acl: The enforce_application_acl of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :type: bool
        """

        self._enforce_application_acl = enforce_application_acl

    @property
    def default_units(self):
        """Gets the default_units of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501


        :return: The default_units of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :rtype: UsersGetUserSettingsCurrentLoggedInUserResponse200DefaultUnits
        """
        return self._default_units

    @default_units.setter
    def default_units(self, default_units):
        """Sets the default_units of this UsersGetUserSettingsCurrentLoggedInUserResponse200.


        :param default_units: The default_units of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :type: UsersGetUserSettingsCurrentLoggedInUserResponse200DefaultUnits
        """

        self._default_units = default_units

    @property
    def mouse_actions(self):
        """Gets the mouse_actions of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501

        Onshape internal use (deprecated)  # noqa: E501

        :return: The mouse_actions of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :rtype: str
        """
        return self._mouse_actions

    @mouse_actions.setter
    def mouse_actions(self, mouse_actions):
        """Sets the mouse_actions of this UsersGetUserSettingsCurrentLoggedInUserResponse200.

        Onshape internal use (deprecated)  # noqa: E501

        :param mouse_actions: The mouse_actions of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :type: str
        """

        self._mouse_actions = mouse_actions

    @property
    def reverse_scroll_wheel_zoom_direction(self):
        """Gets the reverse_scroll_wheel_zoom_direction of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501

        Whether scroll wheel zoom direction is reversed             (default: scroll forward to zoom in)  # noqa: E501

        :return: The reverse_scroll_wheel_zoom_direction of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._reverse_scroll_wheel_zoom_direction

    @reverse_scroll_wheel_zoom_direction.setter
    def reverse_scroll_wheel_zoom_direction(self, reverse_scroll_wheel_zoom_direction):
        """Sets the reverse_scroll_wheel_zoom_direction of this UsersGetUserSettingsCurrentLoggedInUserResponse200.

        Whether scroll wheel zoom direction is reversed             (default: scroll forward to zoom in)  # noqa: E501

        :param reverse_scroll_wheel_zoom_direction: The reverse_scroll_wheel_zoom_direction of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :type: bool
        """

        self._reverse_scroll_wheel_zoom_direction = reverse_scroll_wheel_zoom_direction

    @property
    def id(self):
        """Gets the id of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501

        Onshape internal use  # noqa: E501

        :return: The id of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this UsersGetUserSettingsCurrentLoggedInUserResponse200.

        Onshape internal use  # noqa: E501

        :param id: The id of this UsersGetUserSettingsCurrentLoggedInUserResponse200.  # noqa: E501
        :type: str
        """

        self._id = id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, UsersGetUserSettingsCurrentLoggedInUserResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
