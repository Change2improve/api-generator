# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'feature_type': 'str',
        'document_microversion': 'str',
        'feature_id': 'str',
        'document_version': 'str',
        'document_id': 'str',
        'element_id': 'str'
    }

    attribute_map = {
        'feature_type': 'featureType',
        'document_microversion': 'documentMicroversion',
        'feature_id': 'featureId',
        'document_version': 'documentVersion',
        'document_id': 'documentId',
        'element_id': 'elementId'
    }

    def __init__(self, feature_type=None, document_microversion=None, feature_id=None, document_version=None, document_id=None, element_id=None):  # noqa: E501
        """AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures - a model defined in Swagger"""  # noqa: E501

        self._feature_type = None
        self._document_microversion = None
        self._feature_id = None
        self._document_version = None
        self._document_id = None
        self._element_id = None
        self.discriminator = None

        if feature_type is not None:
            self.feature_type = feature_type
        if document_microversion is not None:
            self.document_microversion = document_microversion
        if feature_id is not None:
            self.feature_id = feature_id
        if document_version is not None:
            self.document_version = document_version
        if document_id is not None:
            self.document_id = document_id
        if element_id is not None:
            self.element_id = element_id

    @property
    def feature_type(self):
        """Gets the feature_type of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501

        The type of the feature (e.g. sketch)  # noqa: E501

        :return: The feature_type of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501
        :rtype: str
        """
        return self._feature_type

    @feature_type.setter
    def feature_type(self, feature_type):
        """Sets the feature_type of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.

        The type of the feature (e.g. sketch)  # noqa: E501

        :param feature_type: The feature_type of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501
        :type: str
        """

        self._feature_type = feature_type

    @property
    def document_microversion(self):
        """Gets the document_microversion of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501

        Document microversion ID of the             document containing the referenced feature  # noqa: E501

        :return: The document_microversion of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501
        :rtype: str
        """
        return self._document_microversion

    @document_microversion.setter
    def document_microversion(self, document_microversion):
        """Sets the document_microversion of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.

        Document microversion ID of the             document containing the referenced feature  # noqa: E501

        :param document_microversion: The document_microversion of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501
        :type: str
        """

        self._document_microversion = document_microversion

    @property
    def feature_id(self):
        """Gets the feature_id of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501

        The ID of the feature  # noqa: E501

        :return: The feature_id of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501
        :rtype: str
        """
        return self._feature_id

    @feature_id.setter
    def feature_id(self, feature_id):
        """Sets the feature_id of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.

        The ID of the feature  # noqa: E501

        :param feature_id: The feature_id of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501
        :type: str
        """

        self._feature_id = feature_id

    @property
    def document_version(self):
        """Gets the document_version of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501

        Version ID of document containing the             referenced feature, if reached through one or more version references  # noqa: E501

        :return: The document_version of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501
        :rtype: str
        """
        return self._document_version

    @document_version.setter
    def document_version(self, document_version):
        """Sets the document_version of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.

        Version ID of document containing the             referenced feature, if reached through one or more version references  # noqa: E501

        :param document_version: The document_version of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501
        :type: str
        """

        self._document_version = document_version

    @property
    def document_id(self):
        """Gets the document_id of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501

        Document ID of the document containing the             referenced feature  # noqa: E501

        :return: The document_id of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.

        Document ID of the document containing the             referenced feature  # noqa: E501

        :param document_id: The document_id of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def element_id(self):
        """Gets the element_id of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501

        Element ID of part studio containing the feature  # noqa: E501

        :return: The element_id of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501
        :rtype: str
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.

        Element ID of part studio containing the feature  # noqa: E501

        :param element_id: The element_id of this AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures.  # noqa: E501
        :type: str
        """

        self._element_id = element_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssembliesGetAssemblyDefinitionResponse200PartStudioFeatures):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
