# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.app_elements_create_element_body_location import AppElementsCreateElementBodyLocation  # noqa: F401,E501
from onshape_client.models.app_elements_create_element_body_subelements import AppElementsCreateElementBodySubelements  # noqa: F401,E501


class AppElementsCreateElementBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format_id': 'str',
        'location': 'AppElementsCreateElementBodyLocation',
        'subelements': 'list[AppElementsCreateElementBodySubelements]',
        'name': 'str',
        'description': 'str'
    }

    attribute_map = {
        'format_id': 'formatId',
        'location': 'location',
        'subelements': 'subelements',
        'name': 'name',
        'description': 'description'
    }

    def __init__(self, format_id=None, location=None, subelements=None, name=None, description=None):  # noqa: E501
        """AppElementsCreateElementBody - a model defined in Swagger"""  # noqa: E501

        self._format_id = None
        self._location = None
        self._subelements = None
        self._name = None
        self._description = None
        self.discriminator = None

        if format_id is not None:
            self.format_id = format_id
        if location is not None:
            self.location = location
        if subelements is not None:
            self.subelements = subelements
        if name is not None:
            self.name = name
        if description is not None:
            self.description = description

    @property
    def format_id(self):
        """Gets the format_id of this AppElementsCreateElementBody.  # noqa: E501

        The format id for the application element  # noqa: E501

        :return: The format_id of this AppElementsCreateElementBody.  # noqa: E501
        :rtype: str
        """
        return self._format_id

    @format_id.setter
    def format_id(self, format_id):
        """Sets the format_id of this AppElementsCreateElementBody.

        The format id for the application element  # noqa: E501

        :param format_id: The format_id of this AppElementsCreateElementBody.  # noqa: E501
        :type: str
        """

        self._format_id = format_id

    @property
    def location(self):
        """Gets the location of this AppElementsCreateElementBody.  # noqa: E501


        :return: The location of this AppElementsCreateElementBody.  # noqa: E501
        :rtype: AppElementsCreateElementBodyLocation
        """
        return self._location

    @location.setter
    def location(self, location):
        """Sets the location of this AppElementsCreateElementBody.


        :param location: The location of this AppElementsCreateElementBody.  # noqa: E501
        :type: AppElementsCreateElementBodyLocation
        """

        self._location = location

    @property
    def subelements(self):
        """Gets the subelements of this AppElementsCreateElementBody.  # noqa: E501

        Initial list of sub-element contents  # noqa: E501

        :return: The subelements of this AppElementsCreateElementBody.  # noqa: E501
        :rtype: list[AppElementsCreateElementBodySubelements]
        """
        return self._subelements

    @subelements.setter
    def subelements(self, subelements):
        """Sets the subelements of this AppElementsCreateElementBody.

        Initial list of sub-element contents  # noqa: E501

        :param subelements: The subelements of this AppElementsCreateElementBody.  # noqa: E501
        :type: list[AppElementsCreateElementBodySubelements]
        """

        self._subelements = subelements

    @property
    def name(self):
        """Gets the name of this AppElementsCreateElementBody.  # noqa: E501

        Requested app-element name  # noqa: E501

        :return: The name of this AppElementsCreateElementBody.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this AppElementsCreateElementBody.

        Requested app-element name  # noqa: E501

        :param name: The name of this AppElementsCreateElementBody.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def description(self):
        """Gets the description of this AppElementsCreateElementBody.  # noqa: E501

        Description of the change being made, for history tracking  # noqa: E501

        :return: The description of this AppElementsCreateElementBody.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this AppElementsCreateElementBody.

        Description of the change being made, for history tracking  # noqa: E501

        :param description: The description of this AppElementsCreateElementBody.  # noqa: E501
        :type: str
        """

        self._description = description

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AppElementsCreateElementBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
