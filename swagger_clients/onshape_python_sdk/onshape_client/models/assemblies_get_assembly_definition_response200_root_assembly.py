# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.assemblies_get_assembly_definition_response200_root_assembly_instances import AssembliesGetAssemblyDefinitionResponse200RootAssemblyInstances  # noqa: F401,E501
from onshape_client.models.assemblies_get_assembly_definition_response200_root_assembly_occurrences import AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences  # noqa: F401,E501


class AssembliesGetAssemblyDefinitionResponse200RootAssembly(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'instances': 'list[AssembliesGetAssemblyDefinitionResponse200RootAssemblyInstances]',
        'occurrences': 'list[AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences]',
        'element_id': 'str',
        'document_id': 'str',
        'document_microversion': 'str'
    }

    attribute_map = {
        'instances': 'instances',
        'occurrences': 'occurrences',
        'element_id': 'elementId',
        'document_id': 'documentId',
        'document_microversion': 'documentMicroversion'
    }

    def __init__(self, instances=None, occurrences=None, element_id=None, document_id=None, document_microversion=None):  # noqa: E501
        """AssembliesGetAssemblyDefinitionResponse200RootAssembly - a model defined in Swagger"""  # noqa: E501

        self._instances = None
        self._occurrences = None
        self._element_id = None
        self._document_id = None
        self._document_microversion = None
        self.discriminator = None

        if instances is not None:
            self.instances = instances
        if occurrences is not None:
            self.occurrences = occurrences
        if element_id is not None:
            self.element_id = element_id
        if document_id is not None:
            self.document_id = document_id
        if document_microversion is not None:
            self.document_microversion = document_microversion

    @property
    def instances(self):
        """Gets the instances of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501

        Direct child parts and sub-assemblies of the assembly.  # noqa: E501

        :return: The instances of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501
        :rtype: list[AssembliesGetAssemblyDefinitionResponse200RootAssemblyInstances]
        """
        return self._instances

    @instances.setter
    def instances(self, instances):
        """Sets the instances of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.

        Direct child parts and sub-assemblies of the assembly.  # noqa: E501

        :param instances: The instances of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501
        :type: list[AssembliesGetAssemblyDefinitionResponse200RootAssemblyInstances]
        """

        self._instances = instances

    @property
    def occurrences(self):
        """Gets the occurrences of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501

        Assembly occurrences  # noqa: E501

        :return: The occurrences of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501
        :rtype: list[AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences]
        """
        return self._occurrences

    @occurrences.setter
    def occurrences(self, occurrences):
        """Sets the occurrences of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.

        Assembly occurrences  # noqa: E501

        :param occurrences: The occurrences of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501
        :type: list[AssembliesGetAssemblyDefinitionResponse200RootAssemblyOccurrences]
        """

        self._occurrences = occurrences

    @property
    def element_id(self):
        """Gets the element_id of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501

        Element ID  # noqa: E501

        :return: The element_id of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501
        :rtype: str
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.

        Element ID  # noqa: E501

        :param element_id: The element_id of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501
        :type: str
        """

        self._element_id = element_id

    @property
    def document_id(self):
        """Gets the document_id of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501

        Document ID  # noqa: E501

        :return: The document_id of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.

        Document ID  # noqa: E501

        :param document_id: The document_id of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def document_microversion(self):
        """Gets the document_microversion of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501

        Document microversion ID  # noqa: E501

        :return: The document_microversion of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501
        :rtype: str
        """
        return self._document_microversion

    @document_microversion.setter
    def document_microversion(self, document_microversion):
        """Sets the document_microversion of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.

        Document microversion ID  # noqa: E501

        :param document_microversion: The document_microversion of this AssembliesGetAssemblyDefinitionResponse200RootAssembly.  # noqa: E501
        :type: str
        """

        self._document_microversion = document_microversion

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, AssembliesGetAssemblyDefinitionResponse200RootAssembly):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
