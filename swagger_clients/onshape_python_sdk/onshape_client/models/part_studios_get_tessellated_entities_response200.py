# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.part_studios_get_tessellated_entities_response200_sketch_entities import PartStudiosGetTessellatedEntitiesResponse200SketchEntities  # noqa: F401,E501


class PartStudiosGetTessellatedEntitiesResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'error_message': 'str',
        'sketch': 'object',
        'sketch_id': 'str',
        'sketch_entities': 'list[PartStudiosGetTessellatedEntitiesResponse200SketchEntities]',
        'sketch_name': 'str'
    }

    attribute_map = {
        'error_message': 'errorMessage',
        'sketch': 'sketch',
        'sketch_id': 'sketchId',
        'sketch_entities': 'sketchEntities',
        'sketch_name': 'sketchName'
    }

    def __init__(self, error_message=None, sketch=None, sketch_id=None, sketch_entities=None, sketch_name=None):  # noqa: E501
        """PartStudiosGetTessellatedEntitiesResponse200 - a model defined in Swagger"""  # noqa: E501

        self._error_message = None
        self._sketch = None
        self._sketch_id = None
        self._sketch_entities = None
        self._sketch_name = None
        self.discriminator = None

        if error_message is not None:
            self.error_message = error_message
        if sketch is not None:
            self.sketch = sketch
        if sketch_id is not None:
            self.sketch_id = sketch_id
        if sketch_entities is not None:
            self.sketch_entities = sketch_entities
        if sketch_name is not None:
            self.sketch_name = sketch_name

    @property
    def error_message(self):
        """Gets the error_message of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501

        Error message, if any  # noqa: E501

        :return: The error_message of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this PartStudiosGetTessellatedEntitiesResponse200.

        Error message, if any  # noqa: E501

        :param error_message: The error_message of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def sketch(self):
        """Gets the sketch of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501

        Sketch in a studio  # noqa: E501

        :return: The sketch of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501
        :rtype: object
        """
        return self._sketch

    @sketch.setter
    def sketch(self, sketch):
        """Sets the sketch of this PartStudiosGetTessellatedEntitiesResponse200.

        Sketch in a studio  # noqa: E501

        :param sketch: The sketch of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501
        :type: object
        """

        self._sketch = sketch

    @property
    def sketch_id(self):
        """Gets the sketch_id of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501

        Sketch ID  # noqa: E501

        :return: The sketch_id of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501
        :rtype: str
        """
        return self._sketch_id

    @sketch_id.setter
    def sketch_id(self, sketch_id):
        """Sets the sketch_id of this PartStudiosGetTessellatedEntitiesResponse200.

        Sketch ID  # noqa: E501

        :param sketch_id: The sketch_id of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501
        :type: str
        """

        self._sketch_id = sketch_id

    @property
    def sketch_entities(self):
        """Gets the sketch_entities of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501

        Array of sketch entities  # noqa: E501

        :return: The sketch_entities of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501
        :rtype: list[PartStudiosGetTessellatedEntitiesResponse200SketchEntities]
        """
        return self._sketch_entities

    @sketch_entities.setter
    def sketch_entities(self, sketch_entities):
        """Sets the sketch_entities of this PartStudiosGetTessellatedEntitiesResponse200.

        Array of sketch entities  # noqa: E501

        :param sketch_entities: The sketch_entities of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501
        :type: list[PartStudiosGetTessellatedEntitiesResponse200SketchEntities]
        """

        self._sketch_entities = sketch_entities

    @property
    def sketch_name(self):
        """Gets the sketch_name of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501

        Sketch name  # noqa: E501

        :return: The sketch_name of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501
        :rtype: str
        """
        return self._sketch_name

    @sketch_name.setter
    def sketch_name(self, sketch_name):
        """Sets the sketch_name of this PartStudiosGetTessellatedEntitiesResponse200.

        Sketch name  # noqa: E501

        :param sketch_name: The sketch_name of this PartStudiosGetTessellatedEntitiesResponse200.  # noqa: E501
        :type: str
        """

        self._sketch_name = sketch_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartStudiosGetTessellatedEntitiesResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
