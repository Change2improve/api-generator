# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PartsGetBodyDetailsResponse200Geometry(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'start_vector': 'list[float]',
        'end_point': 'list[float]',
        'mid_point': 'list[float]',
        'length': 'float',
        'quarter_point': 'list[float]',
        'start_point': 'list[float]',
        'end_vector': 'list[float]'
    }

    attribute_map = {
        'start_vector': 'startVector',
        'end_point': 'endPoint',
        'mid_point': 'midPoint',
        'length': 'length',
        'quarter_point': 'quarterPoint',
        'start_point': 'startPoint',
        'end_vector': 'endVector'
    }

    def __init__(self, start_vector=None, end_point=None, mid_point=None, length=None, quarter_point=None, start_point=None, end_vector=None):  # noqa: E501
        """PartsGetBodyDetailsResponse200Geometry - a model defined in Swagger"""  # noqa: E501

        self._start_vector = None
        self._end_point = None
        self._mid_point = None
        self._length = None
        self._quarter_point = None
        self._start_point = None
        self._end_vector = None
        self.discriminator = None

        if start_vector is not None:
            self.start_vector = start_vector
        if end_point is not None:
            self.end_point = end_point
        if mid_point is not None:
            self.mid_point = mid_point
        if length is not None:
            self.length = length
        if quarter_point is not None:
            self.quarter_point = quarter_point
        if start_point is not None:
            self.start_point = start_point
        if end_vector is not None:
            self.end_vector = end_vector

    @property
    def start_vector(self):
        """Gets the start_vector of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501

        Start vector  # noqa: E501

        :return: The start_vector of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501
        :rtype: list[float]
        """
        return self._start_vector

    @start_vector.setter
    def start_vector(self, start_vector):
        """Sets the start_vector of this PartsGetBodyDetailsResponse200Geometry.

        Start vector  # noqa: E501

        :param start_vector: The start_vector of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501
        :type: list[float]
        """

        self._start_vector = start_vector

    @property
    def end_point(self):
        """Gets the end_point of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501

        End point  # noqa: E501

        :return: The end_point of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501
        :rtype: list[float]
        """
        return self._end_point

    @end_point.setter
    def end_point(self, end_point):
        """Sets the end_point of this PartsGetBodyDetailsResponse200Geometry.

        End point  # noqa: E501

        :param end_point: The end_point of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501
        :type: list[float]
        """

        self._end_point = end_point

    @property
    def mid_point(self):
        """Gets the mid_point of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501

        Midpoint  # noqa: E501

        :return: The mid_point of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501
        :rtype: list[float]
        """
        return self._mid_point

    @mid_point.setter
    def mid_point(self, mid_point):
        """Sets the mid_point of this PartsGetBodyDetailsResponse200Geometry.

        Midpoint  # noqa: E501

        :param mid_point: The mid_point of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501
        :type: list[float]
        """

        self._mid_point = mid_point

    @property
    def length(self):
        """Gets the length of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501

        Edge length  # noqa: E501

        :return: The length of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501
        :rtype: float
        """
        return self._length

    @length.setter
    def length(self, length):
        """Sets the length of this PartsGetBodyDetailsResponse200Geometry.

        Edge length  # noqa: E501

        :param length: The length of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501
        :type: float
        """

        self._length = length

    @property
    def quarter_point(self):
        """Gets the quarter_point of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501

        Quarter point  # noqa: E501

        :return: The quarter_point of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501
        :rtype: list[float]
        """
        return self._quarter_point

    @quarter_point.setter
    def quarter_point(self, quarter_point):
        """Sets the quarter_point of this PartsGetBodyDetailsResponse200Geometry.

        Quarter point  # noqa: E501

        :param quarter_point: The quarter_point of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501
        :type: list[float]
        """

        self._quarter_point = quarter_point

    @property
    def start_point(self):
        """Gets the start_point of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501

        Start point  # noqa: E501

        :return: The start_point of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501
        :rtype: list[float]
        """
        return self._start_point

    @start_point.setter
    def start_point(self, start_point):
        """Sets the start_point of this PartsGetBodyDetailsResponse200Geometry.

        Start point  # noqa: E501

        :param start_point: The start_point of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501
        :type: list[float]
        """

        self._start_point = start_point

    @property
    def end_vector(self):
        """Gets the end_vector of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501

        End vector  # noqa: E501

        :return: The end_vector of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501
        :rtype: list[float]
        """
        return self._end_vector

    @end_vector.setter
    def end_vector(self, end_vector):
        """Sets the end_vector of this PartsGetBodyDetailsResponse200Geometry.

        End vector  # noqa: E501

        :param end_vector: The end_vector of this PartsGetBodyDetailsResponse200Geometry.  # noqa: E501
        :type: list[float]
        """

        self._end_vector = end_vector

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartsGetBodyDetailsResponse200Geometry):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
