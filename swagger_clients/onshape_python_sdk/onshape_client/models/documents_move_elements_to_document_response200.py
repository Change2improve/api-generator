# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocumentsMoveElementsToDocumentResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'new_workspace_id': 'str',
        'error_message': 'str',
        'new_document_version_id': 'str',
        'is_new_document': 'bool',
        'new_document_id': 'str',
        'new_document_name': 'str'
    }

    attribute_map = {
        'new_workspace_id': 'newWorkspaceId',
        'error_message': 'errorMessage',
        'new_document_version_id': 'newDocumentVersionId',
        'is_new_document': 'isNewDocument',
        'new_document_id': 'newDocumentId',
        'new_document_name': 'newDocumentName'
    }

    def __init__(self, new_workspace_id=None, error_message=None, new_document_version_id=None, is_new_document=None, new_document_id=None, new_document_name=None):  # noqa: E501
        """DocumentsMoveElementsToDocumentResponse200 - a model defined in Swagger"""  # noqa: E501

        self._new_workspace_id = None
        self._error_message = None
        self._new_document_version_id = None
        self._is_new_document = None
        self._new_document_id = None
        self._new_document_name = None
        self.discriminator = None

        if new_workspace_id is not None:
            self.new_workspace_id = new_workspace_id
        if error_message is not None:
            self.error_message = error_message
        if new_document_version_id is not None:
            self.new_document_version_id = new_document_version_id
        if is_new_document is not None:
            self.is_new_document = is_new_document
        if new_document_id is not None:
            self.new_document_id = new_document_id
        if new_document_name is not None:
            self.new_document_name = new_document_name

    @property
    def new_workspace_id(self):
        """Gets the new_workspace_id of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501

        ID of new workspace  # noqa: E501

        :return: The new_workspace_id of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501
        :rtype: str
        """
        return self._new_workspace_id

    @new_workspace_id.setter
    def new_workspace_id(self, new_workspace_id):
        """Sets the new_workspace_id of this DocumentsMoveElementsToDocumentResponse200.

        ID of new workspace  # noqa: E501

        :param new_workspace_id: The new_workspace_id of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501
        :type: str
        """

        self._new_workspace_id = new_workspace_id

    @property
    def error_message(self):
        """Gets the error_message of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501

        Error message if the call fails  # noqa: E501

        :return: The error_message of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this DocumentsMoveElementsToDocumentResponse200.

        Error message if the call fails  # noqa: E501

        :param error_message: The error_message of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def new_document_version_id(self):
        """Gets the new_document_version_id of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501

        the new version created in the target document, can be null  # noqa: E501

        :return: The new_document_version_id of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501
        :rtype: str
        """
        return self._new_document_version_id

    @new_document_version_id.setter
    def new_document_version_id(self, new_document_version_id):
        """Sets the new_document_version_id of this DocumentsMoveElementsToDocumentResponse200.

        the new version created in the target document, can be null  # noqa: E501

        :param new_document_version_id: The new_document_version_id of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501
        :type: str
        """

        self._new_document_version_id = new_document_version_id

    @property
    def is_new_document(self):
        """Gets the is_new_document of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501

        true if elements have been moved to a new document  # noqa: E501

        :return: The is_new_document of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501
        :rtype: bool
        """
        return self._is_new_document

    @is_new_document.setter
    def is_new_document(self, is_new_document):
        """Sets the is_new_document of this DocumentsMoveElementsToDocumentResponse200.

        true if elements have been moved to a new document  # noqa: E501

        :param is_new_document: The is_new_document of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501
        :type: bool
        """

        self._is_new_document = is_new_document

    @property
    def new_document_id(self):
        """Gets the new_document_id of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501

        ID of new document  # noqa: E501

        :return: The new_document_id of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501
        :rtype: str
        """
        return self._new_document_id

    @new_document_id.setter
    def new_document_id(self, new_document_id):
        """Sets the new_document_id of this DocumentsMoveElementsToDocumentResponse200.

        ID of new document  # noqa: E501

        :param new_document_id: The new_document_id of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501
        :type: str
        """

        self._new_document_id = new_document_id

    @property
    def new_document_name(self):
        """Gets the new_document_name of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501

        Name of new document  # noqa: E501

        :return: The new_document_name of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501
        :rtype: str
        """
        return self._new_document_name

    @new_document_name.setter
    def new_document_name(self, new_document_name):
        """Sets the new_document_name of this DocumentsMoveElementsToDocumentResponse200.

        Name of new document  # noqa: E501

        :param new_document_name: The new_document_name of this DocumentsMoveElementsToDocumentResponse200.  # noqa: E501
        :type: str
        """

        self._new_document_name = new_document_name

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentsMoveElementsToDocumentResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
