# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from onshape_client.models.part_studios_get_metadata_response200_appearance import PartStudiosGetMetadataResponse200Appearance  # noqa: F401,E501
from onshape_client.models.part_studios_get_metadata_response200_custom_properties import PartStudiosGetMetadataResponse200CustomProperties  # noqa: F401,E501


class PartStudiosGetMetadataResponse200Parts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'name': 'str',
        'part_id': 'str',
        'description': 'str',
        'appearance': 'PartStudiosGetMetadataResponse200Appearance',
        'microversion_id': 'str',
        'custom_properties': 'PartStudiosGetMetadataResponse200CustomProperties',
        'part_number': 'str',
        'revision': 'str'
    }

    attribute_map = {
        'name': 'name',
        'part_id': 'partId',
        'description': 'description',
        'appearance': 'appearance',
        'microversion_id': 'microversionId',
        'custom_properties': 'customProperties',
        'part_number': 'partNumber',
        'revision': 'revision'
    }

    def __init__(self, name=None, part_id=None, description=None, appearance=None, microversion_id=None, custom_properties=None, part_number=None, revision=None):  # noqa: E501
        """PartStudiosGetMetadataResponse200Parts - a model defined in Swagger"""  # noqa: E501

        self._name = None
        self._part_id = None
        self._description = None
        self._appearance = None
        self._microversion_id = None
        self._custom_properties = None
        self._part_number = None
        self._revision = None
        self.discriminator = None

        if name is not None:
            self.name = name
        if part_id is not None:
            self.part_id = part_id
        if description is not None:
            self.description = description
        if appearance is not None:
            self.appearance = appearance
        if microversion_id is not None:
            self.microversion_id = microversion_id
        if custom_properties is not None:
            self.custom_properties = custom_properties
        if part_number is not None:
            self.part_number = part_number
        if revision is not None:
            self.revision = revision

    @property
    def name(self):
        """Gets the name of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501

        Part name  # noqa: E501

        :return: The name of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this PartStudiosGetMetadataResponse200Parts.

        Part name  # noqa: E501

        :param name: The name of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :type: str
        """

        self._name = name

    @property
    def part_id(self):
        """Gets the part_id of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501

        Deterministic part ID  # noqa: E501

        :return: The part_id of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :rtype: str
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this PartStudiosGetMetadataResponse200Parts.

        Deterministic part ID  # noqa: E501

        :param part_id: The part_id of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :type: str
        """

        self._part_id = part_id

    @property
    def description(self):
        """Gets the description of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501

        Part description (user-specified)  # noqa: E501

        :return: The description of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this PartStudiosGetMetadataResponse200Parts.

        Part description (user-specified)  # noqa: E501

        :param description: The description of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def appearance(self):
        """Gets the appearance of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501


        :return: The appearance of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :rtype: PartStudiosGetMetadataResponse200Appearance
        """
        return self._appearance

    @appearance.setter
    def appearance(self, appearance):
        """Sets the appearance of this PartStudiosGetMetadataResponse200Parts.


        :param appearance: The appearance of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :type: PartStudiosGetMetadataResponse200Appearance
        """

        self._appearance = appearance

    @property
    def microversion_id(self):
        """Gets the microversion_id of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501

        Document microversion ID  # noqa: E501

        :return: The microversion_id of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :rtype: str
        """
        return self._microversion_id

    @microversion_id.setter
    def microversion_id(self, microversion_id):
        """Sets the microversion_id of this PartStudiosGetMetadataResponse200Parts.

        Document microversion ID  # noqa: E501

        :param microversion_id: The microversion_id of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :type: str
        """

        self._microversion_id = microversion_id

    @property
    def custom_properties(self):
        """Gets the custom_properties of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501


        :return: The custom_properties of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :rtype: PartStudiosGetMetadataResponse200CustomProperties
        """
        return self._custom_properties

    @custom_properties.setter
    def custom_properties(self, custom_properties):
        """Sets the custom_properties of this PartStudiosGetMetadataResponse200Parts.


        :param custom_properties: The custom_properties of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :type: PartStudiosGetMetadataResponse200CustomProperties
        """

        self._custom_properties = custom_properties

    @property
    def part_number(self):
        """Gets the part_number of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501

        Part number (user-specified)  # noqa: E501

        :return: The part_number of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this PartStudiosGetMetadataResponse200Parts.

        Part number (user-specified)  # noqa: E501

        :param part_number: The part_number of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def revision(self):
        """Gets the revision of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501

        Part revision (user-specified)  # noqa: E501

        :return: The revision of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this PartStudiosGetMetadataResponse200Parts.

        Part revision (user-specified)  # noqa: E501

        :param revision: The revision of this PartStudiosGetMetadataResponse200Parts.  # noqa: E501
        :type: str
        """

        self._revision = revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartStudiosGetMetadataResponse200Parts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
