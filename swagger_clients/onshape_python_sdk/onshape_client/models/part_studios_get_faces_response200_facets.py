# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PartStudiosGetFacesResponse200Facets(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'vertex_normals': 'list[list[float]]',
        'texture_coordinates': 'list[float]',
        'normal': 'list[float]'
    }

    attribute_map = {
        'vertex_normals': 'vertexNormals',
        'texture_coordinates': 'textureCoordinates',
        'normal': 'normal'
    }

    def __init__(self, vertex_normals=None, texture_coordinates=None, normal=None):  # noqa: E501
        """PartStudiosGetFacesResponse200Facets - a model defined in Swagger"""  # noqa: E501

        self._vertex_normals = None
        self._texture_coordinates = None
        self._normal = None
        self.discriminator = None

        if vertex_normals is not None:
            self.vertex_normals = vertex_normals
        if texture_coordinates is not None:
            self.texture_coordinates = texture_coordinates
        if normal is not None:
            self.normal = normal

    @property
    def vertex_normals(self):
        """Gets the vertex_normals of this PartStudiosGetFacesResponse200Facets.  # noqa: E501

        Normal     vectors to face surface at the corresponding facet vertices (Only output if query param \"outputVertexNormals\"     is true).  # noqa: E501

        :return: The vertex_normals of this PartStudiosGetFacesResponse200Facets.  # noqa: E501
        :rtype: list[list[float]]
        """
        return self._vertex_normals

    @vertex_normals.setter
    def vertex_normals(self, vertex_normals):
        """Sets the vertex_normals of this PartStudiosGetFacesResponse200Facets.

        Normal     vectors to face surface at the corresponding facet vertices (Only output if query param \"outputVertexNormals\"     is true).  # noqa: E501

        :param vertex_normals: The vertex_normals of this PartStudiosGetFacesResponse200Facets.  # noqa: E501
        :type: list[list[float]]
        """

        self._vertex_normals = vertex_normals

    @property
    def texture_coordinates(self):
        """Gets the texture_coordinates of this PartStudiosGetFacesResponse200Facets.  # noqa: E501

        Texture     coordinates of a facet (Only output if query param \"outputTextureCoordinates\" is true)  # noqa: E501

        :return: The texture_coordinates of this PartStudiosGetFacesResponse200Facets.  # noqa: E501
        :rtype: list[float]
        """
        return self._texture_coordinates

    @texture_coordinates.setter
    def texture_coordinates(self, texture_coordinates):
        """Sets the texture_coordinates of this PartStudiosGetFacesResponse200Facets.

        Texture     coordinates of a facet (Only output if query param \"outputTextureCoordinates\" is true)  # noqa: E501

        :param texture_coordinates: The texture_coordinates of this PartStudiosGetFacesResponse200Facets.  # noqa: E501
        :type: list[float]
        """

        self._texture_coordinates = texture_coordinates

    @property
    def normal(self):
        """Gets the normal of this PartStudiosGetFacesResponse200Facets.  # noqa: E501

        Unit normal vector     for the facet  # noqa: E501

        :return: The normal of this PartStudiosGetFacesResponse200Facets.  # noqa: E501
        :rtype: list[float]
        """
        return self._normal

    @normal.setter
    def normal(self, normal):
        """Sets the normal of this PartStudiosGetFacesResponse200Facets.

        Unit normal vector     for the facet  # noqa: E501

        :param normal: The normal of this PartStudiosGetFacesResponse200Facets.  # noqa: E501
        :type: list[float]
        """

        self._normal = normal

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartStudiosGetFacesResponse200Facets):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
