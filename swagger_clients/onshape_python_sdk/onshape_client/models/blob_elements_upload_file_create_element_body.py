# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class BlobElementsUploadFileCreateElementBody(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'create_drawing_if_possible': 'bool',
        'location_element_id': 'str',
        'import_in_background': 'bool',
        'location_position': 'float',
        'file_content_length': 'float',
        'encoded_filename': 'str',
        'flatten_assemblies': 'bool',
        'y_axis_is_up': 'bool',
        'translate': 'bool',
        'allow_faulty_parts': 'bool',
        'location_group_id': 'str'
    }

    attribute_map = {
        'create_drawing_if_possible': 'createDrawingIfPossible',
        'location_element_id': 'locationElementId',
        'import_in_background': 'importInBackground',
        'location_position': 'locationPosition',
        'file_content_length': 'fileContentLength',
        'encoded_filename': 'encodedFilename',
        'flatten_assemblies': 'flattenAssemblies',
        'y_axis_is_up': 'yAxisIsUp',
        'translate': 'translate',
        'allow_faulty_parts': 'allowFaultyParts',
        'location_group_id': 'locationGroupId'
    }

    def __init__(self, create_drawing_if_possible=None, location_element_id=None, import_in_background=None, location_position=None, file_content_length=None, encoded_filename=None, flatten_assemblies=None, y_axis_is_up=None, translate=None, allow_faulty_parts=None, location_group_id=None):  # noqa: E501
        """BlobElementsUploadFileCreateElementBody - a model defined in Swagger"""  # noqa: E501

        self._create_drawing_if_possible = None
        self._location_element_id = None
        self._import_in_background = None
        self._location_position = None
        self._file_content_length = None
        self._encoded_filename = None
        self._flatten_assemblies = None
        self._y_axis_is_up = None
        self._translate = None
        self._allow_faulty_parts = None
        self._location_group_id = None
        self.discriminator = None

        if create_drawing_if_possible is not None:
            self.create_drawing_if_possible = create_drawing_if_possible
        if location_element_id is not None:
            self.location_element_id = location_element_id
        if import_in_background is not None:
            self.import_in_background = import_in_background
        if location_position is not None:
            self.location_position = location_position
        if file_content_length is not None:
            self.file_content_length = file_content_length
        if encoded_filename is not None:
            self.encoded_filename = encoded_filename
        if flatten_assemblies is not None:
            self.flatten_assemblies = flatten_assemblies
        if y_axis_is_up is not None:
            self.y_axis_is_up = y_axis_is_up
        if translate is not None:
            self.translate = translate
        if allow_faulty_parts is not None:
            self.allow_faulty_parts = allow_faulty_parts
        if location_group_id is not None:
            self.location_group_id = location_group_id

    @property
    def create_drawing_if_possible(self):
        """Gets the create_drawing_if_possible of this BlobElementsUploadFileCreateElementBody.  # noqa: E501

        If true and the uploaded file is a DXF or a DWG,           automatically create a Drawing element along with the Blob element. Otherwise, just create the Blob           element.  # noqa: E501

        :return: The create_drawing_if_possible of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :rtype: bool
        """
        return self._create_drawing_if_possible

    @create_drawing_if_possible.setter
    def create_drawing_if_possible(self, create_drawing_if_possible):
        """Sets the create_drawing_if_possible of this BlobElementsUploadFileCreateElementBody.

        If true and the uploaded file is a DXF or a DWG,           automatically create a Drawing element along with the Blob element. Otherwise, just create the Blob           element.  # noqa: E501

        :param create_drawing_if_possible: The create_drawing_if_possible of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :type: bool
        """

        self._create_drawing_if_possible = create_drawing_if_possible

    @property
    def location_element_id(self):
        """Gets the location_element_id of this BlobElementsUploadFileCreateElementBody.  # noqa: E501

        Id of an element to place the new element near.  # noqa: E501

        :return: The location_element_id of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :rtype: str
        """
        return self._location_element_id

    @location_element_id.setter
    def location_element_id(self, location_element_id):
        """Sets the location_element_id of this BlobElementsUploadFileCreateElementBody.

        Id of an element to place the new element near.  # noqa: E501

        :param location_element_id: The location_element_id of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :type: str
        """

        self._location_element_id = location_element_id

    @property
    def import_in_background(self):
        """Gets the import_in_background of this BlobElementsUploadFileCreateElementBody.  # noqa: E501

        If storeInDocument is true and formatName is ONSHAPE and        the source is a Parasolid file, this specifies the preference as to whether the import should be completed        prior to the completion of the request (importInBackground=false) or whether it should be performed        asynchronously (importInBackground=true). Historically, this parameter was implicitly set to false, but large        imports can take long enough that the request could result in a timeout. Applications are encouraged to set        this parameter to true for reliable operation.  # noqa: E501

        :return: The import_in_background of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :rtype: bool
        """
        return self._import_in_background

    @import_in_background.setter
    def import_in_background(self, import_in_background):
        """Sets the import_in_background of this BlobElementsUploadFileCreateElementBody.

        If storeInDocument is true and formatName is ONSHAPE and        the source is a Parasolid file, this specifies the preference as to whether the import should be completed        prior to the completion of the request (importInBackground=false) or whether it should be performed        asynchronously (importInBackground=true). Historically, this parameter was implicitly set to false, but large        imports can take long enough that the request could result in a timeout. Applications are encouraged to set        this parameter to true for reliable operation.  # noqa: E501

        :param import_in_background: The import_in_background of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :type: bool
        """

        self._import_in_background = import_in_background

    @property
    def location_position(self):
        """Gets the location_position of this BlobElementsUploadFileCreateElementBody.  # noqa: E501

        An indicator for the relative placement of the new element.    If locationElementId is specified, a negative number indicates insertion prior to the element and a non-negative    number indicates insertion following the element. If no elementId is specified, a negative value indicates    insertion at the end of the group or element list and a non-negative number indicates insertion at the start    of the group or elmenet list.  # noqa: E501

        :return: The location_position of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :rtype: float
        """
        return self._location_position

    @location_position.setter
    def location_position(self, location_position):
        """Sets the location_position of this BlobElementsUploadFileCreateElementBody.

        An indicator for the relative placement of the new element.    If locationElementId is specified, a negative number indicates insertion prior to the element and a non-negative    number indicates insertion following the element. If no elementId is specified, a negative value indicates    insertion at the end of the group or element list and a non-negative number indicates insertion at the start    of the group or elmenet list.  # noqa: E501

        :param location_position: The location_position of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :type: float
        """

        self._location_position = location_position

    @property
    def file_content_length(self):
        """Gets the file_content_length of this BlobElementsUploadFileCreateElementBody.  # noqa: E501

        The length of the file being uploaded, in bytes. If not present,    Onshape may restrict the upload size under some operating conditions, as the file contents may need to be    buffered in memory. If specified, it should be the actual length of the data being uploaded.  # noqa: E501

        :return: The file_content_length of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :rtype: float
        """
        return self._file_content_length

    @file_content_length.setter
    def file_content_length(self, file_content_length):
        """Sets the file_content_length of this BlobElementsUploadFileCreateElementBody.

        The length of the file being uploaded, in bytes. If not present,    Onshape may restrict the upload size under some operating conditions, as the file contents may need to be    buffered in memory. If specified, it should be the actual length of the data being uploaded.  # noqa: E501

        :param file_content_length: The file_content_length of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :type: float
        """

        self._file_content_length = file_content_length

    @property
    def encoded_filename(self):
        """Gets the encoded_filename of this BlobElementsUploadFileCreateElementBody.  # noqa: E501

        Filename override interpreted as a URL-encoded string. If specified,    this overrides the filename from a Content-Disposition in the file field.  # noqa: E501

        :return: The encoded_filename of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :rtype: str
        """
        return self._encoded_filename

    @encoded_filename.setter
    def encoded_filename(self, encoded_filename):
        """Sets the encoded_filename of this BlobElementsUploadFileCreateElementBody.

        Filename override interpreted as a URL-encoded string. If specified,    this overrides the filename from a Content-Disposition in the file field.  # noqa: E501

        :param encoded_filename: The encoded_filename of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :type: str
        """

        self._encoded_filename = encoded_filename

    @property
    def flatten_assemblies(self):
        """Gets the flatten_assemblies of this BlobElementsUploadFileCreateElementBody.  # noqa: E501

        If true, remove assembly structure and create only a        Part Studio  # noqa: E501

        :return: The flatten_assemblies of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :rtype: bool
        """
        return self._flatten_assemblies

    @flatten_assemblies.setter
    def flatten_assemblies(self, flatten_assemblies):
        """Sets the flatten_assemblies of this BlobElementsUploadFileCreateElementBody.

        If true, remove assembly structure and create only a        Part Studio  # noqa: E501

        :param flatten_assemblies: The flatten_assemblies of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :type: bool
        """

        self._flatten_assemblies = flatten_assemblies

    @property
    def y_axis_is_up(self):
        """Gets the y_axis_is_up of this BlobElementsUploadFileCreateElementBody.  # noqa: E501

        If true, treat the model's Y axis as the vertical axis.  Otherwise,        Z is treated as the vertical axis.  # noqa: E501

        :return: The y_axis_is_up of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :rtype: bool
        """
        return self._y_axis_is_up

    @y_axis_is_up.setter
    def y_axis_is_up(self, y_axis_is_up):
        """Sets the y_axis_is_up of this BlobElementsUploadFileCreateElementBody.

        If true, treat the model's Y axis as the vertical axis.  Otherwise,        Z is treated as the vertical axis.  # noqa: E501

        :param y_axis_is_up: The y_axis_is_up of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :type: bool
        """

        self._y_axis_is_up = y_axis_is_up

    @property
    def translate(self):
        """Gets the translate of this BlobElementsUploadFileCreateElementBody.  # noqa: E501

        Whether the uploaded file should be translated to Onshape format,    if possible  # noqa: E501

        :return: The translate of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :rtype: bool
        """
        return self._translate

    @translate.setter
    def translate(self, translate):
        """Sets the translate of this BlobElementsUploadFileCreateElementBody.

        Whether the uploaded file should be translated to Onshape format,    if possible  # noqa: E501

        :param translate: The translate of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :type: bool
        """

        self._translate = translate

    @property
    def allow_faulty_parts(self):
        """Gets the allow_faulty_parts of this BlobElementsUploadFileCreateElementBody.  # noqa: E501

        If not specified or if specified as false, bodies to be imported        are examined for validity and any found to be faulty are removed from the import. If all bodies are found to        be faulty, the import fails. If the value is specified as true, we attempt to import the bodies that appear to        have faults.  # noqa: E501

        :return: The allow_faulty_parts of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :rtype: bool
        """
        return self._allow_faulty_parts

    @allow_faulty_parts.setter
    def allow_faulty_parts(self, allow_faulty_parts):
        """Sets the allow_faulty_parts of this BlobElementsUploadFileCreateElementBody.

        If not specified or if specified as false, bodies to be imported        are examined for validity and any found to be faulty are removed from the import. If all bodies are found to        be faulty, the import fails. If the value is specified as true, we attempt to import the bodies that appear to        have faults.  # noqa: E501

        :param allow_faulty_parts: The allow_faulty_parts of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :type: bool
        """

        self._allow_faulty_parts = allow_faulty_parts

    @property
    def location_group_id(self):
        """Gets the location_group_id of this BlobElementsUploadFileCreateElementBody.  # noqa: E501

        For internal use.  # noqa: E501

        :return: The location_group_id of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :rtype: str
        """
        return self._location_group_id

    @location_group_id.setter
    def location_group_id(self, location_group_id):
        """Sets the location_group_id of this BlobElementsUploadFileCreateElementBody.

        For internal use.  # noqa: E501

        :param location_group_id: The location_group_id of this BlobElementsUploadFileCreateElementBody.  # noqa: E501
        :type: str
        """

        self._location_group_id = location_group_id

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, BlobElementsUploadFileCreateElementBody):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
