# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MetadataGetMetadataSchemaByIDResponse200(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'owner_id': 'str',
        'href': 'str',
        'owner_type': 'float',
        'id': 'str',
        'object_type': 'float'
    }

    attribute_map = {
        'owner_id': 'ownerId',
        'href': 'href',
        'owner_type': 'ownerType',
        'id': 'id',
        'object_type': 'objectType'
    }

    def __init__(self, owner_id=None, href=None, owner_type=None, id=None, object_type=None):  # noqa: E501
        """MetadataGetMetadataSchemaByIDResponse200 - a model defined in Swagger"""  # noqa: E501

        self._owner_id = None
        self._href = None
        self._owner_type = None
        self._id = None
        self._object_type = None
        self.discriminator = None

        if owner_id is not None:
            self.owner_id = owner_id
        if href is not None:
            self.href = href
        if owner_type is not None:
            self.owner_type = owner_type
        if id is not None:
            self.id = id
        if object_type is not None:
            self.object_type = object_type

    @property
    def owner_id(self):
        """Gets the owner_id of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501

        Schema owner ID  # noqa: E501

        :return: The owner_id of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501
        :rtype: str
        """
        return self._owner_id

    @owner_id.setter
    def owner_id(self, owner_id):
        """Sets the owner_id of this MetadataGetMetadataSchemaByIDResponse200.

        Schema owner ID  # noqa: E501

        :param owner_id: The owner_id of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501
        :type: str
        """

        self._owner_id = owner_id

    @property
    def href(self):
        """Gets the href of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501

        URL to the schema  # noqa: E501

        :return: The href of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this MetadataGetMetadataSchemaByIDResponse200.

        URL to the schema  # noqa: E501

        :param href: The href of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def owner_type(self):
        """Gets the owner_type of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501

        Schema owner type, which can be: 0: user, 1: company  # noqa: E501

        :return: The owner_type of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501
        :rtype: float
        """
        return self._owner_type

    @owner_type.setter
    def owner_type(self, owner_type):
        """Sets the owner_type of this MetadataGetMetadataSchemaByIDResponse200.

        Schema owner type, which can be: 0: user, 1: company  # noqa: E501

        :param owner_type: The owner_type of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501
        :type: float
        """

        self._owner_type = owner_type

    @property
    def id(self):
        """Gets the id of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501

        Metadata schema ID  # noqa: E501

        :return: The id of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this MetadataGetMetadataSchemaByIDResponse200.

        Metadata schema ID  # noqa: E501

        :param id: The id of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def object_type(self):
        """Gets the object_type of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501

        Object type of the property, which can be: 0:GLOBAL, 1:DOCUMENT,             2:PART, 3:ASSEMBLY, 4:DRAWING, 5:PART_STUDIO, 6: BLOB_ELEMENT, 7:APP_ELEMENT, 8:VERSION, 9:WORKSPACE  # noqa: E501

        :return: The object_type of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501
        :rtype: float
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this MetadataGetMetadataSchemaByIDResponse200.

        Object type of the property, which can be: 0:GLOBAL, 1:DOCUMENT,             2:PART, 3:ASSEMBLY, 4:DRAWING, 5:PART_STUDIO, 6: BLOB_ELEMENT, 7:APP_ELEMENT, 8:VERSION, 9:WORKSPACE  # noqa: E501

        :param object_type: The object_type of this MetadataGetMetadataSchemaByIDResponse200.  # noqa: E501
        :type: float
        """

        self._object_type = object_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataGetMetadataSchemaByIDResponse200):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
