# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class RevisionsGetRevisionHistoryInCompanyResponse200Items(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'element_type': 'float',
        'view_ref': 'str',
        'part_id': 'str',
        'document_name': 'str',
        'error_message': 'str',
        'previous_revision_id': 'str',
        'next_revision_id': 'str',
        'release_id': 'str',
        'version_id': 'str',
        'element_id': 'str',
        'version_name': 'str',
        'is_obsolete': 'bool',
        'part_number': 'str',
        'configuration': 'str',
        'id': 'str',
        'document_id': 'str',
        'revision': 'str'
    }

    attribute_map = {
        'element_type': 'elementType',
        'view_ref': 'viewRef',
        'part_id': 'partId',
        'document_name': 'documentName',
        'error_message': 'errorMessage',
        'previous_revision_id': 'previousRevisionId',
        'next_revision_id': 'nextRevisionId',
        'release_id': 'releaseId',
        'version_id': 'versionId',
        'element_id': 'elementId',
        'version_name': 'versionName',
        'is_obsolete': 'isObsolete',
        'part_number': 'partNumber',
        'configuration': 'configuration',
        'id': 'id',
        'document_id': 'documentId',
        'revision': 'revision'
    }

    def __init__(self, element_type=None, view_ref=None, part_id=None, document_name=None, error_message=None, previous_revision_id=None, next_revision_id=None, release_id=None, version_id=None, element_id=None, version_name=None, is_obsolete=None, part_number=None, configuration=None, id=None, document_id=None, revision=None):  # noqa: E501
        """RevisionsGetRevisionHistoryInCompanyResponse200Items - a model defined in Swagger"""  # noqa: E501

        self._element_type = None
        self._view_ref = None
        self._part_id = None
        self._document_name = None
        self._error_message = None
        self._previous_revision_id = None
        self._next_revision_id = None
        self._release_id = None
        self._version_id = None
        self._element_id = None
        self._version_name = None
        self._is_obsolete = None
        self._part_number = None
        self._configuration = None
        self._id = None
        self._document_id = None
        self._revision = None
        self.discriminator = None

        if element_type is not None:
            self.element_type = element_type
        if view_ref is not None:
            self.view_ref = view_ref
        if part_id is not None:
            self.part_id = part_id
        if document_name is not None:
            self.document_name = document_name
        if error_message is not None:
            self.error_message = error_message
        if previous_revision_id is not None:
            self.previous_revision_id = previous_revision_id
        if next_revision_id is not None:
            self.next_revision_id = next_revision_id
        if release_id is not None:
            self.release_id = release_id
        if version_id is not None:
            self.version_id = version_id
        if element_id is not None:
            self.element_id = element_id
        if version_name is not None:
            self.version_name = version_name
        if is_obsolete is not None:
            self.is_obsolete = is_obsolete
        if part_number is not None:
            self.part_number = part_number
        if configuration is not None:
            self.configuration = configuration
        if id is not None:
            self.id = id
        if document_id is not None:
            self.document_id = document_id
        if revision is not None:
            self.revision = revision

    @property
    def element_type(self):
        """Gets the element_type of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Type of element  # noqa: E501

        :return: The element_type of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: float
        """
        return self._element_type

    @element_type.setter
    def element_type(self, element_type):
        """Sets the element_type of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Type of element  # noqa: E501

        :param element_type: The element_type of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: float
        """

        self._element_type = element_type

    @property
    def view_ref(self):
        """Gets the view_ref of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        An URI to view the revision  # noqa: E501

        :return: The view_ref of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._view_ref

    @view_ref.setter
    def view_ref(self, view_ref):
        """Sets the view_ref of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        An URI to view the revision  # noqa: E501

        :param view_ref: The view_ref of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._view_ref = view_ref

    @property
    def part_id(self):
        """Gets the part_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Deterministic part ID if revision is of a part  # noqa: E501

        :return: The part_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Deterministic part ID if revision is of a part  # noqa: E501

        :param part_id: The part_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._part_id = part_id

    @property
    def document_name(self):
        """Gets the document_name of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Name of the document that contains the revision  # noqa: E501

        :return: The document_name of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._document_name

    @document_name.setter
    def document_name(self, document_name):
        """Sets the document_name of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Name of the document that contains the revision  # noqa: E501

        :param document_name: The document_name of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._document_name = document_name

    @property
    def error_message(self):
        """Gets the error_message of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Any error message if not revision is not accessible  # noqa: E501

        :return: The error_message of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._error_message

    @error_message.setter
    def error_message(self, error_message):
        """Sets the error_message of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Any error message if not revision is not accessible  # noqa: E501

        :param error_message: The error_message of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._error_message = error_message

    @property
    def previous_revision_id(self):
        """Gets the previous_revision_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Revision Id of the previous revision if any  # noqa: E501

        :return: The previous_revision_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._previous_revision_id

    @previous_revision_id.setter
    def previous_revision_id(self, previous_revision_id):
        """Sets the previous_revision_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Revision Id of the previous revision if any  # noqa: E501

        :param previous_revision_id: The previous_revision_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._previous_revision_id = previous_revision_id

    @property
    def next_revision_id(self):
        """Gets the next_revision_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Revision Id of the next revision if any  # noqa: E501

        :return: The next_revision_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._next_revision_id

    @next_revision_id.setter
    def next_revision_id(self, next_revision_id):
        """Sets the next_revision_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Revision Id of the next revision if any  # noqa: E501

        :param next_revision_id: The next_revision_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._next_revision_id = next_revision_id

    @property
    def release_id(self):
        """Gets the release_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Release package ID that created this revision  # noqa: E501

        :return: The release_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._release_id

    @release_id.setter
    def release_id(self, release_id):
        """Sets the release_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Release package ID that created this revision  # noqa: E501

        :param release_id: The release_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._release_id = release_id

    @property
    def version_id(self):
        """Gets the version_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Version ID that contains the revision  # noqa: E501

        :return: The version_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._version_id

    @version_id.setter
    def version_id(self, version_id):
        """Sets the version_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Version ID that contains the revision  # noqa: E501

        :param version_id: The version_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._version_id = version_id

    @property
    def element_id(self):
        """Gets the element_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Element ID that contains the revision  # noqa: E501

        :return: The element_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Element ID that contains the revision  # noqa: E501

        :param element_id: The element_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._element_id = element_id

    @property
    def version_name(self):
        """Gets the version_name of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Name of the Version that contains the revision  # noqa: E501

        :return: The version_name of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._version_name

    @version_name.setter
    def version_name(self, version_name):
        """Sets the version_name of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Name of the Version that contains the revision  # noqa: E501

        :param version_name: The version_name of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._version_name = version_name

    @property
    def is_obsolete(self):
        """Gets the is_obsolete of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Whether the revision is obsolete  # noqa: E501

        :return: The is_obsolete of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: bool
        """
        return self._is_obsolete

    @is_obsolete.setter
    def is_obsolete(self, is_obsolete):
        """Sets the is_obsolete of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Whether the revision is obsolete  # noqa: E501

        :param is_obsolete: The is_obsolete of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: bool
        """

        self._is_obsolete = is_obsolete

    @property
    def part_number(self):
        """Gets the part_number of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Part number of the revision  # noqa: E501

        :return: The part_number of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._part_number

    @part_number.setter
    def part_number(self, part_number):
        """Sets the part_number of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Part number of the revision  # noqa: E501

        :param part_number: The part_number of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._part_number = part_number

    @property
    def configuration(self):
        """Gets the configuration of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Configuration of the Part studio or Assembly element  # noqa: E501

        :return: The configuration of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._configuration

    @configuration.setter
    def configuration(self, configuration):
        """Sets the configuration of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Configuration of the Part studio or Assembly element  # noqa: E501

        :param configuration: The configuration of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._configuration = configuration

    @property
    def id(self):
        """Gets the id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Revision Id  # noqa: E501

        :return: The id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Revision Id  # noqa: E501

        :param id: The id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._id = id

    @property
    def document_id(self):
        """Gets the document_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        Document ID that contains the revision  # noqa: E501

        :return: The document_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        Document ID that contains the revision  # noqa: E501

        :param document_id: The document_id of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._document_id = document_id

    @property
    def revision(self):
        """Gets the revision of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501

        revision name of the revision  # noqa: E501

        :return: The revision of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :rtype: str
        """
        return self._revision

    @revision.setter
    def revision(self, revision):
        """Sets the revision of this RevisionsGetRevisionHistoryInCompanyResponse200Items.

        revision name of the revision  # noqa: E501

        :param revision: The revision of this RevisionsGetRevisionHistoryInCompanyResponse200Items.  # noqa: E501
        :type: str
        """

        self._revision = revision

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, RevisionsGetRevisionHistoryInCompanyResponse200Items):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
