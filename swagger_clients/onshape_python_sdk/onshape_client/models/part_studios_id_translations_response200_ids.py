# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PartStudiosIdTranslationsResponse200Ids(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'status': 'object',
        'source': 'str',
        'target': 'list[str]'
    }

    attribute_map = {
        'status': 'status',
        'source': 'source',
        'target': 'target'
    }

    def __init__(self, status=None, source=None, target=None):  # noqa: E501
        """PartStudiosIdTranslationsResponse200Ids - a model defined in Swagger"""  # noqa: E501

        self._status = None
        self._source = None
        self._target = None
        self.discriminator = None

        if status is not None:
            self.status = status
        if source is not None:
            self.source = source
        if target is not None:
            self.target = target

    @property
    def status(self):
        """Gets the status of this PartStudiosIdTranslationsResponse200Ids.  # noqa: E501

        Translation status (OK|SPLIT|FAILED_TO_RESOLVE|TRANSLATION_ERROR)  # noqa: E501

        :return: The status of this PartStudiosIdTranslationsResponse200Ids.  # noqa: E501
        :rtype: object
        """
        return self._status

    @status.setter
    def status(self, status):
        """Sets the status of this PartStudiosIdTranslationsResponse200Ids.

        Translation status (OK|SPLIT|FAILED_TO_RESOLVE|TRANSLATION_ERROR)  # noqa: E501

        :param status: The status of this PartStudiosIdTranslationsResponse200Ids.  # noqa: E501
        :type: object
        """

        self._status = status

    @property
    def source(self):
        """Gets the source of this PartStudiosIdTranslationsResponse200Ids.  # noqa: E501

        The id in source microversion  # noqa: E501

        :return: The source of this PartStudiosIdTranslationsResponse200Ids.  # noqa: E501
        :rtype: str
        """
        return self._source

    @source.setter
    def source(self, source):
        """Sets the source of this PartStudiosIdTranslationsResponse200Ids.

        The id in source microversion  # noqa: E501

        :param source: The source of this PartStudiosIdTranslationsResponse200Ids.  # noqa: E501
        :type: str
        """

        self._source = source

    @property
    def target(self):
        """Gets the target of this PartStudiosIdTranslationsResponse200Ids.  # noqa: E501

        [] Set of ids which corresponds to the source id. Can have 0, 1, or             more id-s.  # noqa: E501

        :return: The target of this PartStudiosIdTranslationsResponse200Ids.  # noqa: E501
        :rtype: list[str]
        """
        return self._target

    @target.setter
    def target(self, target):
        """Sets the target of this PartStudiosIdTranslationsResponse200Ids.

        [] Set of ids which corresponds to the source id. Can have 0, 1, or             more id-s.  # noqa: E501

        :param target: The target of this PartStudiosIdTranslationsResponse200Ids.  # noqa: E501
        :type: list[str]
        """

        self._target = target

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartStudiosIdTranslationsResponse200Ids):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
