# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class MetadataGetMetadataResponse200ElementsParts(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'part_id': 'str',
        'part_type': 'str',
        'properties': 'list[object]',
        'href': 'str',
        'is_mesh': 'bool',
        'thumbnail': 'object'
    }

    attribute_map = {
        'part_id': 'partId',
        'part_type': 'partType',
        'properties': 'properties',
        'href': 'href',
        'is_mesh': 'isMesh',
        'thumbnail': 'thumbnail'
    }

    def __init__(self, part_id=None, part_type=None, properties=None, href=None, is_mesh=None, thumbnail=None):  # noqa: E501
        """MetadataGetMetadataResponse200ElementsParts - a model defined in Swagger"""  # noqa: E501

        self._part_id = None
        self._part_type = None
        self._properties = None
        self._href = None
        self._is_mesh = None
        self._thumbnail = None
        self.discriminator = None

        if part_id is not None:
            self.part_id = part_id
        if part_type is not None:
            self.part_type = part_type
        if properties is not None:
            self.properties = properties
        if href is not None:
            self.href = href
        if is_mesh is not None:
            self.is_mesh = is_mesh
        if thumbnail is not None:
            self.thumbnail = thumbnail

    @property
    def part_id(self):
        """Gets the part_id of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501

        Part id  # noqa: E501

        :return: The part_id of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501
        :rtype: str
        """
        return self._part_id

    @part_id.setter
    def part_id(self, part_id):
        """Sets the part_id of this MetadataGetMetadataResponse200ElementsParts.

        Part id  # noqa: E501

        :param part_id: The part_id of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501
        :type: str
        """

        self._part_id = part_id

    @property
    def part_type(self):
        """Gets the part_type of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501

        Part type  # noqa: E501

        :return: The part_type of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501
        :rtype: str
        """
        return self._part_type

    @part_type.setter
    def part_type(self, part_type):
        """Sets the part_type of this MetadataGetMetadataResponse200ElementsParts.

        Part type  # noqa: E501

        :param part_type: The part_type of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501
        :type: str
        """

        self._part_type = part_type

    @property
    def properties(self):
        """Gets the properties of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501

        Part properties  # noqa: E501

        :return: The properties of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501
        :rtype: list[object]
        """
        return self._properties

    @properties.setter
    def properties(self, properties):
        """Sets the properties of this MetadataGetMetadataResponse200ElementsParts.

        Part properties  # noqa: E501

        :param properties: The properties of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501
        :type: list[object]
        """

        self._properties = properties

    @property
    def href(self):
        """Gets the href of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501

        URI of Part metadata  # noqa: E501

        :return: The href of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this MetadataGetMetadataResponse200ElementsParts.

        URI of Part metadata  # noqa: E501

        :param href: The href of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501
        :type: str
        """

        self._href = href

    @property
    def is_mesh(self):
        """Gets the is_mesh of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501

        True if part is a mesh  # noqa: E501

        :return: The is_mesh of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501
        :rtype: bool
        """
        return self._is_mesh

    @is_mesh.setter
    def is_mesh(self, is_mesh):
        """Sets the is_mesh of this MetadataGetMetadataResponse200ElementsParts.

        True if part is a mesh  # noqa: E501

        :param is_mesh: The is_mesh of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501
        :type: bool
        """

        self._is_mesh = is_mesh

    @property
    def thumbnail(self):
        """Gets the thumbnail of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501

        Part's thumbnail  # noqa: E501

        :return: The thumbnail of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501
        :rtype: object
        """
        return self._thumbnail

    @thumbnail.setter
    def thumbnail(self, thumbnail):
        """Sets the thumbnail of this MetadataGetMetadataResponse200ElementsParts.

        Part's thumbnail  # noqa: E501

        :param thumbnail: The thumbnail of this MetadataGetMetadataResponse200ElementsParts.  # noqa: E501
        :type: object
        """

        self._thumbnail = thumbnail

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, MetadataGetMetadataResponse200ElementsParts):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
