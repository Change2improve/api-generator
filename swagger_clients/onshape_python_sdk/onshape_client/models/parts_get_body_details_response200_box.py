# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class PartsGetBodyDetailsResponse200Box(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'min_corner': 'list[float]',
        'max_corner': 'list[float]'
    }

    attribute_map = {
        'min_corner': 'minCorner',
        'max_corner': 'maxCorner'
    }

    def __init__(self, min_corner=None, max_corner=None):  # noqa: E501
        """PartsGetBodyDetailsResponse200Box - a model defined in Swagger"""  # noqa: E501

        self._min_corner = None
        self._max_corner = None
        self.discriminator = None

        if min_corner is not None:
            self.min_corner = min_corner
        if max_corner is not None:
            self.max_corner = max_corner

    @property
    def min_corner(self):
        """Gets the min_corner of this PartsGetBodyDetailsResponse200Box.  # noqa: E501

        Min corner of bounding box  # noqa: E501

        :return: The min_corner of this PartsGetBodyDetailsResponse200Box.  # noqa: E501
        :rtype: list[float]
        """
        return self._min_corner

    @min_corner.setter
    def min_corner(self, min_corner):
        """Sets the min_corner of this PartsGetBodyDetailsResponse200Box.

        Min corner of bounding box  # noqa: E501

        :param min_corner: The min_corner of this PartsGetBodyDetailsResponse200Box.  # noqa: E501
        :type: list[float]
        """

        self._min_corner = min_corner

    @property
    def max_corner(self):
        """Gets the max_corner of this PartsGetBodyDetailsResponse200Box.  # noqa: E501

        Max corner of bounding box  # noqa: E501

        :return: The max_corner of this PartsGetBodyDetailsResponse200Box.  # noqa: E501
        :rtype: list[float]
        """
        return self._max_corner

    @max_corner.setter
    def max_corner(self, max_corner):
        """Sets the max_corner of this PartsGetBodyDetailsResponse200Box.

        Max corner of bounding box  # noqa: E501

        :param max_corner: The max_corner of this PartsGetBodyDetailsResponse200Box.  # noqa: E501
        :type: list[float]
        """

        self._max_corner = max_corner

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, PartsGetBodyDetailsResponse200Box):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
