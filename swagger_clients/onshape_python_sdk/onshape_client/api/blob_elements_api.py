# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from onshape_client.api_client import ApiClient


class BlobElementsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_translation(self, wv_char, did, wv, eid, **kwargs):  # noqa: E501
        """Create Translation  # noqa: E501

        Create an element translation.  The translation may be incomplete at the time that the call        completes.  If the requestState is ACTIVE, the translation can be polled until the state becomes either        DONE or FAILED.  Alternatively, a webhook callback can be registered for notification of translation        completion. (Requires Write scope if storeInDocument is true)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_translation(wv_char, did, wv, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wv_char: One of w or v corresponding to whether a workspace or version was entered. (required)
        :param str did: Document ID (required)
        :param str wv: Workspace (w) or Version (v) ID (required)
        :param str eid: Element ID (required)
        :param BlobElementsCreateTranslationBody body: The JSON request body.
        :return: BlobElementsCreateTranslationResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_translation_with_http_info(wv_char, did, wv, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_translation_with_http_info(wv_char, did, wv, eid, **kwargs)  # noqa: E501
            return data

    def create_translation_with_http_info(self, wv_char, did, wv, eid, **kwargs):  # noqa: E501
        """Create Translation  # noqa: E501

        Create an element translation.  The translation may be incomplete at the time that the call        completes.  If the requestState is ACTIVE, the translation can be polled until the state becomes either        DONE or FAILED.  Alternatively, a webhook callback can be registered for notification of translation        completion. (Requires Write scope if storeInDocument is true)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_translation_with_http_info(wv_char, did, wv, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wv_char: One of w or v corresponding to whether a workspace or version was entered. (required)
        :param str did: Document ID (required)
        :param str wv: Workspace (w) or Version (v) ID (required)
        :param str eid: Element ID (required)
        :param BlobElementsCreateTranslationBody body: The JSON request body.
        :return: BlobElementsCreateTranslationResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wv_char', 'did', 'wv', 'eid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_translation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wv_char' is set
        if ('wv_char' not in params or
                params['wv_char'] is None):
            raise ValueError("Missing the required parameter `wv_char` when calling `create_translation`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `create_translation`")  # noqa: E501
        # verify the required parameter 'wv' is set
        if ('wv' not in params or
                params['wv'] is None):
            raise ValueError("Missing the required parameter `wv` when calling `create_translation`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `create_translation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wv_char' in params:
            path_params['wv_char'] = params['wv_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wv' in params:
            path_params['wv'] = params['wv']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/blobelements/d/{did}/{wv_char}/{wv}/e/{eid}/translations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlobElementsCreateTranslationResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def download_file_from_element(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Download File From Blob Element  # noqa: E501

        Download a file from a blob element  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_file_from_element(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str content_disposition: If \"attachment\", includes a Content-Disposition return header with the filename
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.download_file_from_element_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.download_file_from_element_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def download_file_from_element_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Download File From Blob Element  # noqa: E501

        Download a file from a blob element  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.download_file_from_element_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str content_disposition: If \"attachment\", includes a Content-Disposition return header with the filename
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'content_disposition', 'link_document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method download_file_from_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `download_file_from_element`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `download_file_from_element`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `download_file_from_element`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `download_file_from_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'content_disposition' in params:
            query_params.append(('contentDisposition', params['content_disposition']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/blobelements/d/{did}/{wvm_char}/{wvm}/e/{eid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_translation_formats(self, did, wid, eid, **kwargs):  # noqa: E501
        """Get Translation Formats  # noqa: E501

        Returns a list of the available formats to which this Blob element can be translated. If the                 contained data does not have a recognized input translation format it will not be translatable to                 any other format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_translation_formats(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :return: BlobElementsGetTranslationFormatsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_translation_formats_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_translation_formats_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
            return data

    def get_translation_formats_with_http_info(self, did, wid, eid, **kwargs):  # noqa: E501
        """Get Translation Formats  # noqa: E501

        Returns a list of the available formats to which this Blob element can be translated. If the                 contained data does not have a recognized input translation format it will not be translatable to                 any other format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_translation_formats_with_http_info(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :return: BlobElementsGetTranslationFormatsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'wid', 'eid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_translation_formats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_translation_formats`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `get_translation_formats`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_translation_formats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/blobelements/d/{did}/w/{wid}/e/{eid}/translationformats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlobElementsGetTranslationFormatsResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_file_create_element(self, file, translate, flatten_assemblies, y_axis_is_up, did, wid, **kwargs):  # noqa: E501
        """Upload File to New Blob Element  # noqa: E501

        Create a blob element from an uploaded file. The request body must have a Content-Type of                 multipart/form-data. Request Body parameters are multipart fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_file_create_element(file, translate, flatten_assemblies, y_axis_is_up, did, wid, async=True)
        >>> result = thread.get()

        :param async bool
        :param file file: File data to upload. This field should normally have a Content-Disposition header    field with a \"filename\" attribute, naming the uploaded file. (required)
        :param bool translate: Whether the uploaded file should be translated to Onshape format,    if possible (required)
        :param bool flatten_assemblies: If true, remove assembly structure and create only a        Part Studio (required)
        :param bool y_axis_is_up: If true, treat the model's Y axis as the vertical axis.  Otherwise,        Z is treated as the vertical axis. (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param bool create_drawing_if_possible: If true and the uploaded file is a DXF or a DWG,           automatically create a Drawing element along with the Blob element. Otherwise, just create the Blob           element.
        :param str encoded_filename: Filename override interpreted as a URL-encoded string. If specified,    this overrides the filename from a Content-Disposition in the file field.
        :param float file_content_length: The length of the file being uploaded, in bytes. If not present,    Onshape may restrict the upload size under some operating conditions, as the file contents may need to be    buffered in memory. If specified, it should be the actual length of the data being uploaded.
        :param bool import_in_background: If storeInDocument is true and formatName is ONSHAPE and        the source is a Parasolid file, this specifies the preference as to whether the import should be completed        prior to the completion of the request (importInBackground=false) or whether it should be performed        asynchronously (importInBackground=true). Historically, this parameter was implicitly set to false, but large        imports can take long enough that the request could result in a timeout. Applications are encouraged to set        this parameter to true for reliable operation.
        :param bool allow_faulty_parts: If not specified or if specified as false, bodies to be imported        are examined for validity and any found to be faulty are removed from the import. If all bodies are found to        be faulty, the import fails. If the value is specified as true, we attempt to import the bodies that appear to        have faults.
        :param str location_group_id: For internal use.
        :param str location_element_id: Id of an element to place the new element near.
        :param float location_position: An indicator for the relative placement of the new element.    If locationElementId is specified, a negative number indicates insertion prior to the element and a non-negative    number indicates insertion following the element. If no elementId is specified, a negative value indicates    insertion at the end of the group or element list and a non-negative number indicates insertion at the start    of the group or elmenet list.
        :return: BlobElementsUploadFileCreateElementResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.upload_file_create_element_with_http_info(file, translate, flatten_assemblies, y_axis_is_up, did, wid, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_file_create_element_with_http_info(file, translate, flatten_assemblies, y_axis_is_up, did, wid, **kwargs)  # noqa: E501
            return data

    def upload_file_create_element_with_http_info(self, file, translate, flatten_assemblies, y_axis_is_up, did, wid, **kwargs):  # noqa: E501
        """Upload File to New Blob Element  # noqa: E501

        Create a blob element from an uploaded file. The request body must have a Content-Type of                 multipart/form-data. Request Body parameters are multipart fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_file_create_element_with_http_info(file, translate, flatten_assemblies, y_axis_is_up, did, wid, async=True)
        >>> result = thread.get()

        :param async bool
        :param file file: File data to upload. This field should normally have a Content-Disposition header    field with a \"filename\" attribute, naming the uploaded file. (required)
        :param bool translate: Whether the uploaded file should be translated to Onshape format,    if possible (required)
        :param bool flatten_assemblies: If true, remove assembly structure and create only a        Part Studio (required)
        :param bool y_axis_is_up: If true, treat the model's Y axis as the vertical axis.  Otherwise,        Z is treated as the vertical axis. (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param bool create_drawing_if_possible: If true and the uploaded file is a DXF or a DWG,           automatically create a Drawing element along with the Blob element. Otherwise, just create the Blob           element.
        :param str encoded_filename: Filename override interpreted as a URL-encoded string. If specified,    this overrides the filename from a Content-Disposition in the file field.
        :param float file_content_length: The length of the file being uploaded, in bytes. If not present,    Onshape may restrict the upload size under some operating conditions, as the file contents may need to be    buffered in memory. If specified, it should be the actual length of the data being uploaded.
        :param bool import_in_background: If storeInDocument is true and formatName is ONSHAPE and        the source is a Parasolid file, this specifies the preference as to whether the import should be completed        prior to the completion of the request (importInBackground=false) or whether it should be performed        asynchronously (importInBackground=true). Historically, this parameter was implicitly set to false, but large        imports can take long enough that the request could result in a timeout. Applications are encouraged to set        this parameter to true for reliable operation.
        :param bool allow_faulty_parts: If not specified or if specified as false, bodies to be imported        are examined for validity and any found to be faulty are removed from the import. If all bodies are found to        be faulty, the import fails. If the value is specified as true, we attempt to import the bodies that appear to        have faults.
        :param str location_group_id: For internal use.
        :param str location_element_id: Id of an element to place the new element near.
        :param float location_position: An indicator for the relative placement of the new element.    If locationElementId is specified, a negative number indicates insertion prior to the element and a non-negative    number indicates insertion following the element. If no elementId is specified, a negative value indicates    insertion at the end of the group or element list and a non-negative number indicates insertion at the start    of the group or elmenet list.
        :return: BlobElementsUploadFileCreateElementResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'translate', 'flatten_assemblies', 'y_axis_is_up', 'did', 'wid', 'create_drawing_if_possible', 'encoded_filename', 'file_content_length', 'import_in_background', 'allow_faulty_parts', 'location_group_id', 'location_element_id', 'location_position']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file_create_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_file_create_element`")  # noqa: E501
        # verify the required parameter 'translate' is set
        if ('translate' not in params or
                params['translate'] is None):
            raise ValueError("Missing the required parameter `translate` when calling `upload_file_create_element`")  # noqa: E501
        # verify the required parameter 'flatten_assemblies' is set
        if ('flatten_assemblies' not in params or
                params['flatten_assemblies'] is None):
            raise ValueError("Missing the required parameter `flatten_assemblies` when calling `upload_file_create_element`")  # noqa: E501
        # verify the required parameter 'y_axis_is_up' is set
        if ('y_axis_is_up' not in params or
                params['y_axis_is_up'] is None):
            raise ValueError("Missing the required parameter `y_axis_is_up` when calling `upload_file_create_element`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `upload_file_create_element`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `upload_file_create_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'create_drawing_if_possible' in params:
            form_params.append(('createDrawingIfPossible', params['create_drawing_if_possible']))  # noqa: E501
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'encoded_filename' in params:
            form_params.append(('encodedFilename', params['encoded_filename']))  # noqa: E501
        if 'file_content_length' in params:
            form_params.append(('fileContentLength', params['file_content_length']))  # noqa: E501
        if 'translate' in params:
            form_params.append(('translate', params['translate']))  # noqa: E501
        if 'flatten_assemblies' in params:
            form_params.append(('flattenAssemblies', params['flatten_assemblies']))  # noqa: E501
        if 'y_axis_is_up' in params:
            form_params.append(('yAxisIsUp', params['y_axis_is_up']))  # noqa: E501
        if 'import_in_background' in params:
            form_params.append(('importInBackground', params['import_in_background']))  # noqa: E501
        if 'allow_faulty_parts' in params:
            form_params.append(('allowFaultyParts', params['allow_faulty_parts']))  # noqa: E501
        if 'location_group_id' in params:
            form_params.append(('locationGroupId', params['location_group_id']))  # noqa: E501
        if 'location_element_id' in params:
            form_params.append(('locationElementId', params['location_element_id']))  # noqa: E501
        if 'location_position' in params:
            form_params.append(('locationPosition', params['location_position']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/blobelements/d/{did}/w/{wid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlobElementsUploadFileCreateElementResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def upload_file_update_element(self, file, translate, flatten_assemblies, y_axis_is_up, did, wid, eid, **kwargs):  # noqa: E501
        """Update Blob Element  # noqa: E501

        Update a blob element by uploading a file. The request body must have a Content-Type of                 multipart/form-data. Request Body parameters are multipart fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_file_update_element(file, translate, flatten_assemblies, y_axis_is_up, did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param file file: File data to upload. This field should normally have a Content-Disposition header    field with a \"filename\" attribute, naming the uploaded file. (required)
        :param bool translate: Whether the uploaded file should be translated to Onshape format,    if possible (required)
        :param bool flatten_assemblies: If true, remove assembly structure and create only a        Part Studio (required)
        :param bool y_axis_is_up: If true, treat the model's Y axis as the vertical axis.  Otherwise,        Z is treated as the vertical axis. (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param str encoded_filename: Filename override interpreted as a URL-encoded string. If specified,    this overrides the filename from a Content-Disposition in the file field.
        :param float file_content_length: The length of the file being uploaded, in bytes. If not present,    Onshape may restrict the upload size under some operating conditions, as the file contents may need to be    buffered in memory. If specified, it should be the actual length of the data being uploaded.
        :param bool import_in_background: If storeInDocument is true and formatName is ONSHAPE and        the source is a Parasolid file, this specifies the preference as to whether the import should be completed        prior to the completion of the request (importInBackground=false) or whether it should be performed        asynchronously (importInBackground=true). Historically, this parameter was implicitly set to false, but large        imports can take long enough that the request could result in a timeout. Applications are encouraged to set        this parameter to true for reliable operation.
        :param bool allow_faulty_parts: If not specified or if specified as false, bodies to be imported        are examined for validity and any found to be faulty are removed from the import. If all bodies are found to        be faulty, the import fails. If the value is specified as true, we attempt to import the bodies that appear to        have faults.
        :return: BlobElementsUploadFileUpdateElementResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.upload_file_update_element_with_http_info(file, translate, flatten_assemblies, y_axis_is_up, did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.upload_file_update_element_with_http_info(file, translate, flatten_assemblies, y_axis_is_up, did, wid, eid, **kwargs)  # noqa: E501
            return data

    def upload_file_update_element_with_http_info(self, file, translate, flatten_assemblies, y_axis_is_up, did, wid, eid, **kwargs):  # noqa: E501
        """Update Blob Element  # noqa: E501

        Update a blob element by uploading a file. The request body must have a Content-Type of                 multipart/form-data. Request Body parameters are multipart fields.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.upload_file_update_element_with_http_info(file, translate, flatten_assemblies, y_axis_is_up, did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param file file: File data to upload. This field should normally have a Content-Disposition header    field with a \"filename\" attribute, naming the uploaded file. (required)
        :param bool translate: Whether the uploaded file should be translated to Onshape format,    if possible (required)
        :param bool flatten_assemblies: If true, remove assembly structure and create only a        Part Studio (required)
        :param bool y_axis_is_up: If true, treat the model's Y axis as the vertical axis.  Otherwise,        Z is treated as the vertical axis. (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param str encoded_filename: Filename override interpreted as a URL-encoded string. If specified,    this overrides the filename from a Content-Disposition in the file field.
        :param float file_content_length: The length of the file being uploaded, in bytes. If not present,    Onshape may restrict the upload size under some operating conditions, as the file contents may need to be    buffered in memory. If specified, it should be the actual length of the data being uploaded.
        :param bool import_in_background: If storeInDocument is true and formatName is ONSHAPE and        the source is a Parasolid file, this specifies the preference as to whether the import should be completed        prior to the completion of the request (importInBackground=false) or whether it should be performed        asynchronously (importInBackground=true). Historically, this parameter was implicitly set to false, but large        imports can take long enough that the request could result in a timeout. Applications are encouraged to set        this parameter to true for reliable operation.
        :param bool allow_faulty_parts: If not specified or if specified as false, bodies to be imported        are examined for validity and any found to be faulty are removed from the import. If all bodies are found to        be faulty, the import fails. If the value is specified as true, we attempt to import the bodies that appear to        have faults.
        :return: BlobElementsUploadFileUpdateElementResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'translate', 'flatten_assemblies', 'y_axis_is_up', 'did', 'wid', 'eid', 'encoded_filename', 'file_content_length', 'import_in_background', 'allow_faulty_parts']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method upload_file_update_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `upload_file_update_element`")  # noqa: E501
        # verify the required parameter 'translate' is set
        if ('translate' not in params or
                params['translate'] is None):
            raise ValueError("Missing the required parameter `translate` when calling `upload_file_update_element`")  # noqa: E501
        # verify the required parameter 'flatten_assemblies' is set
        if ('flatten_assemblies' not in params or
                params['flatten_assemblies'] is None):
            raise ValueError("Missing the required parameter `flatten_assemblies` when calling `upload_file_update_element`")  # noqa: E501
        # verify the required parameter 'y_axis_is_up' is set
        if ('y_axis_is_up' not in params or
                params['y_axis_is_up'] is None):
            raise ValueError("Missing the required parameter `y_axis_is_up` when calling `upload_file_update_element`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `upload_file_update_element`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `upload_file_update_element`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `upload_file_update_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'encoded_filename' in params:
            form_params.append(('encodedFilename', params['encoded_filename']))  # noqa: E501
        if 'file_content_length' in params:
            form_params.append(('fileContentLength', params['file_content_length']))  # noqa: E501
        if 'translate' in params:
            form_params.append(('translate', params['translate']))  # noqa: E501
        if 'flatten_assemblies' in params:
            form_params.append(('flattenAssemblies', params['flatten_assemblies']))  # noqa: E501
        if 'y_axis_is_up' in params:
            form_params.append(('yAxisIsUp', params['y_axis_is_up']))  # noqa: E501
        if 'import_in_background' in params:
            form_params.append(('importInBackground', params['import_in_background']))  # noqa: E501
        if 'allow_faulty_parts' in params:
            form_params.append(('allowFaultyParts', params['allow_faulty_parts']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/blobelements/d/{did}/w/{wid}/e/{eid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='BlobElementsUploadFileUpdateElementResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
