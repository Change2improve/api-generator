# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from onshape_client.api_client import ApiClient


class PartStudiosApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def add_feature(self, did, wid, eid, **kwargs):  # noqa: E501
        """Add Feature  # noqa: E501

        Add a feature to the feature list for a part studio. See the developer portal feature list                 help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_feature(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosAddFeatureBody body: The JSON request body.
        :return: PartStudiosAddFeatureResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.add_feature_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.add_feature_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
            return data

    def add_feature_with_http_info(self, did, wid, eid, **kwargs):  # noqa: E501
        """Add Feature  # noqa: E501

        Add a feature to the feature list for a part studio. See the developer portal feature list                 help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.add_feature_with_http_info(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosAddFeatureBody body: The JSON request body.
        :return: PartStudiosAddFeatureResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'wid', 'eid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method add_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `add_feature`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `add_feature`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `add_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/w/{wid}/e/{eid}/features', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosAddFeatureResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def compare_part_studio(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Compare Part Studio  # noqa: E501

        Compare Part Studio in different versions / workspaces of a Document. Comparison can be done                 between any combinations of source Workspace | Version | Microversion (specified in URL) and                 target Workspace | Version | Microversion (specified as a query parameter). One of versionId,                 workspaceId, or microversionId query parameters needs to be specified to identify target                 microversion of the comparison. The result of the comparison is indicated by the following                 values: of NONE - entity exists in both source and target states and there's no change in its                 state | MODIFIED - entity exists in both source and target states and there's some change in its                 state | ADDED - entity exists in target only | DELETED - entity exists in source only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.compare_part_studio(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str workspace_id: Id of the Workspace to compare the Part Studio with
        :param str version_id: Id of a Version to compare the Part Studio with
        :param float microversion_id: Id of a document microversion to compare the Part Studio with
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: PartStudiosComparePartStudioResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.compare_part_studio_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.compare_part_studio_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def compare_part_studio_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Compare Part Studio  # noqa: E501

        Compare Part Studio in different versions / workspaces of a Document. Comparison can be done                 between any combinations of source Workspace | Version | Microversion (specified in URL) and                 target Workspace | Version | Microversion (specified as a query parameter). One of versionId,                 workspaceId, or microversionId query parameters needs to be specified to identify target                 microversion of the comparison. The result of the comparison is indicated by the following                 values: of NONE - entity exists in both source and target states and there's no change in its                 state | MODIFIED - entity exists in both source and target states and there's some change in its                 state | ADDED - entity exists in target only | DELETED - entity exists in source only.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.compare_part_studio_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str workspace_id: Id of the Workspace to compare the Part Studio with
        :param str version_id: Id of a Version to compare the Part Studio with
        :param float microversion_id: Id of a document microversion to compare the Part Studio with
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: PartStudiosComparePartStudioResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'workspace_id', 'version_id', 'microversion_id', 'link_document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method compare_part_studio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `compare_part_studio`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `compare_part_studio`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `compare_part_studio`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `compare_part_studio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'workspace_id' in params:
            query_params.append(('workspaceId', params['workspace_id']))  # noqa: E501
        if 'version_id' in params:
            query_params.append(('versionId', params['version_id']))  # noqa: E501
        if 'microversion_id' in params:
            query_params.append(('microversionId', params['microversion_id']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/compare', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosComparePartStudioResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_part_studio(self, did, wid, **kwargs):  # noqa: E501
        """Create Part Studio  # noqa: E501

        Create an new part studio tab in the document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_part_studio(did, wid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param PartStudiosCreatePartStudioBody body: The JSON request body.
        :return: PartStudiosCreatePartStudioResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_part_studio_with_http_info(did, wid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_part_studio_with_http_info(did, wid, **kwargs)  # noqa: E501
            return data

    def create_part_studio_with_http_info(self, did, wid, **kwargs):  # noqa: E501
        """Create Part Studio  # noqa: E501

        Create an new part studio tab in the document.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_part_studio_with_http_info(did, wid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param PartStudiosCreatePartStudioBody body: The JSON request body.
        :return: PartStudiosCreatePartStudioResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'wid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_part_studio" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `create_part_studio`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `create_part_studio`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/w/{wid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosCreatePartStudioResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_translation(self, wv_char, did, wv, eid, **kwargs):  # noqa: E501
        """Create Part Studio translation  # noqa: E501

        Create an element translation. The translation may be incomplete at the time that the call                 completes. If the requestState is ACTIVE, the translation can be polled until the state becomes                 either DONE or FAILED. Alternatively, a webhook callback can be registered for notification of                 translation completion. (Requires Write scope if storeInDocument is true)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_translation(wv_char, did, wv, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wv_char: One of w or v corresponding to whether a workspace or version was entered. (required)
        :param str did: Document ID (required)
        :param str wv: Workspace (w) or Version (v) ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosCreateTranslationBody body: The JSON request body.
        :return: PartStudiosCreateTranslationResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_translation_with_http_info(wv_char, did, wv, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_translation_with_http_info(wv_char, did, wv, eid, **kwargs)  # noqa: E501
            return data

    def create_translation_with_http_info(self, wv_char, did, wv, eid, **kwargs):  # noqa: E501
        """Create Part Studio translation  # noqa: E501

        Create an element translation. The translation may be incomplete at the time that the call                 completes. If the requestState is ACTIVE, the translation can be polled until the state becomes                 either DONE or FAILED. Alternatively, a webhook callback can be registered for notification of                 translation completion. (Requires Write scope if storeInDocument is true)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_translation_with_http_info(wv_char, did, wv, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wv_char: One of w or v corresponding to whether a workspace or version was entered. (required)
        :param str did: Document ID (required)
        :param str wv: Workspace (w) or Version (v) ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosCreateTranslationBody body: The JSON request body.
        :return: PartStudiosCreateTranslationResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wv_char', 'did', 'wv', 'eid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_translation" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wv_char' is set
        if ('wv_char' not in params or
                params['wv_char'] is None):
            raise ValueError("Missing the required parameter `wv_char` when calling `create_translation`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `create_translation`")  # noqa: E501
        # verify the required parameter 'wv' is set
        if ('wv' not in params or
                params['wv'] is None):
            raise ValueError("Missing the required parameter `wv` when calling `create_translation`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `create_translation`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wv_char' in params:
            path_params['wv_char'] = params['wv_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wv' in params:
            path_params['wv'] = params['wv']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wv_char}/{wv}/e/{eid}/translations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosCreateTranslationResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_feature(self, fid, did, wid, eid, **kwargs):  # noqa: E501
        """Delete Feature  # noqa: E501

        Delete an existing feature in the feature list for a part studio. See the developer                 portal feature list help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_feature(fid, did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str fid: The id of the feature being updated.  This id should be URL encoded (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :return: PartStudiosDeleteFeatureResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_feature_with_http_info(fid, did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_feature_with_http_info(fid, did, wid, eid, **kwargs)  # noqa: E501
            return data

    def delete_feature_with_http_info(self, fid, did, wid, eid, **kwargs):  # noqa: E501
        """Delete Feature  # noqa: E501

        Delete an existing feature in the feature list for a part studio. See the developer                 portal feature list help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_feature_with_http_info(fid, did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str fid: The id of the feature being updated.  This id should be URL encoded (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :return: PartStudiosDeleteFeatureResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fid', 'did', 'wid', 'eid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fid' is set
        if ('fid' not in params or
                params['fid'] is None):
            raise ValueError("Missing the required parameter `fid` when calling `delete_feature`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `delete_feature`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `delete_feature`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `delete_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fid' in params:
            path_params['fid'] = params['fid']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosDeleteFeatureResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def eval_feature_script(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Evaluate FeatureScript  # noqa: E501

        Evaluate featurescript in the context of a part studio. See the developer portal feature list                 help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eval_feature_script(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosEvalFeatureScriptBody body: The JSON request body.
        :return: PartStudiosEvalFeatureScriptResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.eval_feature_script_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.eval_feature_script_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def eval_feature_script_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Evaluate FeatureScript  # noqa: E501

        Evaluate featurescript in the context of a part studio. See the developer portal feature list                 help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.eval_feature_script_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosEvalFeatureScriptBody body: The JSON request body.
        :return: PartStudiosEvalFeatureScriptResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method eval_feature_script" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `eval_feature_script`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `eval_feature_script`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `eval_feature_script`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `eval_feature_script`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/featurescript', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosEvalFeatureScriptResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_parasolid(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Export Part Studio to Parasolid  # noqa: E501

        Export the part studio in text Parasolid format; returns a 307 redirect.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_parasolid(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str part_ids: Comma-separated list of part IDs to export (omit to export entire part           studio)
        :param float version: Parasolid version
        :param bool include_export_ids: Whether topolgy ids should be exported as parasolid           attributes
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.export_parasolid_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.export_parasolid_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def export_parasolid_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Export Part Studio to Parasolid  # noqa: E501

        Export the part studio in text Parasolid format; returns a 307 redirect.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_parasolid_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str part_ids: Comma-separated list of part IDs to export (omit to export entire part           studio)
        :param float version: Parasolid version
        :param bool include_export_ids: Whether topolgy ids should be exported as parasolid           attributes
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'part_ids', 'version', 'include_export_ids', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_parasolid" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `export_parasolid`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `export_parasolid`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `export_parasolid`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `export_parasolid`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'part_ids' in params:
            query_params.append(('partIds', params['part_ids']))  # noqa: E501
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'include_export_ids' in params:
            query_params.append(('includeExportIds', params['include_export_ids']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/parasolid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_stl(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Export Part Studio to STL  # noqa: E501

        Export the part studio in text or binary STL format; returns a 307 redirect.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_stl(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str part_ids: Comma-separated list of part IDs to export (omit to export entire part           studio)
        :param bool grouping: Whether parts should be exported as a group or individually in a           .zip file
        :param float scale: Scale for measurements
        :param str units: Name of base unit (meter, centimeter, millimeter, inch, foot, or           yard)
        :param float angle_tolerance: Angle tolerance (in radians; must be < pi/2)
        :param float chord_tolerance: Chord tolerance (in selected units)
        :param float max_facet_width: Maximum facet width (in selected units)
        :param float min_facet_width: Minimum facet width (in selected units - must be <           maximumFacetWidth)
        :param str mode: Type of file: text, binary
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.export_stl_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.export_stl_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def export_stl_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Export Part Studio to STL  # noqa: E501

        Export the part studio in text or binary STL format; returns a 307 redirect.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_stl_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str part_ids: Comma-separated list of part IDs to export (omit to export entire part           studio)
        :param bool grouping: Whether parts should be exported as a group or individually in a           .zip file
        :param float scale: Scale for measurements
        :param str units: Name of base unit (meter, centimeter, millimeter, inch, foot, or           yard)
        :param float angle_tolerance: Angle tolerance (in radians; must be < pi/2)
        :param float chord_tolerance: Chord tolerance (in selected units)
        :param float max_facet_width: Maximum facet width (in selected units)
        :param float min_facet_width: Minimum facet width (in selected units - must be <           maximumFacetWidth)
        :param str mode: Type of file: text, binary
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'part_ids', 'grouping', 'scale', 'units', 'angle_tolerance', 'chord_tolerance', 'max_facet_width', 'min_facet_width', 'mode', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_stl" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `export_stl`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `export_stl`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `export_stl`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `export_stl`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'part_ids' in params:
            query_params.append(('partIds', params['part_ids']))  # noqa: E501
        if 'grouping' in params:
            query_params.append(('grouping', params['grouping']))  # noqa: E501
        if 'scale' in params:
            query_params.append(('scale', params['scale']))  # noqa: E501
        if 'units' in params:
            query_params.append(('units', params['units']))  # noqa: E501
        if 'angle_tolerance' in params:
            query_params.append(('angleTolerance', params['angle_tolerance']))  # noqa: E501
        if 'chord_tolerance' in params:
            query_params.append(('chordTolerance', params['chord_tolerance']))  # noqa: E501
        if 'max_facet_width' in params:
            query_params.append(('maxFacetWidth', params['max_facet_width']))  # noqa: E501
        if 'min_facet_width' in params:
            query_params.append(('minFacetWidth', params['min_facet_width']))  # noqa: E501
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/stl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_body_details(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Body Details  # noqa: E501

        Get the body details of a Part Studio.  All coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_body_details(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: PartStudiosGetBodyDetailsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_body_details_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_body_details_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_body_details_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Body Details  # noqa: E501

        Get the body details of a Part Studio.  All coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_body_details_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: PartStudiosGetBodyDetailsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_body_details" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_body_details`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_body_details`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_body_details`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_body_details`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/bodydetails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetBodyDetailsResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bounding_boxes(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Bounding Box  # noqa: E501

        Get the bounding box of a Part Studio, or an empty object if the Part Studio is empty. All                 coordinates are in meters. Sketches are not used in computing the result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bounding_boxes(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param bool include_hidden: Whether or not to include bounding boxes for hidden parts
        :param bool include_wire_bodies: Whether to include wire bodies in the bounding box           calculation
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: PartStudiosGetBoundingBoxesResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bounding_boxes_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bounding_boxes_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_bounding_boxes_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Bounding Box  # noqa: E501

        Get the bounding box of a Part Studio, or an empty object if the Part Studio is empty. All                 coordinates are in meters. Sketches are not used in computing the result.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bounding_boxes_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param bool include_hidden: Whether or not to include bounding boxes for hidden parts
        :param bool include_wire_bodies: Whether to include wire bodies in the bounding box           calculation
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: PartStudiosGetBoundingBoxesResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'include_hidden', 'include_wire_bodies', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bounding_boxes" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_bounding_boxes`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_bounding_boxes`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_bounding_boxes`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_bounding_boxes`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'include_hidden' in params:
            query_params.append(('includeHidden', params['include_hidden']))  # noqa: E501
        if 'include_wire_bodies' in params:
            query_params.append(('includeWireBodies', params['include_wire_bodies']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/boundingboxes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetBoundingBoxesResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bounding_boxes_for_sketch(self, wvm_char, did, wvm, eid, sid, **kwargs):  # noqa: E501
        """Sketch Bounding Box  # noqa: E501

        Get the bounding box of a sketch. All coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bounding_boxes_for_sketch(wvm_char, did, wvm, eid, sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str sid: Sketch feature ID (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: PartStudiosGetBoundingBoxesForSketchResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bounding_boxes_for_sketch_with_http_info(wvm_char, did, wvm, eid, sid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bounding_boxes_for_sketch_with_http_info(wvm_char, did, wvm, eid, sid, **kwargs)  # noqa: E501
            return data

    def get_bounding_boxes_for_sketch_with_http_info(self, wvm_char, did, wvm, eid, sid, **kwargs):  # noqa: E501
        """Sketch Bounding Box  # noqa: E501

        Get the bounding box of a sketch. All coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bounding_boxes_for_sketch_with_http_info(wvm_char, did, wvm, eid, sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str sid: Sketch feature ID (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: PartStudiosGetBoundingBoxesForSketchResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'sid', 'link_document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bounding_boxes_for_sketch" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_bounding_boxes_for_sketch`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_bounding_boxes_for_sketch`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_bounding_boxes_for_sketch`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_bounding_boxes_for_sketch`")  # noqa: E501
        # verify the required parameter 'sid' is set
        if ('sid' not in params or
                params['sid'] is None):
            raise ValueError("Missing the required parameter `sid` when calling `get_bounding_boxes_for_sketch`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'sid' in params:
            path_params['sid'] = params['sid']  # noqa: E501

        query_params = []
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/sketches/{sid}/boundingboxes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetBoundingBoxesForSketchResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_configuration(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Configuration  # noqa: E501

        Get the configuration definition for a part studio. See the developer portal feature list                 help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_configuration(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :return: PartStudiosGetConfigurationResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_configuration_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_configuration_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_configuration_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Configuration  # noqa: E501

        Get the configuration definition for a part studio. See the developer portal feature list                 help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_configuration_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :return: PartStudiosGetConfigurationResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_configuration`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_configuration`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_configuration`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/configuration', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetConfigurationResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_edges(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Tessellated Edges  # noqa: E501

        Get the tessellated edges of the parts in a Part Studio. The accuracy of the tessellation     approximation to exact geometry is controlled by the angleTolerance and chordTolerance parameters. The     tessellation points are computed close enough so that neither the angle tolerance nor the chord tolerance are     exceeded.     All coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_edges(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param float angle_tolerance: Angle tolerance (in radians). This specifies the limit     on the sum of the angular deviations of a tessellation chord from the tangent vectors at two chord endpoints.     The specified value must be less than PI/2. This parameter currently has a default value chosen based on     the complexity of the parts being tessellated.
        :param float chord_tolerance: Chord tolerance (in meters). This specifies the limit on     the maximum deviation of a tessellation chord from the true edge. This parameter currently has a default     value chosen based on the size and complexity of the parts being tessellated.
        :param str edge_id: IDs of edges to tessellate (repeat query param to add more than one,     i.e. edgeId=JHK&edgeId=JHD)
        :param str part_id: IDs of the parts to tessellate (repeat query param to add more than one,     i.e. partId=JHK&partId=JHD).  May not be combined with edgeId
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: PartStudiosGetEdgesResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_edges_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_edges_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_edges_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Tessellated Edges  # noqa: E501

        Get the tessellated edges of the parts in a Part Studio. The accuracy of the tessellation     approximation to exact geometry is controlled by the angleTolerance and chordTolerance parameters. The     tessellation points are computed close enough so that neither the angle tolerance nor the chord tolerance are     exceeded.     All coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_edges_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param float angle_tolerance: Angle tolerance (in radians). This specifies the limit     on the sum of the angular deviations of a tessellation chord from the tangent vectors at two chord endpoints.     The specified value must be less than PI/2. This parameter currently has a default value chosen based on     the complexity of the parts being tessellated.
        :param float chord_tolerance: Chord tolerance (in meters). This specifies the limit on     the maximum deviation of a tessellation chord from the true edge. This parameter currently has a default     value chosen based on the size and complexity of the parts being tessellated.
        :param str edge_id: IDs of edges to tessellate (repeat query param to add more than one,     i.e. edgeId=JHK&edgeId=JHD)
        :param str part_id: IDs of the parts to tessellate (repeat query param to add more than one,     i.e. partId=JHK&partId=JHD).  May not be combined with edgeId
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: PartStudiosGetEdgesResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'angle_tolerance', 'chord_tolerance', 'edge_id', 'part_id', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_edges" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_edges`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_edges`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_edges`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_edges`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'angle_tolerance' in params:
            query_params.append(('angleTolerance', params['angle_tolerance']))  # noqa: E501
        if 'chord_tolerance' in params:
            query_params.append(('chordTolerance', params['chord_tolerance']))  # noqa: E501
        if 'edge_id' in params:
            query_params.append(('edgeId', params['edge_id']))  # noqa: E501
        if 'part_id' in params:
            query_params.append(('partId', params['part_id']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/tessellatededges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetEdgesResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_faces(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Tessellated Faces  # noqa: E501

        Get the tessellated faces of the parts in a Part Studio. The accuracy of the tessellation                 approximation to exact geometry is controlled by the angleTolerance, chordTolerance and                 maxFacetWidth parameters. The tessellation points are computed close enough so that none of these                 parameters are exceeded. All coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_faces(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param float angle_tolerance: Angle tolerance (in radians). This specifies the limit on the           sum of the angular deviations of a tessellation chord from the tangent vectors at two chord endpoints.           The specified value must be less than PI/2. This parameter currently has a default value chosen based           on the complexity of the parts being tessellated.
        :param float chord_tolerance: Chord tolerance (in meters). This specifies the limit on the           maximum deviation of a tessellation chord from the true surface/edge. This parameter currently has a           default value chosen based on the size and complexity of the parts being tessellated.
        :param float max_facet_width: Max facet width. This specifies the limit on the size of any side           of a tessellation facet.
        :param bool output_vertex_normals: If true, output vertex normals corresponding to           surface normals at facet vertex points.
        :param bool output_facet_normals: Output facet normals
        :param bool output_texture_coordinates: Output texture coordinates
        :param bool output_index_table: Output index table
        :param str face_id: IDs of the faces to tessellate (repeat query param to add more than one,           i.e. faceId=JHK&faceId=JHD)
        :param str part_id: IDs of the parts to tessellate (repeat query param to add more than one,           i.e. partId=JHK&partId=JHD). May not be combined with faceId
        :param bool output_error_faces: Whether or not to output faces that cause an error
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: PartStudiosGetFacesResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_faces_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_faces_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_faces_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Tessellated Faces  # noqa: E501

        Get the tessellated faces of the parts in a Part Studio. The accuracy of the tessellation                 approximation to exact geometry is controlled by the angleTolerance, chordTolerance and                 maxFacetWidth parameters. The tessellation points are computed close enough so that none of these                 parameters are exceeded. All coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_faces_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param float angle_tolerance: Angle tolerance (in radians). This specifies the limit on the           sum of the angular deviations of a tessellation chord from the tangent vectors at two chord endpoints.           The specified value must be less than PI/2. This parameter currently has a default value chosen based           on the complexity of the parts being tessellated.
        :param float chord_tolerance: Chord tolerance (in meters). This specifies the limit on the           maximum deviation of a tessellation chord from the true surface/edge. This parameter currently has a           default value chosen based on the size and complexity of the parts being tessellated.
        :param float max_facet_width: Max facet width. This specifies the limit on the size of any side           of a tessellation facet.
        :param bool output_vertex_normals: If true, output vertex normals corresponding to           surface normals at facet vertex points.
        :param bool output_facet_normals: Output facet normals
        :param bool output_texture_coordinates: Output texture coordinates
        :param bool output_index_table: Output index table
        :param str face_id: IDs of the faces to tessellate (repeat query param to add more than one,           i.e. faceId=JHK&faceId=JHD)
        :param str part_id: IDs of the parts to tessellate (repeat query param to add more than one,           i.e. partId=JHK&partId=JHD). May not be combined with faceId
        :param bool output_error_faces: Whether or not to output faces that cause an error
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: PartStudiosGetFacesResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'angle_tolerance', 'chord_tolerance', 'max_facet_width', 'output_vertex_normals', 'output_facet_normals', 'output_texture_coordinates', 'output_index_table', 'face_id', 'part_id', 'output_error_faces', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_faces" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_faces`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_faces`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_faces`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_faces`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'angle_tolerance' in params:
            query_params.append(('angleTolerance', params['angle_tolerance']))  # noqa: E501
        if 'chord_tolerance' in params:
            query_params.append(('chordTolerance', params['chord_tolerance']))  # noqa: E501
        if 'max_facet_width' in params:
            query_params.append(('maxFacetWidth', params['max_facet_width']))  # noqa: E501
        if 'output_vertex_normals' in params:
            query_params.append(('outputVertexNormals', params['output_vertex_normals']))  # noqa: E501
        if 'output_facet_normals' in params:
            query_params.append(('outputFacetNormals', params['output_facet_normals']))  # noqa: E501
        if 'output_texture_coordinates' in params:
            query_params.append(('outputTextureCoordinates', params['output_texture_coordinates']))  # noqa: E501
        if 'output_index_table' in params:
            query_params.append(('outputIndexTable', params['output_index_table']))  # noqa: E501
        if 'face_id' in params:
            query_params.append(('faceId', params['face_id']))  # noqa: E501
        if 'part_id' in params:
            query_params.append(('partId', params['part_id']))  # noqa: E501
        if 'output_error_faces' in params:
            query_params.append(('outputErrorFaces', params['output_error_faces']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/tessellatedfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetFacesResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_feature_specs(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Feature Specs  # noqa: E501

        Get the definition of the feature specs for a part studio. See the developer                 portal feature list help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_feature_specs(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :return: PartStudiosGetFeatureSpecsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_feature_specs_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_feature_specs_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_feature_specs_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Feature Specs  # noqa: E501

        Get the definition of the feature specs for a part studio. See the developer                 portal feature list help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_feature_specs_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :return: PartStudiosGetFeatureSpecsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_feature_specs" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_feature_specs`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_feature_specs`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_feature_specs`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_feature_specs`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/featurespecs', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetFeatureSpecsResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_features(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Feature List  # noqa: E501

        Get the definition of the feature list for a part studio. See the developer portal feature list                 help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_features(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str feature_id: ID of a feature; repeat query param to add more than one
        :param bool no_sketch_geometry: Whether or not to output simple sketch info without           geometry
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: PartStudiosGetFeaturesResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_features_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_features_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_features_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Feature List  # noqa: E501

        Get the definition of the feature list for a part studio. See the developer portal feature list                 help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_features_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str feature_id: ID of a feature; repeat query param to add more than one
        :param bool no_sketch_geometry: Whether or not to output simple sketch info without           geometry
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: PartStudiosGetFeaturesResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'feature_id', 'no_sketch_geometry', 'link_document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_features`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_features`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_features`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'feature_id' in params:
            query_params.append(('featureId', params['feature_id']))  # noqa: E501
        if 'no_sketch_geometry' in params:
            query_params.append(('noSketchGeometry', params['no_sketch_geometry']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/features', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetFeaturesResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mass_properties(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Mass Properties  # noqa: E501

        Get the mass properties of a part studio or parts; parts must have density in order to have mass.                 For properties that come in sets of three, the first set is the calculated value, and the second                 and third are minimum and maximum possible values considering tolerance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_mass_properties(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str part_id: IDs of the parts for which to retrieve mass properties (repeat query           param to add more than one, i.e. partId=JHK&partId=JHD)
        :param bool mass_as_group: If true, specified parts will be evaluated as a single object           instead of individually
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: PartStudiosGetMassPropertiesResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_mass_properties_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mass_properties_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_mass_properties_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Mass Properties  # noqa: E501

        Get the mass properties of a part studio or parts; parts must have density in order to have mass.                 For properties that come in sets of three, the first set is the calculated value, and the second                 and third are minimum and maximum possible values considering tolerance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_mass_properties_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str part_id: IDs of the parts for which to retrieve mass properties (repeat query           param to add more than one, i.e. partId=JHK&partId=JHD)
        :param bool mass_as_group: If true, specified parts will be evaluated as a single object           instead of individually
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: PartStudiosGetMassPropertiesResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'part_id', 'mass_as_group', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mass_properties" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_mass_properties`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_mass_properties`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_mass_properties`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_mass_properties`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'part_id' in params:
            query_params.append(('partId', params['part_id']))  # noqa: E501
        if 'mass_as_group' in params:
            query_params.append(('massAsGroup', params['mass_as_group']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/massproperties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetMassPropertiesResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Part Metadata  # noqa: E501

        Get metadata for the parts in the part studio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str part_ids: Comma-separated list of part IDs for which to get part metadata (omit           to get part metadata for entire part studio)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: PartStudiosGetMetadataResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_metadata_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_metadata_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Part Metadata  # noqa: E501

        Get metadata for the parts in the part studio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str part_ids: Comma-separated list of part IDs for which to get part metadata (omit           to get part metadata for entire part studio)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: PartStudiosGetMetadataResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'part_ids', 'link_document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_metadata`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_metadata`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_metadata`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'part_ids' in params:
            query_params.append(('partIds', params['part_ids']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetMetadataResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_named_views(self, did, eid, **kwargs):  # noqa: E501
        """Get Named Views  # noqa: E501

        Returns a map from view name to view data for the given element  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_named_views(did, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str eid: Element ID (required)
        :param bool skip_perspective: Whether views with a perspective projection should be omitted.
        :return: PartStudiosGetNamedViewsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_named_views_with_http_info(did, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_named_views_with_http_info(did, eid, **kwargs)  # noqa: E501
            return data

    def get_named_views_with_http_info(self, did, eid, **kwargs):  # noqa: E501
        """Get Named Views  # noqa: E501

        Returns a map from view name to view data for the given element  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_named_views_with_http_info(did, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str eid: Element ID (required)
        :param bool skip_perspective: Whether views with a perspective projection should be omitted.
        :return: PartStudiosGetNamedViewsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'eid', 'skip_perspective']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_named_views" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_named_views`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_named_views`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'skip_perspective' in params:
            query_params.append(('skipPerspective', params['skip_perspective']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/e/{eid}/namedViews', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetNamedViewsResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_shaded_views(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Shaded Views  # noqa: E501

        Get a shaded image rendering of a Part Studio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_shaded_views(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param float output_height: Output image height (in pixels)
        :param float output_width: Output image width (in pixels)
        :param float pixel_size: Height and width represented by each pixel (in meters). If the           value is 0, the display will be sized to fit the output image dimensions.
        :param str edges: The treatment to be applied to edges in the display. Options are           show: show visible edges, hide: hide visible edges
        :param bool show_all_parts: Whether or not all parts should be shown in the element,           regardless of user setting. If false, the visibility setting made by the user will be reflected in the           image. If true, all parts will be shown.
        :param bool include_surfaces: Whether or not surfaces should be shown in the element.           It is applicable only when showAllParts is true. If false, surfaces will be excluded.           If true, all surfaces will be shown.
        :param bool use_anti_aliasing: If true, an anti-aliasing factor will be used to smooth           model boundaries in the final image result. If false, the image will be rasterized at the given           resolution. Setting to true can have negative performance implications with respect to rendering time           and memory usage. If a high-resolution image is requested and anti-aliasing is turned on, the server           may not be able to fulfill the request.
        :param str view_matrix: 12-number view matrix (comma-separated), or one of the following named views: top, bottom, front, back, left, right The 12 entries in the view matrix form three rows and four columns, which is a linear transformation applied to the model itself. The matrix's first three columns maps the coordinate axes of the model to the coordinate axes of the view, and the fourth column translates the origin (in meters). The view coordinates have x pointing right, y pointing up, and z pointing towards the viewer, while a front view of the model has x pointing right, y pointing away from the viewer, and z pointing up. For example, the identity matrix viewMatrix=1,0,0,0,0,1,0,0,0,0,1,0 corresponds to the top view, and viewMatrix=0.612,0.612,0,0,-0.354,0.354,0.707,0,0.707,-0.707,0.707,0 corresponds (approximately) to the isometric view. The first three columns of the view matrix should be orthonormal and have a positive determinant.  If this is not the case, view behavior may be undefined.
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: PartStudiosGetShadedViewsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_shaded_views_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_shaded_views_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_shaded_views_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Shaded Views  # noqa: E501

        Get a shaded image rendering of a Part Studio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_shaded_views_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param float output_height: Output image height (in pixels)
        :param float output_width: Output image width (in pixels)
        :param float pixel_size: Height and width represented by each pixel (in meters). If the           value is 0, the display will be sized to fit the output image dimensions.
        :param str edges: The treatment to be applied to edges in the display. Options are           show: show visible edges, hide: hide visible edges
        :param bool show_all_parts: Whether or not all parts should be shown in the element,           regardless of user setting. If false, the visibility setting made by the user will be reflected in the           image. If true, all parts will be shown.
        :param bool include_surfaces: Whether or not surfaces should be shown in the element.           It is applicable only when showAllParts is true. If false, surfaces will be excluded.           If true, all surfaces will be shown.
        :param bool use_anti_aliasing: If true, an anti-aliasing factor will be used to smooth           model boundaries in the final image result. If false, the image will be rasterized at the given           resolution. Setting to true can have negative performance implications with respect to rendering time           and memory usage. If a high-resolution image is requested and anti-aliasing is turned on, the server           may not be able to fulfill the request.
        :param str view_matrix: 12-number view matrix (comma-separated), or one of the following named views: top, bottom, front, back, left, right The 12 entries in the view matrix form three rows and four columns, which is a linear transformation applied to the model itself. The matrix's first three columns maps the coordinate axes of the model to the coordinate axes of the view, and the fourth column translates the origin (in meters). The view coordinates have x pointing right, y pointing up, and z pointing towards the viewer, while a front view of the model has x pointing right, y pointing away from the viewer, and z pointing up. For example, the identity matrix viewMatrix=1,0,0,0,0,1,0,0,0,0,1,0 corresponds to the top view, and viewMatrix=0.612,0.612,0,0,-0.354,0.354,0.707,0,0.707,-0.707,0.707,0 corresponds (approximately) to the isometric view. The first three columns of the view matrix should be orthonormal and have a positive determinant.  If this is not the case, view behavior may be undefined.
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: PartStudiosGetShadedViewsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'output_height', 'output_width', 'pixel_size', 'edges', 'show_all_parts', 'include_surfaces', 'use_anti_aliasing', 'view_matrix', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shaded_views" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_shaded_views`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_shaded_views`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_shaded_views`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_shaded_views`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'output_height' in params:
            query_params.append(('outputHeight', params['output_height']))  # noqa: E501
        if 'output_width' in params:
            query_params.append(('outputWidth', params['output_width']))  # noqa: E501
        if 'pixel_size' in params:
            query_params.append(('pixelSize', params['pixel_size']))  # noqa: E501
        if 'edges' in params:
            query_params.append(('edges', params['edges']))  # noqa: E501
        if 'show_all_parts' in params:
            query_params.append(('showAllParts', params['show_all_parts']))  # noqa: E501
        if 'include_surfaces' in params:
            query_params.append(('includeSurfaces', params['include_surfaces']))  # noqa: E501
        if 'use_anti_aliasing' in params:
            query_params.append(('useAntiAliasing', params['use_anti_aliasing']))  # noqa: E501
        if 'view_matrix' in params:
            query_params.append(('viewMatrix', params['view_matrix']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/shadedviews', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetShadedViewsResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sketch_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Sketch Information  # noqa: E501

        Get information for sketches in a part studio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_sketch_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str sketch_id: ID of a sketch feature; repeat query param to add more than one. If no sketchId query     parameter is passed, all sketches in the part studio are returned.
        :param bool output3_d: Whether or not to output with respect to global 3D coordinate system
        :param bool curve_points: Whether or not to output start/quarter/mid/end points, start/end tangent vectors, and length of sketch curves
        :param bool include_geometry: Whether or not to just output simple sketch info without geometry
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: PartStudiosGetSketchInfoResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_sketch_info_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sketch_info_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_sketch_info_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Sketch Information  # noqa: E501

        Get information for sketches in a part studio  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_sketch_info_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str sketch_id: ID of a sketch feature; repeat query param to add more than one. If no sketchId query     parameter is passed, all sketches in the part studio are returned.
        :param bool output3_d: Whether or not to output with respect to global 3D coordinate system
        :param bool curve_points: Whether or not to output start/quarter/mid/end points, start/end tangent vectors, and length of sketch curves
        :param bool include_geometry: Whether or not to just output simple sketch info without geometry
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: PartStudiosGetSketchInfoResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'sketch_id', 'output3_d', 'curve_points', 'include_geometry', 'link_document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sketch_info" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_sketch_info`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_sketch_info`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_sketch_info`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_sketch_info`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'sketch_id' in params:
            query_params.append(('sketchId', params['sketch_id']))  # noqa: E501
        if 'output3_d' in params:
            query_params.append(('output3D', params['output3_d']))  # noqa: E501
        if 'curve_points' in params:
            query_params.append(('curvePoints', params['curve_points']))  # noqa: E501
        if 'include_geometry' in params:
            query_params.append(('includeGeometry', params['include_geometry']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/sketches', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetSketchInfoResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_tessellated_entities(self, wvm_char, did, wvm, eid, sid, **kwargs):  # noqa: E501
        """Tessellated sketch entitites  # noqa: E501

        Get the tessellations of the sketch entities of a sketch in a part studio. The accuracy of the                 tessellation to exact geometry is controlled by the angleTolerance and chordTolerance parameters.                 The tessellation points are computed close enough so that neither the angle tolerance nor the                 chord tolerance are exceeded. For most parts, the angular tolerance is the most restrictive of                 the two default tolerances.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tessellated_entities(wvm_char, did, wvm, eid, sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str sid: Sketch feature ID (required)
        :param str entity_id: Sketch entity id to be tessellated. All entities in the sketch are           tessellated if none are provided.
        :param float angle_tolerance: Angle tolerance (in radians). This specifies the limit on the           sum of the angular deviations of a tessellation chord from the tangent vectors at two chord endpoints.           The specified value must be less than PI/2. This parameter currently has a default value of 0.087267           radians, but is subject to change.
        :param float chord_tolerance: Chord tolerance (in meters). This specifies the limit on the           maximum deviation of a tessellation chord from the true curve. This parameter currently has a default           value of 0.02 meters, but is subject to change.
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: PartStudiosGetTessellatedEntitiesResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_tessellated_entities_with_http_info(wvm_char, did, wvm, eid, sid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_tessellated_entities_with_http_info(wvm_char, did, wvm, eid, sid, **kwargs)  # noqa: E501
            return data

    def get_tessellated_entities_with_http_info(self, wvm_char, did, wvm, eid, sid, **kwargs):  # noqa: E501
        """Tessellated sketch entitites  # noqa: E501

        Get the tessellations of the sketch entities of a sketch in a part studio. The accuracy of the                 tessellation to exact geometry is controlled by the angleTolerance and chordTolerance parameters.                 The tessellation points are computed close enough so that neither the angle tolerance nor the                 chord tolerance are exceeded. For most parts, the angular tolerance is the most restrictive of                 the two default tolerances.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_tessellated_entities_with_http_info(wvm_char, did, wvm, eid, sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str sid: Sketch feature ID (required)
        :param str entity_id: Sketch entity id to be tessellated. All entities in the sketch are           tessellated if none are provided.
        :param float angle_tolerance: Angle tolerance (in radians). This specifies the limit on the           sum of the angular deviations of a tessellation chord from the tangent vectors at two chord endpoints.           The specified value must be less than PI/2. This parameter currently has a default value of 0.087267           radians, but is subject to change.
        :param float chord_tolerance: Chord tolerance (in meters). This specifies the limit on the           maximum deviation of a tessellation chord from the true curve. This parameter currently has a default           value of 0.02 meters, but is subject to change.
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: PartStudiosGetTessellatedEntitiesResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'sid', 'entity_id', 'angle_tolerance', 'chord_tolerance', 'link_document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_tessellated_entities" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_tessellated_entities`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_tessellated_entities`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_tessellated_entities`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_tessellated_entities`")  # noqa: E501
        # verify the required parameter 'sid' is set
        if ('sid' not in params or
                params['sid'] is None):
            raise ValueError("Missing the required parameter `sid` when calling `get_tessellated_entities`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'sid' in params:
            path_params['sid'] = params['sid']  # noqa: E501

        query_params = []
        if 'entity_id' in params:
            query_params.append(('entityId', params['entity_id']))  # noqa: E501
        if 'angle_tolerance' in params:
            query_params.append(('angleTolerance', params['angle_tolerance']))  # noqa: E501
        if 'chord_tolerance' in params:
            query_params.append(('chordTolerance', params['chord_tolerance']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/sketches/{sid}/tessellatedentities', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetTessellatedEntitiesResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_translation_formats(self, did, wid, eid, **kwargs):  # noqa: E501
        """Get Translation Formats  # noqa: E501

        Returns a list of the available formats to which this Part Studio can be translated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_translation_formats(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param bool check_content: Whether the current content or lack thereof should be        considered when determining the available formats. Empty part studios cannot be translated into any format.
        :return: PartStudiosGetTranslationFormatsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_translation_formats_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_translation_formats_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
            return data

    def get_translation_formats_with_http_info(self, did, wid, eid, **kwargs):  # noqa: E501
        """Get Translation Formats  # noqa: E501

        Returns a list of the available formats to which this Part Studio can be translated  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_translation_formats_with_http_info(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param bool check_content: Whether the current content or lack thereof should be        considered when determining the available formats. Empty part studios cannot be translated into any format.
        :return: PartStudiosGetTranslationFormatsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'wid', 'eid', 'check_content']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_translation_formats" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_translation_formats`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `get_translation_formats`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_translation_formats`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'check_content' in params:
            query_params.append(('checkContent', params['check_content']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/w/{wid}/e/{eid}/translationformats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosGetTranslationFormatsResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def id_translations(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Id Translations  # noqa: E501

        Translate a list of part, face, etc ids defined in a specific microversion of a document to a                 corresponding list of ids in the current microversion of a workspace of the document or other                 specific version/microversion. This will also allow converting between configurations, although a                 particular ID might not have an equivalent in another configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.id_translations(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosIdTranslationsBody body: The JSON request body.
        :return: PartStudiosIdTranslationsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.id_translations_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.id_translations_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def id_translations_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Id Translations  # noqa: E501

        Translate a list of part, face, etc ids defined in a specific microversion of a document to a                 corresponding list of ids in the current microversion of a workspace of the document or other                 specific version/microversion. This will also allow converting between configurations, although a                 particular ID might not have an equivalent in another configuration.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.id_translations_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosIdTranslationsBody body: The JSON request body.
        :return: PartStudiosIdTranslationsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method id_translations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `id_translations`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `id_translations`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `id_translations`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `id_translations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/{wvm_char}/{wvm}/e/{eid}/idtranslations', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosIdTranslationsResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_configuration(self, did, wid, eid, **kwargs):  # noqa: E501
        """Update Configuration  # noqa: E501

        Update the configuration for a part studio. See the developer portal feature list                 help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_configuration(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosUpdateConfigurationBody body: The JSON request body.
        :return: PartStudiosUpdateConfigurationResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_configuration_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_configuration_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
            return data

    def update_configuration_with_http_info(self, did, wid, eid, **kwargs):  # noqa: E501
        """Update Configuration  # noqa: E501

        Update the configuration for a part studio. See the developer portal feature list                 help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_configuration_with_http_info(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosUpdateConfigurationBody body: The JSON request body.
        :return: PartStudiosUpdateConfigurationResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'wid', 'eid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_configuration" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `update_configuration`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `update_configuration`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `update_configuration`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/w/{wid}/e/{eid}/configuration', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosUpdateConfigurationResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_feature(self, fid, did, wid, eid, **kwargs):  # noqa: E501
        """Update Feature  # noqa: E501

        Update an existing feature in the feature list for a part studio. See the developer portal                 feature list help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_feature(fid, did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str fid: The id of the feature being updated.  This id should be URL encoded and must   match the featureId found in the serialized structure (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosUpdateFeatureBody body: The JSON request body.
        :return: PartStudiosUpdateFeatureResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_feature_with_http_info(fid, did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_feature_with_http_info(fid, did, wid, eid, **kwargs)  # noqa: E501
            return data

    def update_feature_with_http_info(self, fid, did, wid, eid, **kwargs):  # noqa: E501
        """Update Feature  # noqa: E501

        Update an existing feature in the feature list for a part studio. See the developer portal                 feature list help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_feature_with_http_info(fid, did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str fid: The id of the feature being updated.  This id should be URL encoded and must   match the featureId found in the serialized structure (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosUpdateFeatureBody body: The JSON request body.
        :return: PartStudiosUpdateFeatureResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fid', 'did', 'wid', 'eid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_feature" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fid' is set
        if ('fid' not in params or
                params['fid'] is None):
            raise ValueError("Missing the required parameter `fid` when calling `update_feature`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `update_feature`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `update_feature`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `update_feature`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fid' in params:
            path_params['fid'] = params['fid']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/w/{wid}/e/{eid}/features/featureid/{fid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosUpdateFeatureResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_features(self, did, wid, eid, **kwargs):  # noqa: E501
        """Update Features  # noqa: E501

        Update parameters of existing features in the feature list for a part studio. Multiple features                 may be updated simultaneously with a single call, allowing for faster regeneration. Only the                 parameters that are present in the passed features are updated. Existing parameters that are                 not included in the passed feature are left untouched. In addition, if the field                 updateSuppressionAttributes is set to true, the suppress and suppressionState values for the                 updated features are set from the passed feature objects. See the developer portal feature list                 help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_features(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosUpdateFeaturesBody body: The JSON request body.
        :return: PartStudiosUpdateFeaturesResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_features_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_features_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
            return data

    def update_features_with_http_info(self, did, wid, eid, **kwargs):  # noqa: E501
        """Update Features  # noqa: E501

        Update parameters of existing features in the feature list for a part studio. Multiple features                 may be updated simultaneously with a single call, allowing for faster regeneration. Only the                 parameters that are present in the passed features are updated. Existing parameters that are                 not included in the passed feature are left untouched. In addition, if the field                 updateSuppressionAttributes is set to true, the suppress and suppressionState values for the                 updated features are set from the passed feature objects. See the developer portal feature list                 help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_features_with_http_info(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosUpdateFeaturesBody body: The JSON request body.
        :return: PartStudiosUpdateFeaturesResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'wid', 'eid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_features" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `update_features`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `update_features`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `update_features`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/w/{wid}/e/{eid}/features/updates', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosUpdateFeaturesResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_rollback(self, did, wid, eid, **kwargs):  # noqa: E501
        """Update Feature Rollback  # noqa: E501

        Move the rollback bar in the feature list for a part studio. See the developer portal                 feature list help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_rollback(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosUpdateRollbackBody body: The JSON request body.
        :return: PartStudiosUpdateRollbackResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_rollback_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_rollback_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
            return data

    def update_rollback_with_http_info(self, did, wid, eid, **kwargs):  # noqa: E501
        """Update Feature Rollback  # noqa: E501

        Move the rollback bar in the feature list for a part studio. See the developer portal                 feature list help topic for additional information  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_rollback_with_http_info(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param PartStudiosUpdateRollbackBody body: The JSON request body.
        :return: PartStudiosUpdateRollbackResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'wid', 'eid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_rollback" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `update_rollback`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `update_rollback`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `update_rollback`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/partstudios/d/{did}/w/{wid}/e/{eid}/features/rollback', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='PartStudiosUpdateRollbackResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
