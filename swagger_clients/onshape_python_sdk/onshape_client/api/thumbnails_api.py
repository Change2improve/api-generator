# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from onshape_client.api_client import ApiClient


class ThumbnailsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def delete_application_thumbnails(self, wv_char, did, wv, eid, **kwargs):  # noqa: E501
        """Delete Application Element Thumbnail  # noqa: E501

        Delete element thumbnails for an application element  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_application_thumbnails(wv_char, did, wv, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wv_char: One of w or v corresponding to whether a workspace or version was entered. (required)
        :param str did: Document ID (required)
        :param str wv: Workspace (w) or Version (v) ID (required)
        :param str eid: Element ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_application_thumbnails_with_http_info(wv_char, did, wv, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_application_thumbnails_with_http_info(wv_char, did, wv, eid, **kwargs)  # noqa: E501
            return data

    def delete_application_thumbnails_with_http_info(self, wv_char, did, wv, eid, **kwargs):  # noqa: E501
        """Delete Application Element Thumbnail  # noqa: E501

        Delete element thumbnails for an application element  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_application_thumbnails_with_http_info(wv_char, did, wv, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wv_char: One of w or v corresponding to whether a workspace or version was entered. (required)
        :param str did: Document ID (required)
        :param str wv: Workspace (w) or Version (v) ID (required)
        :param str eid: Element ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wv_char', 'did', 'wv', 'eid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_application_thumbnails" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wv_char' is set
        if ('wv_char' not in params or
                params['wv_char'] is None):
            raise ValueError("Missing the required parameter `wv_char` when calling `delete_application_thumbnails`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `delete_application_thumbnails`")  # noqa: E501
        # verify the required parameter 'wv' is set
        if ('wv' not in params or
                params['wv'] is None):
            raise ValueError("Missing the required parameter `wv` when calling `delete_application_thumbnails`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `delete_application_thumbnails`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wv_char' in params:
            path_params['wv_char'] = params['wv_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wv' in params:
            path_params['wv'] = params['wv']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/thumbnails/d/{did}/{wv_char}/{wv}/e/{eid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_configured_element_thumbnail_with_size(self, cid, sz, did, wid, eid, reject_empty, **kwargs):  # noqa: E501
        """Get Configured Element Thumbnail With Size  # noqa: E501

        Return thumbnail for a configured element, with specified size in pixels  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_configured_element_thumbnail_with_size(cid, sz, did, wid, eid, reject_empty, async=True)
        >>> result = thread.get()

        :param async bool
        :param str cid: The cache key for the requested configuration, as generated by                      BTMicroversionIdAndConfiguration.configurationToCacheKeyString (required)
        :param str sz: Requested thumbnail size, such as 300x300 (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param bool reject_empty: If true, a 404 will be returned for thumbnails that are made for                       empty elements. Clients can use this parameter to skip the display of empty thumbnails and                       display a default icon instead. Defaults to false. (required)
        :return: ThumbnailsGetConfiguredElementThumbnailWithSizeResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_configured_element_thumbnail_with_size_with_http_info(cid, sz, did, wid, eid, reject_empty, **kwargs)  # noqa: E501
        else:
            (data) = self.get_configured_element_thumbnail_with_size_with_http_info(cid, sz, did, wid, eid, reject_empty, **kwargs)  # noqa: E501
            return data

    def get_configured_element_thumbnail_with_size_with_http_info(self, cid, sz, did, wid, eid, reject_empty, **kwargs):  # noqa: E501
        """Get Configured Element Thumbnail With Size  # noqa: E501

        Return thumbnail for a configured element, with specified size in pixels  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_configured_element_thumbnail_with_size_with_http_info(cid, sz, did, wid, eid, reject_empty, async=True)
        >>> result = thread.get()

        :param async bool
        :param str cid: The cache key for the requested configuration, as generated by                      BTMicroversionIdAndConfiguration.configurationToCacheKeyString (required)
        :param str sz: Requested thumbnail size, such as 300x300 (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param bool reject_empty: If true, a 404 will be returned for thumbnails that are made for                       empty elements. Clients can use this parameter to skip the display of empty thumbnails and                       display a default icon instead. Defaults to false. (required)
        :return: ThumbnailsGetConfiguredElementThumbnailWithSizeResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cid', 'sz', 'did', 'wid', 'eid', 'reject_empty']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_configured_element_thumbnail_with_size" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cid' is set
        if ('cid' not in params or
                params['cid'] is None):
            raise ValueError("Missing the required parameter `cid` when calling `get_configured_element_thumbnail_with_size`")  # noqa: E501
        # verify the required parameter 'sz' is set
        if ('sz' not in params or
                params['sz'] is None):
            raise ValueError("Missing the required parameter `sz` when calling `get_configured_element_thumbnail_with_size`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_configured_element_thumbnail_with_size`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `get_configured_element_thumbnail_with_size`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_configured_element_thumbnail_with_size`")  # noqa: E501
        # verify the required parameter 'reject_empty' is set
        if ('reject_empty' not in params or
                params['reject_empty'] is None):
            raise ValueError("Missing the required parameter `reject_empty` when calling `get_configured_element_thumbnail_with_size`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cid' in params:
            path_params['cid'] = params['cid']  # noqa: E501
        if 'sz' in params:
            path_params['sz'] = params['sz']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'reject_empty' in params:
            query_params.append(('rejectEmpty', params['reject_empty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/thumbnails/d/{did}/w/{wid}/e/{eid}/c/{cid}/s/{sz}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThumbnailsGetConfiguredElementThumbnailWithSizeResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_document_thumbnail(self, did, wid, **kwargs):  # noqa: E501
        """Get Document Thumbnail Info  # noqa: E501

        Get the thumbnail for a document in a specific workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_document_thumbnail(did, wid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :return: ThumbnailsGetDocumentThumbnailResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_document_thumbnail_with_http_info(did, wid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_document_thumbnail_with_http_info(did, wid, **kwargs)  # noqa: E501
            return data

    def get_document_thumbnail_with_http_info(self, did, wid, **kwargs):  # noqa: E501
        """Get Document Thumbnail Info  # noqa: E501

        Get the thumbnail for a document in a specific workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_document_thumbnail_with_http_info(did, wid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :return: ThumbnailsGetDocumentThumbnailResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'wid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document_thumbnail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_document_thumbnail`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `get_document_thumbnail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/thumbnails/d/{did}/w/{wid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThumbnailsGetDocumentThumbnailResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_document_thumbnail_with_size(self, sz, did, wid, **kwargs):  # noqa: E501
        """Get Thumbnail With Size  # noqa: E501

        Return thumbnail for document, with specified size in pixels  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_document_thumbnail_with_size(sz, did, wid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str sz: Requested thumbnail size, such as 300x300 (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :return: ThumbnailsGetDocumentThumbnailWithSizeResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_document_thumbnail_with_size_with_http_info(sz, did, wid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_document_thumbnail_with_size_with_http_info(sz, did, wid, **kwargs)  # noqa: E501
            return data

    def get_document_thumbnail_with_size_with_http_info(self, sz, did, wid, **kwargs):  # noqa: E501
        """Get Thumbnail With Size  # noqa: E501

        Return thumbnail for document, with specified size in pixels  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_document_thumbnail_with_size_with_http_info(sz, did, wid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str sz: Requested thumbnail size, such as 300x300 (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :return: ThumbnailsGetDocumentThumbnailWithSizeResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sz', 'did', 'wid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_document_thumbnail_with_size" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sz' is set
        if ('sz' not in params or
                params['sz'] is None):
            raise ValueError("Missing the required parameter `sz` when calling `get_document_thumbnail_with_size`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_document_thumbnail_with_size`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `get_document_thumbnail_with_size`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sz' in params:
            path_params['sz'] = params['sz']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/thumbnails/d/{did}/w/{wid}/s/{sz}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThumbnailsGetDocumentThumbnailWithSizeResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_element_thumbnail(self, wv_char, did, wv, eid, **kwargs):  # noqa: E501
        """Get Element Thumbnail Info  # noqa: E501

        Return thumbnail info for an element tab  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_thumbnail(wv_char, did, wv, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wv_char: One of w or v corresponding to whether a workspace or version was entered. (required)
        :param str did: Document ID (required)
        :param str wv: Workspace (w) or Version (v) ID (required)
        :param str eid: Element ID (required)
        :return: ThumbnailsGetElementThumbnailResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_element_thumbnail_with_http_info(wv_char, did, wv, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_element_thumbnail_with_http_info(wv_char, did, wv, eid, **kwargs)  # noqa: E501
            return data

    def get_element_thumbnail_with_http_info(self, wv_char, did, wv, eid, **kwargs):  # noqa: E501
        """Get Element Thumbnail Info  # noqa: E501

        Return thumbnail info for an element tab  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_thumbnail_with_http_info(wv_char, did, wv, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wv_char: One of w or v corresponding to whether a workspace or version was entered. (required)
        :param str did: Document ID (required)
        :param str wv: Workspace (w) or Version (v) ID (required)
        :param str eid: Element ID (required)
        :return: ThumbnailsGetElementThumbnailResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wv_char', 'did', 'wv', 'eid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_element_thumbnail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wv_char' is set
        if ('wv_char' not in params or
                params['wv_char'] is None):
            raise ValueError("Missing the required parameter `wv_char` when calling `get_element_thumbnail`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_element_thumbnail`")  # noqa: E501
        # verify the required parameter 'wv' is set
        if ('wv' not in params or
                params['wv'] is None):
            raise ValueError("Missing the required parameter `wv` when calling `get_element_thumbnail`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_element_thumbnail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wv_char' in params:
            path_params['wv_char'] = params['wv_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wv' in params:
            path_params['wv'] = params['wv']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/thumbnails/d/{did}/{wv_char}/{wv}/e/{eid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThumbnailsGetElementThumbnailResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_element_thumbnail_with_size(self, sz, did, wid, eid, reject_empty, **kwargs):  # noqa: E501
        """Get Element Thumbnail With Size  # noqa: E501

        Return thumbnail for element, with specified size in pixels  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_thumbnail_with_size(sz, did, wid, eid, reject_empty, async=True)
        >>> result = thread.get()

        :param async bool
        :param str sz: Requested thumbnail size, such as 300x300 (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param bool reject_empty: If true, a 404 will be returned for thumbnails that are made for                       empty elements. Clients can use this parameter to skip the display of empty thumbnails and                       display a default icon instead. Defaults to false. (required)
        :return: ThumbnailsGetElementThumbnailWithSizeResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_element_thumbnail_with_size_with_http_info(sz, did, wid, eid, reject_empty, **kwargs)  # noqa: E501
        else:
            (data) = self.get_element_thumbnail_with_size_with_http_info(sz, did, wid, eid, reject_empty, **kwargs)  # noqa: E501
            return data

    def get_element_thumbnail_with_size_with_http_info(self, sz, did, wid, eid, reject_empty, **kwargs):  # noqa: E501
        """Get Element Thumbnail With Size  # noqa: E501

        Return thumbnail for element, with specified size in pixels  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_element_thumbnail_with_size_with_http_info(sz, did, wid, eid, reject_empty, async=True)
        >>> result = thread.get()

        :param async bool
        :param str sz: Requested thumbnail size, such as 300x300 (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param bool reject_empty: If true, a 404 will be returned for thumbnails that are made for                       empty elements. Clients can use this parameter to skip the display of empty thumbnails and                       display a default icon instead. Defaults to false. (required)
        :return: ThumbnailsGetElementThumbnailWithSizeResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sz', 'did', 'wid', 'eid', 'reject_empty']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_element_thumbnail_with_size" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sz' is set
        if ('sz' not in params or
                params['sz'] is None):
            raise ValueError("Missing the required parameter `sz` when calling `get_element_thumbnail_with_size`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_element_thumbnail_with_size`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `get_element_thumbnail_with_size`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_element_thumbnail_with_size`")  # noqa: E501
        # verify the required parameter 'reject_empty' is set
        if ('reject_empty' not in params or
                params['reject_empty'] is None):
            raise ValueError("Missing the required parameter `reject_empty` when calling `get_element_thumbnail_with_size`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sz' in params:
            path_params['sz'] = params['sz']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'reject_empty' in params:
            query_params.append(('rejectEmpty', params['reject_empty']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/thumbnails/d/{did}/w/{wid}/e/{eid}/s/{sz}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThumbnailsGetElementThumbnailWithSizeResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_thumbnail_for_document(self, did, **kwargs):  # noqa: E501
        """Get Default Workspace Thumbnail Info  # noqa: E501

        Get thumbnail info for document in default workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_thumbnail_for_document(did, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :return: ThumbnailsGetThumbnailForDocumentResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_thumbnail_for_document_with_http_info(did, **kwargs)  # noqa: E501
        else:
            (data) = self.get_thumbnail_for_document_with_http_info(did, **kwargs)  # noqa: E501
            return data

    def get_thumbnail_for_document_with_http_info(self, did, **kwargs):  # noqa: E501
        """Get Default Workspace Thumbnail Info  # noqa: E501

        Get thumbnail info for document in default workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_thumbnail_for_document_with_http_info(did, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :return: ThumbnailsGetThumbnailForDocumentResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_thumbnail_for_document" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_thumbnail_for_document`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/thumbnails/d/{did}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThumbnailsGetThumbnailForDocumentResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_thumbnail_for_document_and_version(self, did, vid, **kwargs):  # noqa: E501
        """Get Thumbnail Info For Document Version  # noqa: E501

        Return thumbnail info for document at specified version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_thumbnail_for_document_and_version(did, vid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str vid: Version ID (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: ThumbnailsGetThumbnailForDocumentAndVersionResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_thumbnail_for_document_and_version_with_http_info(did, vid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_thumbnail_for_document_and_version_with_http_info(did, vid, **kwargs)  # noqa: E501
            return data

    def get_thumbnail_for_document_and_version_with_http_info(self, did, vid, **kwargs):  # noqa: E501
        """Get Thumbnail Info For Document Version  # noqa: E501

        Return thumbnail info for document at specified version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_thumbnail_for_document_and_version_with_http_info(did, vid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str vid: Version ID (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: ThumbnailsGetThumbnailForDocumentAndVersionResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'vid', 'link_document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_thumbnail_for_document_and_version" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_thumbnail_for_document_and_version`")  # noqa: E501
        # verify the required parameter 'vid' is set
        if ('vid' not in params or
                params['vid'] is None):
            raise ValueError("Missing the required parameter `vid` when calling `get_thumbnail_for_document_and_version`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'vid' in params:
            path_params['vid'] = params['vid']  # noqa: E501

        query_params = []
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/thumbnails/d/{did}/v/{vid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='ThumbnailsGetThumbnailForDocumentAndVersionResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def set_application_element_thumbnail(self, wv_char, did, wv, eid, **kwargs):  # noqa: E501
        """Set Application Element Thumbnail  # noqa: E501

        Set element thumbnails for an application element  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_application_element_thumbnail(wv_char, did, wv, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wv_char: One of w or v corresponding to whether a workspace or version was entered. (required)
        :param str did: Document ID (required)
        :param str wv: Workspace (w) or Version (v) ID (required)
        :param str eid: Element ID (required)
        :param ThumbnailsSetApplicationElementThumbnailBody body: The JSON request body.
        :param bool overwrite: Set to true when a different thumbnail needs to be made the primary thumbnail or secondary thumbnails need to be updated. This deletes all associated thumbnails and then sets the new thumbnails.                                                     Ensure that the primary and all non-primary thumbnails information are specified.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.set_application_element_thumbnail_with_http_info(wv_char, did, wv, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.set_application_element_thumbnail_with_http_info(wv_char, did, wv, eid, **kwargs)  # noqa: E501
            return data

    def set_application_element_thumbnail_with_http_info(self, wv_char, did, wv, eid, **kwargs):  # noqa: E501
        """Set Application Element Thumbnail  # noqa: E501

        Set element thumbnails for an application element  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.set_application_element_thumbnail_with_http_info(wv_char, did, wv, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wv_char: One of w or v corresponding to whether a workspace or version was entered. (required)
        :param str did: Document ID (required)
        :param str wv: Workspace (w) or Version (v) ID (required)
        :param str eid: Element ID (required)
        :param ThumbnailsSetApplicationElementThumbnailBody body: The JSON request body.
        :param bool overwrite: Set to true when a different thumbnail needs to be made the primary thumbnail or secondary thumbnails need to be updated. This deletes all associated thumbnails and then sets the new thumbnails.                                                     Ensure that the primary and all non-primary thumbnails information are specified.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wv_char', 'did', 'wv', 'eid', 'body', 'overwrite']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method set_application_element_thumbnail" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wv_char' is set
        if ('wv_char' not in params or
                params['wv_char'] is None):
            raise ValueError("Missing the required parameter `wv_char` when calling `set_application_element_thumbnail`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `set_application_element_thumbnail`")  # noqa: E501
        # verify the required parameter 'wv' is set
        if ('wv' not in params or
                params['wv'] is None):
            raise ValueError("Missing the required parameter `wv` when calling `set_application_element_thumbnail`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `set_application_element_thumbnail`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wv_char' in params:
            path_params['wv_char'] = params['wv_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wv' in params:
            path_params['wv'] = params['wv']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'overwrite' in params:
            query_params.append(('overwrite', params['overwrite']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/thumbnails/d/{did}/{wv_char}/{wv}/e/{eid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
