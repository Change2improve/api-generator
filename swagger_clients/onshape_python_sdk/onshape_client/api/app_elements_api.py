# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from onshape_client.api_client import ApiClient


class AppElementsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def commit_transaction(self, tid, did, wid, eid, **kwargs):  # noqa: E501
        """Commit Transaction  # noqa: E501

        Commits a transaction (merges a microbranch)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.commit_transaction(tid, did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str tid: Id of the transaction to commit (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param AppElementsCommitTransactionBody body: The JSON request body.
        :return: AppElementsCommitTransactionResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.commit_transaction_with_http_info(tid, did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.commit_transaction_with_http_info(tid, did, wid, eid, **kwargs)  # noqa: E501
            return data

    def commit_transaction_with_http_info(self, tid, did, wid, eid, **kwargs):  # noqa: E501
        """Commit Transaction  # noqa: E501

        Commits a transaction (merges a microbranch)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.commit_transaction_with_http_info(tid, did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str tid: Id of the transaction to commit (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param AppElementsCommitTransactionBody body: The JSON request body.
        :return: AppElementsCommitTransactionResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tid', 'did', 'wid', 'eid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method commit_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tid' is set
        if ('tid' not in params or
                params['tid'] is None):
            raise ValueError("Missing the required parameter `tid` when calling `commit_transaction`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `commit_transaction`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `commit_transaction`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `commit_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tid' in params:
            path_params['tid'] = params['tid']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/appelements/d/{did}/w/{wid}/e/{eid}/transactions/{tid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppElementsCommitTransactionResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_element(self, did, wid, **kwargs):  # noqa: E501
        """Create Element  # noqa: E501

        Create an app element  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_element(did, wid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param AppElementsCreateElementBody body: The JSON request body.
        :return: AppElementsCreateElementResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_element_with_http_info(did, wid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_element_with_http_info(did, wid, **kwargs)  # noqa: E501
            return data

    def create_element_with_http_info(self, did, wid, **kwargs):  # noqa: E501
        """Create Element  # noqa: E501

        Create an app element  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_element_with_http_info(did, wid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param AppElementsCreateElementBody body: The JSON request body.
        :return: AppElementsCreateElementResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'wid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `create_element`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `create_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/appelements/d/{did}/w/{wid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppElementsCreateElementResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_reference(self, did, wid, eid, **kwargs):  # noqa: E501
        """Create Reference  # noqa: E501

        Create an app element reference  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_reference(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param AppElementsCreateReferenceBody body: The JSON request body.
        :return: AppElementsCreateReferenceResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_reference_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_reference_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
            return data

    def create_reference_with_http_info(self, did, wid, eid, **kwargs):  # noqa: E501
        """Create Reference  # noqa: E501

        Create an app element reference  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_reference_with_http_info(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param AppElementsCreateReferenceBody body: The JSON request body.
        :return: AppElementsCreateReferenceResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'wid', 'eid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `create_reference`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `create_reference`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `create_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/appelements/d/{did}/w/{wid}/e/{eid}/references', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppElementsCreateReferenceResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_content(self, wvm_char, sid, did, wvm, eid, **kwargs):  # noqa: E501
        """Delete a Sub-element  # noqa: E501

        Deletes a sub-element of an application element  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_content(wvm_char, sid, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str sid: The id of the subelement to be deleted. URL-encode if needed (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str parent_change_id: Id of the last change made by this application to this element
        :param str transaction_id: Id of the transaction to commit
        :param str description: Description of the deletion operation for history
        :return: AppElementsDeleteContentResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_content_with_http_info(wvm_char, sid, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_content_with_http_info(wvm_char, sid, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def delete_content_with_http_info(self, wvm_char, sid, did, wvm, eid, **kwargs):  # noqa: E501
        """Delete a Sub-element  # noqa: E501

        Deletes a sub-element of an application element  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_content_with_http_info(wvm_char, sid, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str sid: The id of the subelement to be deleted. URL-encode if needed (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str parent_change_id: Id of the last change made by this application to this element
        :param str transaction_id: Id of the transaction to commit
        :param str description: Description of the deletion operation for history
        :return: AppElementsDeleteContentResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'sid', 'did', 'wvm', 'eid', 'parent_change_id', 'transaction_id', 'description']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `delete_content`")  # noqa: E501
        # verify the required parameter 'sid' is set
        if ('sid' not in params or
                params['sid'] is None):
            raise ValueError("Missing the required parameter `sid` when calling `delete_content`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `delete_content`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `delete_content`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `delete_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'sid' in params:
            path_params['sid'] = params['sid']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'parent_change_id' in params:
            query_params.append(('parentChangeId', params['parent_change_id']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transactionId', params['transaction_id']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/appelements/d/{did}/{wvm_char}/{wvm}/e/{eid}/content/subelements/{sid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppElementsDeleteContentResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_reference(self, rid, did, wid, eid, **kwargs):  # noqa: E501
        """Delete Reference  # noqa: E501

        Delete an app element reference  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_reference(rid, did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rid: The id of the reference to be deleted (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param str parent_change_id: Id of the last change made by this application to this element
        :param str transaction_id: Id of the transaction to commit
        :param str description: Description of the deletion operation for history
        :return: AppElementsDeleteReferenceResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_reference_with_http_info(rid, did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_reference_with_http_info(rid, did, wid, eid, **kwargs)  # noqa: E501
            return data

    def delete_reference_with_http_info(self, rid, did, wid, eid, **kwargs):  # noqa: E501
        """Delete Reference  # noqa: E501

        Delete an app element reference  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_reference_with_http_info(rid, did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rid: The id of the reference to be deleted (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param str parent_change_id: Id of the last change made by this application to this element
        :param str transaction_id: Id of the transaction to commit
        :param str description: Description of the deletion operation for history
        :return: AppElementsDeleteReferenceResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rid', 'did', 'wid', 'eid', 'parent_change_id', 'transaction_id', 'description']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rid' is set
        if ('rid' not in params or
                params['rid'] is None):
            raise ValueError("Missing the required parameter `rid` when calling `delete_reference`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `delete_reference`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `delete_reference`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `delete_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rid' in params:
            path_params['rid'] = params['rid']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'parent_change_id' in params:
            query_params.append(('parentChangeId', params['parent_change_id']))  # noqa: E501
        if 'transaction_id' in params:
            query_params.append(('transactionId', params['transaction_id']))  # noqa: E501
        if 'description' in params:
            query_params.append(('description', params['description']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/appelements/d/{did}/w/{wid}/e/{eid}/references/{rid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppElementsDeleteReferenceResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_history_by_workspace(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get History  # noqa: E501

        Get change history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_history_by_workspace(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :return: AppElementsGetHistoryByWorkspaceResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_history_by_workspace_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_history_by_workspace_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_history_by_workspace_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get History  # noqa: E501

        Get change history  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_history_by_workspace_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :return: AppElementsGetHistoryByWorkspaceResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_history_by_workspace" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_history_by_workspace`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_history_by_workspace`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_history_by_workspace`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_history_by_workspace`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/appelements/d/{did}/{wvm_char}/{wvm}/e/{eid}/content/history', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppElementsGetHistoryByWorkspaceResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sub_element_content(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Content  # noqa: E501

        Get content of sub-elements in a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_sub_element_content(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str transaction_id: Id of the transaction in which the ids should be retrieved.   Valid only when used with a workspaceId
        :param str change_id: Id of the change at which the ids should be retrieved.  If not   specified, defaults to the latest change in the workspace, version or microversion.  May be specified only   when used with a workspaceId
        :param str base_change_id: Id of a change made prior to the specified or implied changeId.   If specified, only changes made after the base changeId are returned.
        :param str subelement_id: Id of a sub-element to use as a restriction for returned data
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: AppElementsGetSubElementContentResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_sub_element_content_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sub_element_content_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_sub_element_content_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Content  # noqa: E501

        Get content of sub-elements in a workspace  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_sub_element_content_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str transaction_id: Id of the transaction in which the ids should be retrieved.   Valid only when used with a workspaceId
        :param str change_id: Id of the change at which the ids should be retrieved.  If not   specified, defaults to the latest change in the workspace, version or microversion.  May be specified only   when used with a workspaceId
        :param str base_change_id: Id of a change made prior to the specified or implied changeId.   If specified, only changes made after the base changeId are returned.
        :param str subelement_id: Id of a sub-element to use as a restriction for returned data
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: AppElementsGetSubElementContentResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'transaction_id', 'change_id', 'base_change_id', 'subelement_id', 'link_document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sub_element_content" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_sub_element_content`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_sub_element_content`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_sub_element_content`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_sub_element_content`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'transaction_id' in params:
            query_params.append(('transactionId', params['transaction_id']))  # noqa: E501
        if 'change_id' in params:
            query_params.append(('changeId', params['change_id']))  # noqa: E501
        if 'base_change_id' in params:
            query_params.append(('baseChangeId', params['base_change_id']))  # noqa: E501
        if 'subelement_id' in params:
            query_params.append(('subelementId', params['subelement_id']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/appelements/d/{did}/{wvm_char}/{wvm}/e/{eid}/content', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppElementsGetSubElementContentResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_sub_element_ids(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Sub-element IDs  # noqa: E501

        Gets a list of all sub-element IDs of a workspace/microversion/version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_sub_element_ids(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str transaction_id: Id of the transaction in which the ids should be retrieved   Valid only when used with a workspaceId
        :param str change_id: Id of the change at which the ids should be retrieved   Valid only when used with a workspaceId
        :return: AppElementsGetSubElementIdsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_sub_element_ids_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_sub_element_ids_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_sub_element_ids_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Sub-element IDs  # noqa: E501

        Gets a list of all sub-element IDs of a workspace/microversion/version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_sub_element_ids_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str transaction_id: Id of the transaction in which the ids should be retrieved   Valid only when used with a workspaceId
        :param str change_id: Id of the change at which the ids should be retrieved   Valid only when used with a workspaceId
        :return: AppElementsGetSubElementIdsResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'transaction_id', 'change_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_sub_element_ids" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_sub_element_ids`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_sub_element_ids`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_sub_element_ids`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_sub_element_ids`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'transaction_id' in params:
            query_params.append(('transactionId', params['transaction_id']))  # noqa: E501
        if 'change_id' in params:
            query_params.append(('changeId', params['change_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/appelements/d/{did}/{wvm_char}/{wvm}/e/{eid}/content/ids/', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppElementsGetSubElementIdsResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def resolve_reference(self, wvm_char, rid, did, wvm, eid, **kwargs):  # noqa: E501
        """Resolve Reference  # noqa: E501

        Resolve an app element reference  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resolve_reference(wvm_char, rid, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str rid: The id of the reference to read (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str transaction_id: Id of the transaction in which the reference should be retrieved           Valid only when used with a workspaceId
        :param str parent_change_id: Id of the change at which the reference should be retrieved           Valid only when used with a workspaceId
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: AppElementsResolveReferenceResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.resolve_reference_with_http_info(wvm_char, rid, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.resolve_reference_with_http_info(wvm_char, rid, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def resolve_reference_with_http_info(self, wvm_char, rid, did, wvm, eid, **kwargs):  # noqa: E501
        """Resolve Reference  # noqa: E501

        Resolve an app element reference  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.resolve_reference_with_http_info(wvm_char, rid, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str rid: The id of the reference to read (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str transaction_id: Id of the transaction in which the reference should be retrieved           Valid only when used with a workspaceId
        :param str parent_change_id: Id of the change at which the reference should be retrieved           Valid only when used with a workspaceId
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: AppElementsResolveReferenceResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'rid', 'did', 'wvm', 'eid', 'transaction_id', 'parent_change_id', 'link_document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method resolve_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `resolve_reference`")  # noqa: E501
        # verify the required parameter 'rid' is set
        if ('rid' not in params or
                params['rid'] is None):
            raise ValueError("Missing the required parameter `rid` when calling `resolve_reference`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `resolve_reference`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `resolve_reference`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `resolve_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'rid' in params:
            path_params['rid'] = params['rid']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'transaction_id' in params:
            query_params.append(('transactionId', params['transaction_id']))  # noqa: E501
        if 'parent_change_id' in params:
            query_params.append(('parentChangeId', params['parent_change_id']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/appelements/d/{did}/{wvm_char}/{wvm}/e/{eid}/references/{rid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppElementsResolveReferenceResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def start_transaction(self, did, wid, eid, **kwargs):  # noqa: E501
        """Start Transaction  # noqa: E501

        Start a transaction (creates a microbranch)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_transaction(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param AppElementsStartTransactionBody body: The JSON request body.
        :return: AppElementsStartTransactionResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.start_transaction_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.start_transaction_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
            return data

    def start_transaction_with_http_info(self, did, wid, eid, **kwargs):  # noqa: E501
        """Start Transaction  # noqa: E501

        Start a transaction (creates a microbranch)  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.start_transaction_with_http_info(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param AppElementsStartTransactionBody body: The JSON request body.
        :return: AppElementsStartTransactionResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'wid', 'eid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method start_transaction" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `start_transaction`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `start_transaction`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `start_transaction`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/appelements/d/{did}/w/{wid}/e/{eid}/transactions/', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppElementsStartTransactionResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_element(self, did, wid, eid, **kwargs):  # noqa: E501
        """Update Element  # noqa: E501

        Update an app element  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_element(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param AppElementsUpdateElementBody body: The JSON request body.
        :return: AppElementsUpdateElementResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_element_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_element_with_http_info(did, wid, eid, **kwargs)  # noqa: E501
            return data

    def update_element_with_http_info(self, did, wid, eid, **kwargs):  # noqa: E501
        """Update Element  # noqa: E501

        Update an app element  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_element_with_http_info(did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param AppElementsUpdateElementBody body: The JSON request body.
        :return: AppElementsUpdateElementResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'wid', 'eid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_element" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `update_element`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `update_element`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `update_element`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/appelements/d/{did}/w/{wid}/e/{eid}/content', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppElementsUpdateElementResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_reference(self, rid, did, wid, eid, **kwargs):  # noqa: E501
        """Update Reference  # noqa: E501

        Update an app element reference  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_reference(rid, did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rid: The id of a reference to update (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param AppElementsUpdateReferenceBody body: The JSON request body.
        :return: AppElementsUpdateReferenceResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_reference_with_http_info(rid, did, wid, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_reference_with_http_info(rid, did, wid, eid, **kwargs)  # noqa: E501
            return data

    def update_reference_with_http_info(self, rid, did, wid, eid, **kwargs):  # noqa: E501
        """Update Reference  # noqa: E501

        Update an app element reference  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_reference_with_http_info(rid, did, wid, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rid: The id of a reference to update (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str eid: Element ID (required)
        :param AppElementsUpdateReferenceBody body: The JSON request body.
        :return: AppElementsUpdateReferenceResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rid', 'did', 'wid', 'eid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_reference" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rid' is set
        if ('rid' not in params or
                params['rid'] is None):
            raise ValueError("Missing the required parameter `rid` when calling `update_reference`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `update_reference`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `update_reference`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `update_reference`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rid' in params:
            path_params['rid'] = params['rid']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/appelements/d/{did}/w/{wid}/e/{eid}/references/{rid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='AppElementsUpdateReferenceResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
