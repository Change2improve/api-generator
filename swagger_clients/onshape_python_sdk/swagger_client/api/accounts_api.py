# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class AccountsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def cancel_purchase_new_accounts(self, pid, aid, **kwargs):  # noqa: E501
        """Cancel Recurring Subscription  # noqa: E501

        Cancel a recurring subscription. This API is can be used in a context of OAuth-enabled                 application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cancel_purchase_new_accounts(pid, aid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str pid: Purchase id (required)
        :param str aid: account id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.cancel_purchase_new_accounts_with_http_info(pid, aid, **kwargs)  # noqa: E501
        else:
            (data) = self.cancel_purchase_new_accounts_with_http_info(pid, aid, **kwargs)  # noqa: E501
            return data

    def cancel_purchase_new_accounts_with_http_info(self, pid, aid, **kwargs):  # noqa: E501
        """Cancel Recurring Subscription  # noqa: E501

        Cancel a recurring subscription. This API is can be used in a context of OAuth-enabled                 application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.cancel_purchase_new_accounts_with_http_info(pid, aid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str pid: Purchase id (required)
        :param str aid: account id (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pid', 'aid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method cancel_purchase_new_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `cancel_purchase_new_accounts`")  # noqa: E501
        # verify the required parameter 'aid' is set
        if ('aid' not in params or
                params['aid'] is None):
            raise ValueError("Missing the required parameter `aid` when calling `cancel_purchase_new_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501
        if 'aid' in params:
            path_params['aid'] = params['aid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/{aid}/purchases/{pid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def consume_purchase_accounts(self, pid, **kwargs):  # noqa: E501
        """Mark Purchase Consumed For User  # noqa: E501

        Mark a purchase as consumed for the specified user. This API is expected to be used in a context                 of OAuth-enabled application. Preliminary version, expected to be changed soon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.consume_purchase_accounts(pid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str pid: Purchase id (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.consume_purchase_accounts_with_http_info(pid, **kwargs)  # noqa: E501
        else:
            (data) = self.consume_purchase_accounts_with_http_info(pid, **kwargs)  # noqa: E501
            return data

    def consume_purchase_accounts_with_http_info(self, pid, **kwargs):  # noqa: E501
        """Mark Purchase Consumed For User  # noqa: E501

        Mark a purchase as consumed for the specified user. This API is expected to be used in a context                 of OAuth-enabled application. Preliminary version, expected to be changed soon.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.consume_purchase_accounts_with_http_info(pid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str pid: Purchase id (required)
        :return: InlineResponse2002
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method consume_purchase_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `consume_purchase_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/purchases/{pid}/consume', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2002',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_plan_purchases_accounts(self, plan_id, **kwargs):  # noqa: E501
        """Get Plan Purchases  # noqa: E501

        Return a list of purchases associated with a plan, along with user information for the                 subscribers involved. Information returned depends on whether the app associated with the plan                 has the OAuth2ReadPII scope. This API can only be called by an admin of the app associated with                 the plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_plan_purchases_accounts(plan_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str plan_id: Plan Id (required)
        :param float offset: Where to begin search results
        :param float limit: Number of results to return per page (max is 20)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_plan_purchases_accounts_with_http_info(plan_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_plan_purchases_accounts_with_http_info(plan_id, **kwargs)  # noqa: E501
            return data

    def get_plan_purchases_accounts_with_http_info(self, plan_id, **kwargs):  # noqa: E501
        """Get Plan Purchases  # noqa: E501

        Return a list of purchases associated with a plan, along with user information for the                 subscribers involved. Information returned depends on whether the app associated with the plan                 has the OAuth2ReadPII scope. This API can only be called by an admin of the app associated with                 the plan.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_plan_purchases_accounts_with_http_info(plan_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str plan_id: Plan Id (required)
        :param float offset: Where to begin search results
        :param float limit: Number of results to return per page (max is 20)
        :return: InlineResponse200
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['plan_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_plan_purchases_accounts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'plan_id' is set
        if ('plan_id' not in params or
                params['plan_id'] is None):
            raise ValueError("Missing the required parameter `plan_id` when calling `get_plan_purchases_accounts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'plan_id' in params:
            path_params['planId'] = params['plan_id']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/plans/{planId}/purchases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_purchases_accounts(self, **kwargs):  # noqa: E501
        """Get User&#39;s Appstore Purchases  # noqa: E501

        Returns list of application purchases for the current user. This API is expected to be used in a                 context of OAuth-enabled application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_purchases_accounts(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_purchases_accounts_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_purchases_accounts_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_purchases_accounts_with_http_info(self, **kwargs):  # noqa: E501
        """Get User&#39;s Appstore Purchases  # noqa: E501

        Returns list of application purchases for the current user. This API is expected to be used in a                 context of OAuth-enabled application.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_purchases_accounts_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse2001
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_purchases_accounts" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/accounts/purchases', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse2001',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
