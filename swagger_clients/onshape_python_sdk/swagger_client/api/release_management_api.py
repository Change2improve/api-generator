# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class ReleaseManagementApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_obsoletion_package_release_management(self, wfid, revision_id, **kwargs):  # noqa: E501
        """Create obsoletion package  # noqa: E501

        Create an obsoletion package to make an existing revision obsolete. Once a release package has                 been successfully created use the updateReleasePackage to transition it to desired state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_obsoletion_package_release_management(wfid, revision_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wfid: ID of obsoletion workflow as returned by getCompanyReleaseWorkflow (required)
        :param str revision_id: ID of revision to be obsoleted as returned by           getRevisionHistoryInCompany (required)
        :return: InlineResponse20091
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_obsoletion_package_release_management_with_http_info(wfid, revision_id, **kwargs)  # noqa: E501
        else:
            (data) = self.create_obsoletion_package_release_management_with_http_info(wfid, revision_id, **kwargs)  # noqa: E501
            return data

    def create_obsoletion_package_release_management_with_http_info(self, wfid, revision_id, **kwargs):  # noqa: E501
        """Create obsoletion package  # noqa: E501

        Create an obsoletion package to make an existing revision obsolete. Once a release package has                 been successfully created use the updateReleasePackage to transition it to desired state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_obsoletion_package_release_management_with_http_info(wfid, revision_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wfid: ID of obsoletion workflow as returned by getCompanyReleaseWorkflow (required)
        :param str revision_id: ID of revision to be obsoleted as returned by           getRevisionHistoryInCompany (required)
        :return: InlineResponse20091
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wfid', 'revision_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_obsoletion_package_release_management" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wfid' is set
        if ('wfid' not in params or
                params['wfid'] is None):
            raise ValueError("Missing the required parameter `wfid` when calling `create_obsoletion_package_release_management`")  # noqa: E501
        # verify the required parameter 'revision_id' is set
        if ('revision_id' not in params or
                params['revision_id'] is None):
            raise ValueError("Missing the required parameter `revision_id` when calling `create_obsoletion_package_release_management`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wfid' in params:
            path_params['wfid'] = params['wfid']  # noqa: E501

        query_params = []
        if 'revision_id' in params:
            query_params.append(('revisionId', params['revision_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/releasepackages/obsoletion/{wfid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20091',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def create_release_package_release_management(self, wfid, **kwargs):  # noqa: E501
        """Create release package  # noqa: E501

        Create a new release package to release one or more items. All revisionable items must be from                 the same document. Once a release package has been successfully created use the                 updateReleasePackage to update all desired item/package properties and transition it to desired                 state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_release_package_release_management(wfid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wfid: ID of release workflow as returned by getCompanyReleaseWorkflow (required)
        :param Body43 body: The JSON request body.
        :return: InlineResponse20092
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_release_package_release_management_with_http_info(wfid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_release_package_release_management_with_http_info(wfid, **kwargs)  # noqa: E501
            return data

    def create_release_package_release_management_with_http_info(self, wfid, **kwargs):  # noqa: E501
        """Create release package  # noqa: E501

        Create a new release package to release one or more items. All revisionable items must be from                 the same document. Once a release package has been successfully created use the                 updateReleasePackage to update all desired item/package properties and transition it to desired                 state.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_release_package_release_management_with_http_info(wfid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wfid: ID of release workflow as returned by getCompanyReleaseWorkflow (required)
        :param Body43 body: The JSON request body.
        :return: InlineResponse20092
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wfid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_release_package_release_management" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wfid' is set
        if ('wfid' not in params or
                params['wfid'] is None):
            raise ValueError("Missing the required parameter `wfid` when calling `create_release_package_release_management`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wfid' in params:
            path_params['wfid'] = params['wfid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/releasepackages/release/{wfid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20092',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_company_release_workflow_release_management(self, document_id, **kwargs):  # noqa: E501
        """release workflow details  # noqa: E501

        Information about the release/obsoletion workflow in use by a company owned document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_company_release_workflow_release_management(document_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str document_id: Document ID that is owned by company for which workflow is requested. (required)
        :return: InlineResponse20094
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_company_release_workflow_release_management_with_http_info(document_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_company_release_workflow_release_management_with_http_info(document_id, **kwargs)  # noqa: E501
            return data

    def get_company_release_workflow_release_management_with_http_info(self, document_id, **kwargs):  # noqa: E501
        """release workflow details  # noqa: E501

        Information about the release/obsoletion workflow in use by a company owned document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_company_release_workflow_release_management_with_http_info(document_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str document_id: Document ID that is owned by company for which workflow is requested. (required)
        :return: InlineResponse20094
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_company_release_workflow_release_management" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'document_id' is set
        if ('document_id' not in params or
                params['document_id'] is None):
            raise ValueError("Missing the required parameter `document_id` when calling `get_company_release_workflow_release_management`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'document_id' in params:
            query_params.append(('documentId', params['document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/releasepackages/companyreleaseworkflow', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20094',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_release_package_release_management(self, rpid, **kwargs):  # noqa: E501
        """Get Release Package by id  # noqa: E501

        Returns detailed information about a release package with specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_release_package_release_management(rpid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rpid: ID of package to get detailed information for (required)
        :param bool detailed: Whether to return detailed property information about all           items.
        :return: InlineResponse20093
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_release_package_release_management_with_http_info(rpid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_release_package_release_management_with_http_info(rpid, **kwargs)  # noqa: E501
            return data

    def get_release_package_release_management_with_http_info(self, rpid, **kwargs):  # noqa: E501
        """Get Release Package by id  # noqa: E501

        Returns detailed information about a release package with specified id  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_release_package_release_management_with_http_info(rpid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rpid: ID of package to get detailed information for (required)
        :param bool detailed: Whether to return detailed property information about all           items.
        :return: InlineResponse20093
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rpid', 'detailed']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_release_package_release_management" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rpid' is set
        if ('rpid' not in params or
                params['rpid'] is None):
            raise ValueError("Missing the required parameter `rpid` when calling `get_release_package_release_management`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rpid' in params:
            path_params['rpid'] = params['rpid']  # noqa: E501

        query_params = []
        if 'detailed' in params:
            query_params.append(('detailed', params['detailed']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/releasepackages/{rpid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20093',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_release_package_release_management(self, rpid, wfaction, **kwargs):  # noqa: E501
        """Update Release Package  # noqa: E501

        Update the release/obsoletion package properties and/or item properties and transition it to                 desired state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_release_package_release_management(rpid, wfaction, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rpid: ID of package to transition (required)
        :param str wfaction: Workflow action to perform on the package. Allowed values are SUBMIT,           CREATE_AND_RELEASE, RELEASE, REJECT, OBSOLETE, DISCARD or CREATE_AND_OBSOLETE. DISCARD can only be           performed by the creator of the package and is the only transition that can be performed even if items           have errors. CREATE_AND_RELEASE and CREATE_AND_OBSOLETE can only be performed by creator if the Release           management settings for the company allow release without approvers. If Release management settings           restrict the approver list to a subset of company users, Only those users can perform transitions. (required)
        :param Body44 body: The JSON request body.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_release_package_release_management_with_http_info(rpid, wfaction, **kwargs)  # noqa: E501
        else:
            (data) = self.update_release_package_release_management_with_http_info(rpid, wfaction, **kwargs)  # noqa: E501
            return data

    def update_release_package_release_management_with_http_info(self, rpid, wfaction, **kwargs):  # noqa: E501
        """Update Release Package  # noqa: E501

        Update the release/obsoletion package properties and/or item properties and transition it to                 desired state  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_release_package_release_management_with_http_info(rpid, wfaction, async=True)
        >>> result = thread.get()

        :param async bool
        :param str rpid: ID of package to transition (required)
        :param str wfaction: Workflow action to perform on the package. Allowed values are SUBMIT,           CREATE_AND_RELEASE, RELEASE, REJECT, OBSOLETE, DISCARD or CREATE_AND_OBSOLETE. DISCARD can only be           performed by the creator of the package and is the only transition that can be performed even if items           have errors. CREATE_AND_RELEASE and CREATE_AND_OBSOLETE can only be performed by creator if the Release           management settings for the company allow release without approvers. If Release management settings           restrict the approver list to a subset of company users, Only those users can perform transitions. (required)
        :param Body44 body: The JSON request body.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['rpid', 'wfaction', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_release_package_release_management" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'rpid' is set
        if ('rpid' not in params or
                params['rpid'] is None):
            raise ValueError("Missing the required parameter `rpid` when calling `update_release_package_release_management`")  # noqa: E501
        # verify the required parameter 'wfaction' is set
        if ('wfaction' not in params or
                params['wfaction'] is None):
            raise ValueError("Missing the required parameter `wfaction` when calling `update_release_package_release_management`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'rpid' in params:
            path_params['rpid'] = params['rpid']  # noqa: E501

        query_params = []
        if 'wfaction' in params:
            query_params.append(('wfaction', params['wfaction']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/releasepackages/{rpid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
