# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class PartsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def batch_update_part_metadata_parts(self, wvm_char, did, wvm, **kwargs):  # noqa: E501
        """Update Part metadata  # noqa: E501

        Part metadata batch update  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.batch_update_part_metadata_parts(wvm_char, did, wvm, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str edit_description: Description of the update (as appear in document history)
        :param Body41 body: The JSON request body.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.batch_update_part_metadata_parts_with_http_info(wvm_char, did, wvm, **kwargs)  # noqa: E501
        else:
            (data) = self.batch_update_part_metadata_parts_with_http_info(wvm_char, did, wvm, **kwargs)  # noqa: E501
            return data

    def batch_update_part_metadata_parts_with_http_info(self, wvm_char, did, wvm, **kwargs):  # noqa: E501
        """Update Part metadata  # noqa: E501

        Part metadata batch update  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.batch_update_part_metadata_parts_with_http_info(wvm_char, did, wvm, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str edit_description: Description of the update (as appear in document history)
        :param Body41 body: The JSON request body.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'edit_description', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method batch_update_part_metadata_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `batch_update_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `batch_update_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `batch_update_part_metadata_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501

        query_params = []
        if 'edit_description' in params:
            query_params.append(('editDescription', params['edit_description']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/d/{did}/{wvm_char}/{wvm}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_parasolid_parts(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Export Part to Parasolid  # noqa: E501

        Export the part in text Parasolid format; returns a 307 redirect.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_parasolid_parts(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Part studio element ID (required)
        :param str partid: Part ID (required)
        :param float version: Parasolid version
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.export_parasolid_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
        else:
            (data) = self.export_parasolid_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
            return data

    def export_parasolid_parts_with_http_info(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Export Part to Parasolid  # noqa: E501

        Export the part in text Parasolid format; returns a 307 redirect.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_parasolid_parts_with_http_info(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Part studio element ID (required)
        :param str partid: Part ID (required)
        :param float version: Parasolid version
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'partid', 'version', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_parasolid_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `export_parasolid_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `export_parasolid_parts`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `export_parasolid_parts`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `export_parasolid_parts`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if ('partid' not in params or
                params['partid'] is None):
            raise ValueError("Missing the required parameter `partid` when calling `export_parasolid_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'partid' in params:
            path_params['partid'] = params['partid']  # noqa: E501

        query_params = []
        if 'version' in params:
            query_params.append(('version', params['version']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/d/{did}/{wvm_char}/{wvm}/e/{eid}/partid/{partid}/parasolid', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def export_stl_parts(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Export Part to STL  # noqa: E501

        Export the part in text or binary STL format; returns a 307 redirect.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_stl_parts(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Part studio element ID (required)
        :param str partid: Part ID (required)
        :param bool grouping: Whether parts should be exported as a group or individually in a           .zip file
        :param float scale: Scale for measurements
        :param str units: Name of base unit (meter, centimeter, millimeter, inch, foot, or           yard)
        :param float angle_tolerance: Angle tolerance (in radians; must be < pi/2)
        :param float chord_tolerance: Chord tolerance (in selected units)
        :param float max_facet_width: Maximum facet width (in selected units)
        :param float min_facet_width: Minimum facet width (in selected units - must be <           maximumFacetWidth)
        :param str mode: Type of file: text, binary
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.export_stl_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
        else:
            (data) = self.export_stl_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
            return data

    def export_stl_parts_with_http_info(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Export Part to STL  # noqa: E501

        Export the part in text or binary STL format; returns a 307 redirect.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.export_stl_parts_with_http_info(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Part studio element ID (required)
        :param str partid: Part ID (required)
        :param bool grouping: Whether parts should be exported as a group or individually in a           .zip file
        :param float scale: Scale for measurements
        :param str units: Name of base unit (meter, centimeter, millimeter, inch, foot, or           yard)
        :param float angle_tolerance: Angle tolerance (in radians; must be < pi/2)
        :param float chord_tolerance: Chord tolerance (in selected units)
        :param float max_facet_width: Maximum facet width (in selected units)
        :param float min_facet_width: Minimum facet width (in selected units - must be <           maximumFacetWidth)
        :param str mode: Type of file: text, binary
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: file
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'partid', 'grouping', 'scale', 'units', 'angle_tolerance', 'chord_tolerance', 'max_facet_width', 'min_facet_width', 'mode', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method export_stl_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `export_stl_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `export_stl_parts`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `export_stl_parts`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `export_stl_parts`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if ('partid' not in params or
                params['partid'] is None):
            raise ValueError("Missing the required parameter `partid` when calling `export_stl_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'partid' in params:
            path_params['partid'] = params['partid']  # noqa: E501

        query_params = []
        if 'grouping' in params:
            query_params.append(('grouping', params['grouping']))  # noqa: E501
        if 'scale' in params:
            query_params.append(('scale', params['scale']))  # noqa: E501
        if 'units' in params:
            query_params.append(('units', params['units']))  # noqa: E501
        if 'angle_tolerance' in params:
            query_params.append(('angleTolerance', params['angle_tolerance']))  # noqa: E501
        if 'chord_tolerance' in params:
            query_params.append(('chordTolerance', params['chord_tolerance']))  # noqa: E501
        if 'max_facet_width' in params:
            query_params.append(('maxFacetWidth', params['max_facet_width']))  # noqa: E501
        if 'min_facet_width' in params:
            query_params.append(('minFacetWidth', params['min_facet_width']))  # noqa: E501
        if 'mode' in params:
            query_params.append(('mode', params['mode']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/d/{did}/{wvm_char}/{wvm}/e/{eid}/partid/{partid}/stl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='file',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bend_table_parts(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Get Sheet Metal Bend Table  # noqa: E501

        Get the bend table a sheet metal part.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bend_table_parts(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: InlineResponse20086
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bend_table_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bend_table_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
            return data

    def get_bend_table_parts_with_http_info(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Get Sheet Metal Bend Table  # noqa: E501

        Get the bend table a sheet metal part.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bend_table_parts_with_http_info(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: InlineResponse20086
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'partid', 'link_document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bend_table_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_bend_table_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_bend_table_parts`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_bend_table_parts`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_bend_table_parts`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if ('partid' not in params or
                params['partid'] is None):
            raise ValueError("Missing the required parameter `partid` when calling `get_bend_table_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'partid' in params:
            path_params['partid'] = params['partid']  # noqa: E501

        query_params = []
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/d/{did}/{wvm_char}/{wvm}/e/{eid}/partid/{partid}/sheetmetal/bendtable', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20086',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_body_details_parts(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Body Details  # noqa: E501

        Get the body details of a part. All coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_body_details_parts(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: InlineResponse20082
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_body_details_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_body_details_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
            return data

    def get_body_details_parts_with_http_info(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Body Details  # noqa: E501

        Get the body details of a part. All coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_body_details_parts_with_http_info(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: InlineResponse20082
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'partid', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_body_details_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_body_details_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_body_details_parts`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_body_details_parts`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_body_details_parts`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if ('partid' not in params or
                params['partid'] is None):
            raise ValueError("Missing the required parameter `partid` when calling `get_body_details_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'partid' in params:
            path_params['partid'] = params['partid']  # noqa: E501

        query_params = []
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/d/{did}/{wvm_char}/{wvm}/e/{eid}/partid/{partid}/bodydetails', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20082',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_bounding_boxes_parts(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Bounding Boxes  # noqa: E501

        Get the bounding box of a part. All coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bounding_boxes_parts(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param bool include_hidden: Whether or not to include bounding boxes for hidden parts
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_bounding_boxes_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_bounding_boxes_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
            return data

    def get_bounding_boxes_parts_with_http_info(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Bounding Boxes  # noqa: E501

        Get the bounding box of a part. All coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_bounding_boxes_parts_with_http_info(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param bool include_hidden: Whether or not to include bounding boxes for hidden parts
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: InlineResponse20018
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'partid', 'include_hidden', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_bounding_boxes_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_bounding_boxes_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_bounding_boxes_parts`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_bounding_boxes_parts`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_bounding_boxes_parts`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if ('partid' not in params or
                params['partid'] is None):
            raise ValueError("Missing the required parameter `partid` when calling `get_bounding_boxes_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'partid' in params:
            path_params['partid'] = params['partid']  # noqa: E501

        query_params = []
        if 'include_hidden' in params:
            query_params.append(('includeHidden', params['include_hidden']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/d/{did}/{wvm_char}/{wvm}/e/{eid}/partid/{partid}/boundingboxes', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20018',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_edges_parts(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Tessellated Edges  # noqa: E501

        Get the tessellated edges of a part. The accuracy of the tessellation approximation to exact                 geometry is controlled by the angleTolerance and chordTolerance parameters. The tessellation                 points are computed close enough so that neither the angle tolerance nor the chord tolerance are                 exceeded. All coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_edges_parts(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param float angle_tolerance: Angle tolerance (in radians). This specifies the limit on the           sum of the angular deviations of a tessellation chord from the tangent vectors at two chord endpoints.           The specified value must be less than PI/2. This parameter currently has a default value chosen based           on the complexity of the parts being tessellated.
        :param float chord_tolerance: Chord tolerance (in meters). This specifies the limit on the           maximum deviation of a tessellation chord from the true edge. This parameter currently has a default           value chosen based on the size and complexity of the part being tessellated.
        :param str edge_id: Edges to tessellate (repeat query param to add more than one, i.e.           edgeId=JHK&edgeId=JHD)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: InlineResponse20090
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_edges_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_edges_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
            return data

    def get_edges_parts_with_http_info(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Tessellated Edges  # noqa: E501

        Get the tessellated edges of a part. The accuracy of the tessellation approximation to exact                 geometry is controlled by the angleTolerance and chordTolerance parameters. The tessellation                 points are computed close enough so that neither the angle tolerance nor the chord tolerance are                 exceeded. All coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_edges_parts_with_http_info(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param float angle_tolerance: Angle tolerance (in radians). This specifies the limit on the           sum of the angular deviations of a tessellation chord from the tangent vectors at two chord endpoints.           The specified value must be less than PI/2. This parameter currently has a default value chosen based           on the complexity of the parts being tessellated.
        :param float chord_tolerance: Chord tolerance (in meters). This specifies the limit on the           maximum deviation of a tessellation chord from the true edge. This parameter currently has a default           value chosen based on the size and complexity of the part being tessellated.
        :param str edge_id: Edges to tessellate (repeat query param to add more than one, i.e.           edgeId=JHK&edgeId=JHD)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: InlineResponse20090
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'partid', 'angle_tolerance', 'chord_tolerance', 'edge_id', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_edges_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_edges_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_edges_parts`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_edges_parts`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_edges_parts`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if ('partid' not in params or
                params['partid'] is None):
            raise ValueError("Missing the required parameter `partid` when calling `get_edges_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'partid' in params:
            path_params['partid'] = params['partid']  # noqa: E501

        query_params = []
        if 'angle_tolerance' in params:
            query_params.append(('angleTolerance', params['angle_tolerance']))  # noqa: E501
        if 'chord_tolerance' in params:
            query_params.append(('chordTolerance', params['chord_tolerance']))  # noqa: E501
        if 'edge_id' in params:
            query_params.append(('edgeId', params['edge_id']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/d/{did}/{wvm_char}/{wvm}/e/{eid}/partid/{partid}/tessellatededges', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20090',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_faces_parts(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Tessellated Faces  # noqa: E501

        Get the tessellated faces of a part. The accuracy of the tessellation approximation to exact                 geometry is controlled by the angleTolerance, chordTolerance and maxFacetWidth parameters. The                 tessellation points are computed close enough so that none of these parameters are exceeded. All                 coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_faces_parts(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param float angle_tolerance: Angle tolerance (in radians). This specifies the limit on the           sum of the angular deviations of a tessellation chord from the tangent vectors at two chord endpoints.           The specified value must be less than PI/2. This parameter currently has a default value chosen based           on the complexity of the part being tessellated.
        :param float chord_tolerance: Chord tolerance (in meters). This specifies the limit on the           maximum deviation of a tessellation chord from the true surface/edge. This parameter currently has a           default value chosen based on the size and complexity of the parts being tessellated.
        :param float max_facet_width: Max facet width. This specifies the limit on the size of any side           of a tessellation facet.
        :param bool output_vertex_normals: Output vertex normals
        :param bool output_facet_normals: Output facet normals
        :param bool output_texture_coordinates: Output texture coordinates
        :param bool output_index_table: Output index table
        :param str face_id: IDs of the faces to tessellate (repeat query param to add more than one,           i.e. faceId=JHK&faceId=JHD)
        :param bool output_error_faces: Whether or not to output faces that cause an error
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_faces_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_faces_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
            return data

    def get_faces_parts_with_http_info(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Tessellated Faces  # noqa: E501

        Get the tessellated faces of a part. The accuracy of the tessellation approximation to exact                 geometry is controlled by the angleTolerance, chordTolerance and maxFacetWidth parameters. The                 tessellation points are computed close enough so that none of these parameters are exceeded. All                 coordinates are in meters.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_faces_parts_with_http_info(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param float angle_tolerance: Angle tolerance (in radians). This specifies the limit on the           sum of the angular deviations of a tessellation chord from the tangent vectors at two chord endpoints.           The specified value must be less than PI/2. This parameter currently has a default value chosen based           on the complexity of the part being tessellated.
        :param float chord_tolerance: Chord tolerance (in meters). This specifies the limit on the           maximum deviation of a tessellation chord from the true surface/edge. This parameter currently has a           default value chosen based on the size and complexity of the parts being tessellated.
        :param float max_facet_width: Max facet width. This specifies the limit on the size of any side           of a tessellation facet.
        :param bool output_vertex_normals: Output vertex normals
        :param bool output_facet_normals: Output facet normals
        :param bool output_texture_coordinates: Output texture coordinates
        :param bool output_index_table: Output index table
        :param str face_id: IDs of the faces to tessellate (repeat query param to add more than one,           i.e. faceId=JHK&faceId=JHD)
        :param bool output_error_faces: Whether or not to output faces that cause an error
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: InlineResponse20077
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'partid', 'angle_tolerance', 'chord_tolerance', 'max_facet_width', 'output_vertex_normals', 'output_facet_normals', 'output_texture_coordinates', 'output_index_table', 'face_id', 'output_error_faces', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_faces_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_faces_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_faces_parts`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_faces_parts`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_faces_parts`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if ('partid' not in params or
                params['partid'] is None):
            raise ValueError("Missing the required parameter `partid` when calling `get_faces_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'partid' in params:
            path_params['partid'] = params['partid']  # noqa: E501

        query_params = []
        if 'angle_tolerance' in params:
            query_params.append(('angleTolerance', params['angle_tolerance']))  # noqa: E501
        if 'chord_tolerance' in params:
            query_params.append(('chordTolerance', params['chord_tolerance']))  # noqa: E501
        if 'max_facet_width' in params:
            query_params.append(('maxFacetWidth', params['max_facet_width']))  # noqa: E501
        if 'output_vertex_normals' in params:
            query_params.append(('outputVertexNormals', params['output_vertex_normals']))  # noqa: E501
        if 'output_facet_normals' in params:
            query_params.append(('outputFacetNormals', params['output_facet_normals']))  # noqa: E501
        if 'output_texture_coordinates' in params:
            query_params.append(('outputTextureCoordinates', params['output_texture_coordinates']))  # noqa: E501
        if 'output_index_table' in params:
            query_params.append(('outputIndexTable', params['output_index_table']))  # noqa: E501
        if 'face_id' in params:
            query_params.append(('faceId', params['face_id']))  # noqa: E501
        if 'output_error_faces' in params:
            query_params.append(('outputErrorFaces', params['output_error_faces']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/d/{did}/{wvm_char}/{wvm}/e/{eid}/partid/{partid}/tessellatedfaces', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20077',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_mass_properties_parts(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Mass Properties  # noqa: E501

        Get the mass properties of a part; parts must have density in order to have mass. For properties                 that come in sets of three, the first set is the calculated value, and the second and third are                 minimum and maximum possible values considering tolerance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_mass_properties_parts(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param bool infer_metadata_owner: If the referenced part is a Standard Content part,           specifying a value of true causes the API to look for metadata owned by the owner of the referencing           linkDocument prior to calculating mass properties. If Standard Content metadata is found and it           contains a material assignment, the density from that material is applied to the mass properties           calculation.
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: InlineResponse20089
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_mass_properties_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_mass_properties_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
            return data

    def get_mass_properties_parts_with_http_info(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Mass Properties  # noqa: E501

        Get the mass properties of a part; parts must have density in order to have mass. For properties                 that come in sets of three, the first set is the calculated value, and the second and third are                 minimum and maximum possible values considering tolerance.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_mass_properties_parts_with_http_info(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param bool infer_metadata_owner: If the referenced part is a Standard Content part,           specifying a value of true causes the API to look for metadata owned by the owner of the referencing           linkDocument prior to calculating mass properties. If Standard Content metadata is found and it           contains a material assignment, the density from that material is applied to the mass properties           calculation.
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: InlineResponse20089
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'partid', 'infer_metadata_owner', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_mass_properties_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_mass_properties_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_mass_properties_parts`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_mass_properties_parts`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_mass_properties_parts`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if ('partid' not in params or
                params['partid'] is None):
            raise ValueError("Missing the required parameter `partid` when calling `get_mass_properties_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'partid' in params:
            path_params['partid'] = params['partid']  # noqa: E501

        query_params = []
        if 'infer_metadata_owner' in params:
            query_params.append(('inferMetadataOwner', params['infer_metadata_owner']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/d/{did}/{wvm_char}/{wvm}/e/{eid}/partid/{partid}/massproperties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20089',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_part_metadata_parts(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Get Metadata  # noqa: E501

        Get a part's metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_part_metadata_parts(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :param bool infer_metadata_owner: If the URL references a Standard Content part,       specifying a value of true causes the API to use the owner of the referencing linkDocument as the       metadata scope and the href of the returned part is modified to reflect this metadata scope. If not       explictly set or if set to false, the part metadata returned is the metadata defined internal to the       Standard Content document.
        :param bool include_property_defaults: If true, include metadata schema property       defaults in response
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_part_metadata_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_part_metadata_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
            return data

    def get_part_metadata_parts_with_http_info(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Get Metadata  # noqa: E501

        Get a part's metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_part_metadata_parts_with_http_info(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :param bool infer_metadata_owner: If the URL references a Standard Content part,       specifying a value of true causes the API to use the owner of the referencing linkDocument as the       metadata scope and the href of the returned part is modified to reflect this metadata scope. If not       explictly set or if set to false, the part metadata returned is the metadata defined internal to the       Standard Content document.
        :param bool include_property_defaults: If true, include metadata schema property       defaults in response
        :return: InlineResponse20083
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'partid', 'link_document_id', 'configuration', 'infer_metadata_owner', 'include_property_defaults']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_part_metadata_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if ('partid' not in params or
                params['partid'] is None):
            raise ValueError("Missing the required parameter `partid` when calling `get_part_metadata_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'partid' in params:
            path_params['partid'] = params['partid']  # noqa: E501

        query_params = []
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501
        if 'infer_metadata_owner' in params:
            query_params.append(('inferMetadataOwner', params['infer_metadata_owner']))  # noqa: E501
        if 'include_property_defaults' in params:
            query_params.append(('includePropertyDefaults', params['include_property_defaults']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/d/{did}/{wvm_char}/{wvm}/e/{eid}/partid/{partid}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20083',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_parts_in_partstudio_parts(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Parts In Part Studio  # noqa: E501

        Get list of parts in a part studio. An error is returned if the specified element is not a part                 studio. Surface, wire, and mesh parts are not returned for a version but are included for a                 workspace or microversion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_parts_in_partstudio_parts(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Part studio element ID (required)
        :param bool with_thumbnails: Whether or not to include thumbnails (not supported for           microversion)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param bool include_property_defaults: If true, include metadata schema property       defaults in response
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_parts_in_partstudio_parts_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_parts_in_partstudio_parts_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_parts_in_partstudio_parts_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Parts In Part Studio  # noqa: E501

        Get list of parts in a part studio. An error is returned if the specified element is not a part                 studio. Surface, wire, and mesh parts are not returned for a version but are included for a                 workspace or microversion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_parts_in_partstudio_parts_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Part studio element ID (required)
        :param bool with_thumbnails: Whether or not to include thumbnails (not supported for           microversion)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param bool include_property_defaults: If true, include metadata schema property       defaults in response
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'with_thumbnails', 'link_document_id', 'include_property_defaults']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parts_in_partstudio_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_parts_in_partstudio_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_parts_in_partstudio_parts`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_parts_in_partstudio_parts`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_parts_in_partstudio_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'with_thumbnails' in params:
            query_params.append(('withThumbnails', params['with_thumbnails']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'include_property_defaults' in params:
            query_params.append(('includePropertyDefaults', params['include_property_defaults']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/d/{did}/{wvm_char}/{wvm}/e/{eid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20085',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_parts_parts(self, wvm_char, did, wvm, **kwargs):  # noqa: E501
        """Get Parts  # noqa: E501

        Get list of parts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_parts_parts(wvm_char, did, wvm, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param bool with_thumbnails: Whether or not to include thumbnails (not supported for           microversion)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param bool include_property_defaults: If true, include metadata schema property       defaults in response
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_parts_parts_with_http_info(wvm_char, did, wvm, **kwargs)  # noqa: E501
        else:
            (data) = self.get_parts_parts_with_http_info(wvm_char, did, wvm, **kwargs)  # noqa: E501
            return data

    def get_parts_parts_with_http_info(self, wvm_char, did, wvm, **kwargs):  # noqa: E501
        """Get Parts  # noqa: E501

        Get list of parts  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_parts_parts_with_http_info(wvm_char, did, wvm, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param bool with_thumbnails: Whether or not to include thumbnails (not supported for           microversion)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param bool include_property_defaults: If true, include metadata schema property       defaults in response
        :return: InlineResponse20085
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'with_thumbnails', 'link_document_id', 'include_property_defaults']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_parts_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_parts_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_parts_parts`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_parts_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501

        query_params = []
        if 'with_thumbnails' in params:
            query_params.append(('withThumbnails', params['with_thumbnails']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'include_property_defaults' in params:
            query_params.append(('includePropertyDefaults', params['include_property_defaults']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/d/{did}/{wvm_char}/{wvm}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20085',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_shaded_views_parts(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Shaded views  # noqa: E501

        Get a shaded image rendering of a part  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_shaded_views_parts(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param float output_height: Output image height (in pixels)
        :param float output_width: Output image width (in pixels)
        :param float pixel_size: Height and width represented by each pixel (in meters). If the           value is 0, the display will be sized to fit the output image dimensions.
        :param str edges: The treatment to be applied to edges in the display. Options are           show: show visible edges, hide: hide visible edges
        :param bool use_anti_aliasing: If true, an anti-aliasing factor will be used to smooth           model boundaries in the final image result. If false, the image will be rasterized at the given           resolution. Setting to true can have negative performance implications with respect to rendering time           and memory usage. If a high-resolution image is requested and anti-aliasing is turned on, the server           may not be able to fulfill the request.
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :param str view_matrix: 12-number view matrix (comma-separated), or one of the following named views: top, bottom, front, back, left, right The 12 entries in the view matrix form three rows and four columns, which is a linear transformation applied to the model itself. The matrix's first three columns maps the coordinate axes of the model to the coordinate axes of the view, and the fourth column translates the origin (in meters). The view coordinates have x pointing right, y pointing up, and z pointing towards the viewer, while a front view of the model has x pointing right, y pointing away from the viewer, and z pointing up. For example, the identity matrix viewMatrix=1,0,0,0,0,1,0,0,0,0,1,0 corresponds to the top view, and viewMatrix=0.612,0.612,0,0,-0.354,0.354,0.707,0,0.707,-0.707,0.707,0 corresponds (approximately) to the isometric view. The first three columns of the view matrix should be orthonormal and have a positive determinant.  If this is not the case, view behavior may be undefined.
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_shaded_views_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_shaded_views_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
            return data

    def get_shaded_views_parts_with_http_info(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Shaded views  # noqa: E501

        Get a shaded image rendering of a part  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_shaded_views_parts_with_http_info(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param float output_height: Output image height (in pixels)
        :param float output_width: Output image width (in pixels)
        :param float pixel_size: Height and width represented by each pixel (in meters). If the           value is 0, the display will be sized to fit the output image dimensions.
        :param str edges: The treatment to be applied to edges in the display. Options are           show: show visible edges, hide: hide visible edges
        :param bool use_anti_aliasing: If true, an anti-aliasing factor will be used to smooth           model boundaries in the final image result. If false, the image will be rasterized at the given           resolution. Setting to true can have negative performance implications with respect to rendering time           and memory usage. If a high-resolution image is requested and anti-aliasing is turned on, the server           may not be able to fulfill the request.
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :param str view_matrix: 12-number view matrix (comma-separated), or one of the following named views: top, bottom, front, back, left, right The 12 entries in the view matrix form three rows and four columns, which is a linear transformation applied to the model itself. The matrix's first three columns maps the coordinate axes of the model to the coordinate axes of the view, and the fourth column translates the origin (in meters). The view coordinates have x pointing right, y pointing up, and z pointing towards the viewer, while a front view of the model has x pointing right, y pointing away from the viewer, and z pointing up. For example, the identity matrix viewMatrix=1,0,0,0,0,1,0,0,0,0,1,0 corresponds to the top view, and viewMatrix=0.612,0.612,0,0,-0.354,0.354,0.707,0,0.707,-0.707,0.707,0 corresponds (approximately) to the isometric view. The first three columns of the view matrix should be orthonormal and have a positive determinant.  If this is not the case, view behavior may be undefined.
        :return: InlineResponse20074
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'partid', 'output_height', 'output_width', 'pixel_size', 'edges', 'use_anti_aliasing', 'link_document_id', 'configuration', 'view_matrix']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_shaded_views_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_shaded_views_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_shaded_views_parts`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_shaded_views_parts`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_shaded_views_parts`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if ('partid' not in params or
                params['partid'] is None):
            raise ValueError("Missing the required parameter `partid` when calling `get_shaded_views_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'partid' in params:
            path_params['partid'] = params['partid']  # noqa: E501

        query_params = []
        if 'output_height' in params:
            query_params.append(('outputHeight', params['output_height']))  # noqa: E501
        if 'output_width' in params:
            query_params.append(('outputWidth', params['output_width']))  # noqa: E501
        if 'pixel_size' in params:
            query_params.append(('pixelSize', params['pixel_size']))  # noqa: E501
        if 'edges' in params:
            query_params.append(('edges', params['edges']))  # noqa: E501
        if 'use_anti_aliasing' in params:
            query_params.append(('useAntiAliasing', params['use_anti_aliasing']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501
        if 'view_matrix' in params:
            query_params.append(('viewMatrix', params['view_matrix']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/d/{did}/{wvm_char}/{wvm}/e/{eid}/partid/{partid}/shadedviews', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20074',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_standard_content_part_metadata_parts(self, cu_char, partid, did, vid, eid, oid, **kwargs):  # noqa: E501
        """Get Standard Content Metadata  # noqa: E501

        Get metadata for a standard content part in the context of a user or company  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_standard_content_part_metadata_parts(cu_char, partid, did, vid, eid, oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str cu_char: One of c or u corresponding to whether a company or user was entered. (required)
        :param str partid: Part ID (required)
        :param str did: Document ID (required)
        :param str vid: Version ID (required)
        :param str eid: Element ID (required)
        :param str oid: Company (c) or User (u) ID of metadata owner (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :param bool include_property_defaults: If true, include metadata schema property       defaults in response
        :return: InlineResponse20087
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_standard_content_part_metadata_parts_with_http_info(cu_char, partid, did, vid, eid, oid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_standard_content_part_metadata_parts_with_http_info(cu_char, partid, did, vid, eid, oid, **kwargs)  # noqa: E501
            return data

    def get_standard_content_part_metadata_parts_with_http_info(self, cu_char, partid, did, vid, eid, oid, **kwargs):  # noqa: E501
        """Get Standard Content Metadata  # noqa: E501

        Get metadata for a standard content part in the context of a user or company  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_standard_content_part_metadata_parts_with_http_info(cu_char, partid, did, vid, eid, oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str cu_char: One of c or u corresponding to whether a company or user was entered. (required)
        :param str partid: Part ID (required)
        :param str did: Document ID (required)
        :param str vid: Version ID (required)
        :param str eid: Element ID (required)
        :param str oid: Company (c) or User (u) ID of metadata owner (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :param bool include_property_defaults: If true, include metadata schema property       defaults in response
        :return: InlineResponse20087
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cu_char', 'partid', 'did', 'vid', 'eid', 'oid', 'link_document_id', 'configuration', 'include_property_defaults']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_standard_content_part_metadata_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cu_char' is set
        if ('cu_char' not in params or
                params['cu_char'] is None):
            raise ValueError("Missing the required parameter `cu_char` when calling `get_standard_content_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if ('partid' not in params or
                params['partid'] is None):
            raise ValueError("Missing the required parameter `partid` when calling `get_standard_content_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_standard_content_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'vid' is set
        if ('vid' not in params or
                params['vid'] is None):
            raise ValueError("Missing the required parameter `vid` when calling `get_standard_content_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_standard_content_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'oid' is set
        if ('oid' not in params or
                params['oid'] is None):
            raise ValueError("Missing the required parameter `oid` when calling `get_standard_content_part_metadata_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cu_char' in params:
            path_params['cu_char'] = params['cu_char']  # noqa: E501
        if 'partid' in params:
            path_params['partid'] = params['partid']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'vid' in params:
            path_params['vid'] = params['vid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'oid' in params:
            path_params['oid'] = params['oid']  # noqa: E501

        query_params = []
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501
        if 'include_property_defaults' in params:
            query_params.append(('includePropertyDefaults', params['include_property_defaults']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/standardcontent/d/{did}/v/{vid}/e/{eid}/{cu_char}/{oid}/partid/{partid}/metadata', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20087',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_part_metadata_parts(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Update Metadata  # noqa: E501

        Update a part's metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_part_metadata_parts(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param Body40 body: The JSON request body.
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_part_metadata_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_part_metadata_parts_with_http_info(wvm_char, did, wvm, eid, partid, **kwargs)  # noqa: E501
            return data

    def update_part_metadata_parts_with_http_info(self, wvm_char, did, wvm, eid, partid, **kwargs):  # noqa: E501
        """Update Metadata  # noqa: E501

        Update a part's metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_part_metadata_parts_with_http_info(wvm_char, did, wvm, eid, partid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param str partid: Part ID (required)
        :param Body40 body: The JSON request body.
        :return: InlineResponse20084
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'partid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_part_metadata_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `update_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `update_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `update_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `update_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if ('partid' not in params or
                params['partid'] is None):
            raise ValueError("Missing the required parameter `partid` when calling `update_part_metadata_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'partid' in params:
            path_params['partid'] = params['partid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/d/{did}/{wvm_char}/{wvm}/e/{eid}/partid/{partid}/metadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20084',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_standard_content_part_metadata_parts(self, cu_char, partid, did, vid, eid, oid, **kwargs):  # noqa: E501
        """Update Standard Content Metadata  # noqa: E501

        Update metadata for a standard content part in the context of a company or user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_standard_content_part_metadata_parts(cu_char, partid, did, vid, eid, oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str cu_char: One of c or u corresponding to whether a company or user was entered. (required)
        :param str partid: Part ID (required)
        :param str did: Document ID (required)
        :param str vid: Version ID (required)
        :param str eid: Element ID (required)
        :param str oid: Company (c) or User (u) ID of metadata owner (required)
        :param Body42 body: The JSON request body.
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param bool include_property_defaults: If true, include metadata schema property       defaults in response
        :return: InlineResponse20088
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_standard_content_part_metadata_parts_with_http_info(cu_char, partid, did, vid, eid, oid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_standard_content_part_metadata_parts_with_http_info(cu_char, partid, did, vid, eid, oid, **kwargs)  # noqa: E501
            return data

    def update_standard_content_part_metadata_parts_with_http_info(self, cu_char, partid, did, vid, eid, oid, **kwargs):  # noqa: E501
        """Update Standard Content Metadata  # noqa: E501

        Update metadata for a standard content part in the context of a company or user  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_standard_content_part_metadata_parts_with_http_info(cu_char, partid, did, vid, eid, oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str cu_char: One of c or u corresponding to whether a company or user was entered. (required)
        :param str partid: Part ID (required)
        :param str did: Document ID (required)
        :param str vid: Version ID (required)
        :param str eid: Element ID (required)
        :param str oid: Company (c) or User (u) ID of metadata owner (required)
        :param Body42 body: The JSON request body.
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param bool include_property_defaults: If true, include metadata schema property       defaults in response
        :return: InlineResponse20088
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cu_char', 'partid', 'did', 'vid', 'eid', 'oid', 'body', 'link_document_id', 'include_property_defaults']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_standard_content_part_metadata_parts" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cu_char' is set
        if ('cu_char' not in params or
                params['cu_char'] is None):
            raise ValueError("Missing the required parameter `cu_char` when calling `update_standard_content_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'partid' is set
        if ('partid' not in params or
                params['partid'] is None):
            raise ValueError("Missing the required parameter `partid` when calling `update_standard_content_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `update_standard_content_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'vid' is set
        if ('vid' not in params or
                params['vid'] is None):
            raise ValueError("Missing the required parameter `vid` when calling `update_standard_content_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `update_standard_content_part_metadata_parts`")  # noqa: E501
        # verify the required parameter 'oid' is set
        if ('oid' not in params or
                params['oid'] is None):
            raise ValueError("Missing the required parameter `oid` when calling `update_standard_content_part_metadata_parts`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cu_char' in params:
            path_params['cu_char'] = params['cu_char']  # noqa: E501
        if 'partid' in params:
            path_params['partid'] = params['partid']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'vid' in params:
            path_params['vid'] = params['vid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'oid' in params:
            path_params['oid'] = params['oid']  # noqa: E501

        query_params = []
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'include_property_defaults' in params:
            query_params.append(('includePropertyDefaults', params['include_property_defaults']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/parts/standardcontent/d/{did}/v/{vid}/e/{eid}/{cu_char}/{oid}/partid/{partid}/metadata', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20088',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
