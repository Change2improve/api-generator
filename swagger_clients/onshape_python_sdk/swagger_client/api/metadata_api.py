# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class MetadataApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_metadata_metadata(self, wv_char, did, wv, **kwargs):  # noqa: E501
        """Get Workspace / Version Metadata  # noqa: E501

        Get workspace / version metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_metadata(wv_char, did, wv, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wv_char: One of w or v corresponding to whether a workspace or version was entered. (required)
        :param str did: Document ID (required)
        :param str wv: Workspace (w) or Version (v) ID (required)
        :param float depth: Number of levels of hierarchy to populate in metadata REST API response, 1 - simple fields of top level object, 2 - collection and object fields in the top level object, etc.
        :param float detail_level: Filter out metadata properties by detail level, 1 - fewer fields, ..., 5 - all fields.
        :param bool no_null: Filter out empty metadata properties if True.
        :param bool thumbnail: Thumbnails information will be returned if true
        :param float e_offset: Element page offset
        :param float e_limit: Element page size, number of the items returned will not exceed this value
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :param bool infer_metadata_owner: If the URL references a Standard Content part,       specifying a value of true causes the API to use the owner of the referencing linkDocument as the       metadata scope and the href of the returned part is modified to reflect this metadata scope. If not       explictly set or if set to false, the part metadata returned is the metadata defined internal to the       Standard Content document.
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_metadata_metadata_with_http_info(wv_char, did, wv, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata_metadata_with_http_info(wv_char, did, wv, **kwargs)  # noqa: E501
            return data

    def get_metadata_metadata_with_http_info(self, wv_char, did, wv, **kwargs):  # noqa: E501
        """Get Workspace / Version Metadata  # noqa: E501

        Get workspace / version metadata  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_metadata_with_http_info(wv_char, did, wv, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wv_char: One of w or v corresponding to whether a workspace or version was entered. (required)
        :param str did: Document ID (required)
        :param str wv: Workspace (w) or Version (v) ID (required)
        :param float depth: Number of levels of hierarchy to populate in metadata REST API response, 1 - simple fields of top level object, 2 - collection and object fields in the top level object, etc.
        :param float detail_level: Filter out metadata properties by detail level, 1 - fewer fields, ..., 5 - all fields.
        :param bool no_null: Filter out empty metadata properties if True.
        :param bool thumbnail: Thumbnails information will be returned if true
        :param float e_offset: Element page offset
        :param float e_limit: Element page size, number of the items returned will not exceed this value
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :param bool infer_metadata_owner: If the URL references a Standard Content part,       specifying a value of true causes the API to use the owner of the referencing linkDocument as the       metadata scope and the href of the returned part is modified to reflect this metadata scope. If not       explictly set or if set to false, the part metadata returned is the metadata defined internal to the       Standard Content document.
        :return: InlineResponse20062
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wv_char', 'did', 'wv', 'depth', 'detail_level', 'no_null', 'thumbnail', 'e_offset', 'e_limit', 'link_document_id', 'configuration', 'infer_metadata_owner']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wv_char' is set
        if ('wv_char' not in params or
                params['wv_char'] is None):
            raise ValueError("Missing the required parameter `wv_char` when calling `get_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'wv' is set
        if ('wv' not in params or
                params['wv'] is None):
            raise ValueError("Missing the required parameter `wv` when calling `get_metadata_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wv_char' in params:
            path_params['wv_char'] = params['wv_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wv' in params:
            path_params['wv'] = params['wv']  # noqa: E501

        query_params = []
        if 'depth' in params:
            query_params.append(('depth', params['depth']))  # noqa: E501
        if 'detail_level' in params:
            query_params.append(('detailLevel', params['detail_level']))  # noqa: E501
        if 'no_null' in params:
            query_params.append(('noNull', params['no_null']))  # noqa: E501
        if 'thumbnail' in params:
            query_params.append(('thumbnail', params['thumbnail']))  # noqa: E501
        if 'e_offset' in params:
            query_params.append(('e-offset', params['e_offset']))  # noqa: E501
        if 'e_limit' in params:
            query_params.append(('e-limit', params['e_limit']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501
        if 'infer_metadata_owner' in params:
            query_params.append(('inferMetadataOwner', params['infer_metadata_owner']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/d/{did}/{wv_char}/{wv}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20062',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata_property_metadata(self, pid, schema_id, **kwargs):  # noqa: E501
        """Get metadata property  # noqa: E501

        Get metadata property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_property_metadata(pid, schema_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str pid: Property ID (required)
        :param str schema_id: Metadata schema ID (required)
        :param str document_id: ID of the document the schema is associated with.
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_metadata_property_metadata_with_http_info(pid, schema_id, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata_property_metadata_with_http_info(pid, schema_id, **kwargs)  # noqa: E501
            return data

    def get_metadata_property_metadata_with_http_info(self, pid, schema_id, **kwargs):  # noqa: E501
        """Get metadata property  # noqa: E501

        Get metadata property  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_property_metadata_with_http_info(pid, schema_id, async=True)
        >>> result = thread.get()

        :param async bool
        :param str pid: Property ID (required)
        :param str schema_id: Metadata schema ID (required)
        :param str document_id: ID of the document the schema is associated with.
        :return: InlineResponse20064
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['pid', 'schema_id', 'document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_property_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_metadata_property_metadata`")  # noqa: E501
        # verify the required parameter 'schema_id' is set
        if ('schema_id' not in params or
                params['schema_id'] is None):
            raise ValueError("Missing the required parameter `schema_id` when calling `get_metadata_property_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501

        query_params = []
        if 'schema_id' in params:
            query_params.append(('schemaId', params['schema_id']))  # noqa: E501
        if 'document_id' in params:
            query_params.append(('documentId', params['document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/metadataschema/property/{pid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20064',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata_schema_by_id_metadata(self, sid, **kwargs):  # noqa: E501
        """Get metadata schema by ID  # noqa: E501

        Get metadata schema by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_schema_by_id_metadata(sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str sid: Metadata schema ID (required)
        :param str document_id: ID of the document the schema is associated with.
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_metadata_schema_by_id_metadata_with_http_info(sid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata_schema_by_id_metadata_with_http_info(sid, **kwargs)  # noqa: E501
            return data

    def get_metadata_schema_by_id_metadata_with_http_info(self, sid, **kwargs):  # noqa: E501
        """Get metadata schema by ID  # noqa: E501

        Get metadata schema by ID  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_schema_by_id_metadata_with_http_info(sid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str sid: Metadata schema ID (required)
        :param str document_id: ID of the document the schema is associated with.
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['sid', 'document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_schema_by_id_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'sid' is set
        if ('sid' not in params or
                params['sid'] is None):
            raise ValueError("Missing the required parameter `sid` when calling `get_metadata_schema_by_id_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'sid' in params:
            path_params['sid'] = params['sid']  # noqa: E501

        query_params = []
        if 'document_id' in params:
            query_params.append(('documentId', params['document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/metadataschema/{sid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20065',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata_schema_metadata(self, owner_id, object_type, **kwargs):  # noqa: E501
        """Get metadata schema by owner  # noqa: E501

        Get metadata schema, or Onshape schema if user/company has no schema for the given object type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_schema_metadata(owner_id, object_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner_id: Schema owner ID (required)
        :param float object_type: Metadata object type, which can be: 0:GLOBAL, 1:DOCUMENT, 2:PART,           3:ASSEMBLY, 4:DRAWING, 5:PART_STUDIO, 6: BLOB_ELEMENT, 7:APP_ELEMENT, 8:VERSION, 9:WORKSPACE (required)
        :param float owner_type: Schema owner type, which can be: 0: user, 1: company (default: 1)
        :param str document_id: ID of the document the schema is associated with.
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_metadata_schema_metadata_with_http_info(owner_id, object_type, **kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata_schema_metadata_with_http_info(owner_id, object_type, **kwargs)  # noqa: E501
            return data

    def get_metadata_schema_metadata_with_http_info(self, owner_id, object_type, **kwargs):  # noqa: E501
        """Get metadata schema by owner  # noqa: E501

        Get metadata schema, or Onshape schema if user/company has no schema for the given object type  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_schema_metadata_with_http_info(owner_id, object_type, async=True)
        >>> result = thread.get()

        :param async bool
        :param str owner_id: Schema owner ID (required)
        :param float object_type: Metadata object type, which can be: 0:GLOBAL, 1:DOCUMENT, 2:PART,           3:ASSEMBLY, 4:DRAWING, 5:PART_STUDIO, 6: BLOB_ELEMENT, 7:APP_ELEMENT, 8:VERSION, 9:WORKSPACE (required)
        :param float owner_type: Schema owner type, which can be: 0: user, 1: company (default: 1)
        :param str document_id: ID of the document the schema is associated with.
        :return: InlineResponse20065
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['owner_id', 'object_type', 'owner_type', 'document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_schema_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'owner_id' is set
        if ('owner_id' not in params or
                params['owner_id'] is None):
            raise ValueError("Missing the required parameter `owner_id` when calling `get_metadata_schema_metadata`")  # noqa: E501
        # verify the required parameter 'object_type' is set
        if ('object_type' not in params or
                params['object_type'] is None):
            raise ValueError("Missing the required parameter `object_type` when calling `get_metadata_schema_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'owner_id' in params:
            query_params.append(('ownerId', params['owner_id']))  # noqa: E501
        if 'owner_type' in params:
            query_params.append(('ownerType', params['owner_type']))  # noqa: E501
        if 'object_type' in params:
            query_params.append(('objectType', params['object_type']))  # noqa: E501
        if 'document_id' in params:
            query_params.append(('documentId', params['document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/metadataschema', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20065',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_metadata_schema_properties_metadata(self, **kwargs):  # noqa: E501
        """Get metadata properties  # noqa: E501

        Get metadata properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_schema_properties_metadata(async=True)
        >>> result = thread.get()

        :param async bool
        :param str schema_id: Metadata schema ID. Must be specified if ownerId is blank.
        :param str owner_id: Schema owner ID. Must be specified if schemaId is blank.
        :param float owner_type: Schema owner type, which can be: 0: user, 1: company (default: 1).           Should only be specified if ownerId is specified.
        :param float object_type: Metadata object type. Should only be specified if ownerId is           specified. If schemaId is specified, this parameter is ignored. If null, properties for all types will           be returned. If specified, must be one of the following: 0:GLOBAL, 1:DOCUMENT, 2:PART, 3:ASSEMBLY,           4:DRAWING, 5:PART_STUDIO, 6: BLOB_ELEMENT, 7:APP_ELEMENT, 8:VERSION, 9:WORKSPACE If false, properties           will be returned with full detail, including property configs.
        :param bool strict: If true, only properties for this particular schema or ownerId           will be returned. If false, all inherited properties will be returned.
        :param bool active_only: If true, only active properties for this particular schema or           ownerId will be returned. If false, all properties will be returned.
        :param str document_id: ID of the document the schema is associated with.
        :param float offset: Where to begin search results
        :param float limit: Number of results to return per page (max is 20)
        :return: InlineResponse20063
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_metadata_schema_properties_metadata_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_metadata_schema_properties_metadata_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_metadata_schema_properties_metadata_with_http_info(self, **kwargs):  # noqa: E501
        """Get metadata properties  # noqa: E501

        Get metadata properties  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_metadata_schema_properties_metadata_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str schema_id: Metadata schema ID. Must be specified if ownerId is blank.
        :param str owner_id: Schema owner ID. Must be specified if schemaId is blank.
        :param float owner_type: Schema owner type, which can be: 0: user, 1: company (default: 1).           Should only be specified if ownerId is specified.
        :param float object_type: Metadata object type. Should only be specified if ownerId is           specified. If schemaId is specified, this parameter is ignored. If null, properties for all types will           be returned. If specified, must be one of the following: 0:GLOBAL, 1:DOCUMENT, 2:PART, 3:ASSEMBLY,           4:DRAWING, 5:PART_STUDIO, 6: BLOB_ELEMENT, 7:APP_ELEMENT, 8:VERSION, 9:WORKSPACE If false, properties           will be returned with full detail, including property configs.
        :param bool strict: If true, only properties for this particular schema or ownerId           will be returned. If false, all inherited properties will be returned.
        :param bool active_only: If true, only active properties for this particular schema or           ownerId will be returned. If false, all properties will be returned.
        :param str document_id: ID of the document the schema is associated with.
        :param float offset: Where to begin search results
        :param float limit: Number of results to return per page (max is 20)
        :return: InlineResponse20063
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['schema_id', 'owner_id', 'owner_type', 'object_type', 'strict', 'active_only', 'document_id', 'offset', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_metadata_schema_properties_metadata" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'schema_id' in params:
            query_params.append(('schemaId', params['schema_id']))  # noqa: E501
        if 'owner_id' in params:
            query_params.append(('ownerId', params['owner_id']))  # noqa: E501
        if 'owner_type' in params:
            query_params.append(('ownerType', params['owner_type']))  # noqa: E501
        if 'object_type' in params:
            query_params.append(('objectType', params['object_type']))  # noqa: E501
        if 'strict' in params:
            query_params.append(('strict', params['strict']))  # noqa: E501
        if 'active_only' in params:
            query_params.append(('activeOnly', params['active_only']))  # noqa: E501
        if 'document_id' in params:
            query_params.append(('documentId', params['document_id']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/metadataschema/properties', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20063',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_part_list_metadata_metadata(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Parts Metadata  # noqa: E501

        Get metadata of parts of an element in a workspace / version / microversion  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_part_list_metadata_metadata(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param float depth: Number of levels of hierarchy to populate in metadata REST API response, 1 - simple fields of top level object, 2 - collection and object fields in the top level object, etc.
        :param float detail_level: Filter out metadata properties by detail level, 1 - fewer fields, ..., 5 - all fields.
        :param bool no_null: Filter out empty metadata properties if True.
        :param bool thumbnail: Thumbnails information will be returned if true
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_part_list_metadata_metadata_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_part_list_metadata_metadata_with_http_info(wvm_char, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_part_list_metadata_metadata_with_http_info(self, wvm_char, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Parts Metadata  # noqa: E501

        Get metadata of parts of an element in a workspace / version / microversion  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_part_list_metadata_metadata_with_http_info(wvm_char, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param float depth: Number of levels of hierarchy to populate in metadata REST API response, 1 - simple fields of top level object, 2 - collection and object fields in the top level object, etc.
        :param float detail_level: Filter out metadata properties by detail level, 1 - fewer fields, ..., 5 - all fields.
        :param bool no_null: Filter out empty metadata properties if True.
        :param bool thumbnail: Thumbnails information will be returned if true
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: InlineResponse20060
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'did', 'wvm', 'eid', 'depth', 'detail_level', 'no_null', 'thumbnail', 'link_document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_part_list_metadata_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_part_list_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_part_list_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_part_list_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_part_list_metadata_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'depth' in params:
            query_params.append(('depth', params['depth']))  # noqa: E501
        if 'detail_level' in params:
            query_params.append(('detailLevel', params['detail_level']))  # noqa: E501
        if 'no_null' in params:
            query_params.append(('noNull', params['no_null']))  # noqa: E501
        if 'thumbnail' in params:
            query_params.append(('thumbnail', params['thumbnail']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/d/{did}/{wvm_char}/{wvm}/e/{eid}/p', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20060',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_part_metadata_metadata(self, wvm_char, pid, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Part Metadata  # noqa: E501

        Get metadata of a part in an element in a workspace / version / microversion  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_part_metadata_metadata(wvm_char, pid, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str pid: Part ID (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param float depth: Number of levels of hierarchy to populate in metadata REST API response, 1 - simple fields of top level object, 2 - collection and object fields in the top level object, etc.
        :param float detail_level: Filter out metadata properties by detail level, 1 - fewer fields, ..., 5 - all fields.
        :param bool no_null: Filter out empty metadata properties if True.
        :param bool thumbnail: Thumbnails information will be returned if true
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_part_metadata_metadata_with_http_info(wvm_char, pid, did, wvm, eid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_part_metadata_metadata_with_http_info(wvm_char, pid, did, wvm, eid, **kwargs)  # noqa: E501
            return data

    def get_part_metadata_metadata_with_http_info(self, wvm_char, pid, did, wvm, eid, **kwargs):  # noqa: E501
        """Get Part Metadata  # noqa: E501

        Get metadata of a part in an element in a workspace / version / microversion  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_part_metadata_metadata_with_http_info(wvm_char, pid, did, wvm, eid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wvm_char: One of w or v or m corresponding to whether a workspace or version or microversion was entered. (required)
        :param str pid: Part ID (required)
        :param str did: Document ID (required)
        :param str wvm: Workspace (w), Version (v) or Microversion (m) ID (required)
        :param str eid: Element ID (required)
        :param float depth: Number of levels of hierarchy to populate in metadata REST API response, 1 - simple fields of top level object, 2 - collection and object fields in the top level object, etc.
        :param float detail_level: Filter out metadata properties by detail level, 1 - fewer fields, ..., 5 - all fields.
        :param bool no_null: Filter out empty metadata properties if True.
        :param bool thumbnail: Thumbnails information will be returned if true
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :return: InlineResponse20059
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wvm_char', 'pid', 'did', 'wvm', 'eid', 'depth', 'detail_level', 'no_null', 'thumbnail', 'link_document_id']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_part_metadata_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wvm_char' is set
        if ('wvm_char' not in params or
                params['wvm_char'] is None):
            raise ValueError("Missing the required parameter `wvm_char` when calling `get_part_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_part_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_part_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'wvm' is set
        if ('wvm' not in params or
                params['wvm'] is None):
            raise ValueError("Missing the required parameter `wvm` when calling `get_part_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_part_metadata_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wvm_char' in params:
            path_params['wvm_char'] = params['wvm_char']  # noqa: E501
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wvm' in params:
            path_params['wvm'] = params['wvm']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501

        query_params = []
        if 'depth' in params:
            query_params.append(('depth', params['depth']))  # noqa: E501
        if 'detail_level' in params:
            query_params.append(('detailLevel', params['detail_level']))  # noqa: E501
        if 'no_null' in params:
            query_params.append(('noNull', params['no_null']))  # noqa: E501
        if 'thumbnail' in params:
            query_params.append(('thumbnail', params['thumbnail']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/d/{did}/{wvm_char}/{wvm}/e/{eid}/p/{pid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20059',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_standard_content_metadata_metadata(self, cu_char, pid, did, vid, eid, oid, **kwargs):  # noqa: E501
        """Get Standard Content Part Metadata  # noqa: E501

        Get metadata of a standard content part in a version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_standard_content_metadata_metadata(cu_char, pid, did, vid, eid, oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str cu_char: One of c or u corresponding to whether a company or user was entered. (required)
        :param str pid: Part ID (required)
        :param str did: Document ID (required)
        :param str vid: Version ID (required)
        :param str eid: Element ID (required)
        :param str oid: Company (c) or User (u) ID of metadata owner (required)
        :param float depth: Number of levels of hierarchy to populate in metadata REST API response, 1 - simple fields of top level object, 2 - collection and object fields in the top level object, etc.
        :param float detail_level: Filter out metadata properties by detail level, 1 - fewer fields, ..., 5 - all fields.
        :param bool no_null: Filter out empty metadata properties if True.
        :param bool thumbnail: Thumbnails information will be returned if true
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: InlineResponse20061
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_standard_content_metadata_metadata_with_http_info(cu_char, pid, did, vid, eid, oid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_standard_content_metadata_metadata_with_http_info(cu_char, pid, did, vid, eid, oid, **kwargs)  # noqa: E501
            return data

    def get_standard_content_metadata_metadata_with_http_info(self, cu_char, pid, did, vid, eid, oid, **kwargs):  # noqa: E501
        """Get Standard Content Part Metadata  # noqa: E501

        Get metadata of a standard content part in a version  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_standard_content_metadata_metadata_with_http_info(cu_char, pid, did, vid, eid, oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str cu_char: One of c or u corresponding to whether a company or user was entered. (required)
        :param str pid: Part ID (required)
        :param str did: Document ID (required)
        :param str vid: Version ID (required)
        :param str eid: Element ID (required)
        :param str oid: Company (c) or User (u) ID of metadata owner (required)
        :param float depth: Number of levels of hierarchy to populate in metadata REST API response, 1 - simple fields of top level object, 2 - collection and object fields in the top level object, etc.
        :param float detail_level: Filter out metadata properties by detail level, 1 - fewer fields, ..., 5 - all fields.
        :param bool no_null: Filter out empty metadata properties if True.
        :param bool thumbnail: Thumbnails information will be returned if true
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param str configuration: Configuration string
        :return: InlineResponse20061
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cu_char', 'pid', 'did', 'vid', 'eid', 'oid', 'depth', 'detail_level', 'no_null', 'thumbnail', 'link_document_id', 'configuration']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_standard_content_metadata_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cu_char' is set
        if ('cu_char' not in params or
                params['cu_char'] is None):
            raise ValueError("Missing the required parameter `cu_char` when calling `get_standard_content_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `get_standard_content_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_standard_content_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'vid' is set
        if ('vid' not in params or
                params['vid'] is None):
            raise ValueError("Missing the required parameter `vid` when calling `get_standard_content_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `get_standard_content_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'oid' is set
        if ('oid' not in params or
                params['oid'] is None):
            raise ValueError("Missing the required parameter `oid` when calling `get_standard_content_metadata_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cu_char' in params:
            path_params['cu_char'] = params['cu_char']  # noqa: E501
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'vid' in params:
            path_params['vid'] = params['vid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'oid' in params:
            path_params['oid'] = params['oid']  # noqa: E501

        query_params = []
        if 'depth' in params:
            query_params.append(('depth', params['depth']))  # noqa: E501
        if 'detail_level' in params:
            query_params.append(('detailLevel', params['detail_level']))  # noqa: E501
        if 'no_null' in params:
            query_params.append(('noNull', params['no_null']))  # noqa: E501
        if 'thumbnail' in params:
            query_params.append(('thumbnail', params['thumbnail']))  # noqa: E501
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501
        if 'configuration' in params:
            query_params.append(('configuration', params['configuration']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/standardcontent/d/{did}/v/{vid}/e/{eid}/{cu_char}/{oid}/p/{pid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20061',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_metadata_metadata(self, wv_char, did, wv, **kwargs):  # noqa: E501
        """Update Metadata  # noqa: E501

        Update metadata. Updates of parts in configurable Par Studios require configuration information     be included within the items.*.href fields for a specific part. The response format varies depending     on whether there are multiple items to update.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_metadata_metadata(wv_char, did, wv, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wv_char: One of w or v corresponding to whether a workspace or version was entered. (required)
        :param str did: Document ID (required)
        :param str wv: Workspace (w) or Version (v) ID (required)
        :param Body30 body: The JSON request body.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_metadata_metadata_with_http_info(wv_char, did, wv, **kwargs)  # noqa: E501
        else:
            (data) = self.update_metadata_metadata_with_http_info(wv_char, did, wv, **kwargs)  # noqa: E501
            return data

    def update_metadata_metadata_with_http_info(self, wv_char, did, wv, **kwargs):  # noqa: E501
        """Update Metadata  # noqa: E501

        Update metadata. Updates of parts in configurable Par Studios require configuration information     be included within the items.*.href fields for a specific part. The response format varies depending     on whether there are multiple items to update.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_metadata_metadata_with_http_info(wv_char, did, wv, async=True)
        >>> result = thread.get()

        :param async bool
        :param str wv_char: One of w or v corresponding to whether a workspace or version was entered. (required)
        :param str did: Document ID (required)
        :param str wv: Workspace (w) or Version (v) ID (required)
        :param Body30 body: The JSON request body.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['wv_char', 'did', 'wv', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_metadata_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'wv_char' is set
        if ('wv_char' not in params or
                params['wv_char'] is None):
            raise ValueError("Missing the required parameter `wv_char` when calling `update_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `update_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'wv' is set
        if ('wv' not in params or
                params['wv'] is None):
            raise ValueError("Missing the required parameter `wv` when calling `update_metadata_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'wv_char' in params:
            path_params['wv_char'] = params['wv_char']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wv' in params:
            path_params['wv'] = params['wv']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/d/{did}/{wv_char}/{wv}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def update_standard_content_metadata_metadata(self, cu_char, pid, did, vid, eid, oid, **kwargs):  # noqa: E501
        """Update Standard Content Part Metadata  # noqa: E501

        Update metadata of a standard content part in a version for a specific user or company.     Configuration information must be included within the items.*.href fields. The response format varies depending     on whether there are multiple items to update.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_standard_content_metadata_metadata(cu_char, pid, did, vid, eid, oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str cu_char: One of c or u corresponding to whether a company or user was entered. (required)
        :param str pid: Part ID (required)
        :param str did: Document ID (required)
        :param str vid: Version ID (required)
        :param str eid: Element ID (required)
        :param str oid: Company (c) or User (u) ID of metadata owner (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param Body29 body: The JSON request body.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.update_standard_content_metadata_metadata_with_http_info(cu_char, pid, did, vid, eid, oid, **kwargs)  # noqa: E501
        else:
            (data) = self.update_standard_content_metadata_metadata_with_http_info(cu_char, pid, did, vid, eid, oid, **kwargs)  # noqa: E501
            return data

    def update_standard_content_metadata_metadata_with_http_info(self, cu_char, pid, did, vid, eid, oid, **kwargs):  # noqa: E501
        """Update Standard Content Part Metadata  # noqa: E501

        Update metadata of a standard content part in a version for a specific user or company.     Configuration information must be included within the items.*.href fields. The response format varies depending     on whether there are multiple items to update.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.update_standard_content_metadata_metadata_with_http_info(cu_char, pid, did, vid, eid, oid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str cu_char: One of c or u corresponding to whether a company or user was entered. (required)
        :param str pid: Part ID (required)
        :param str did: Document ID (required)
        :param str vid: Version ID (required)
        :param str eid: Element ID (required)
        :param str oid: Company (c) or User (u) ID of metadata owner (required)
        :param str link_document_id: Id of document that links to the document being accessed.     This may provide additional access rights to the document. Allowed only with version (v) path parameter.
        :param Body29 body: The JSON request body.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['cu_char', 'pid', 'did', 'vid', 'eid', 'oid', 'link_document_id', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method update_standard_content_metadata_metadata" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'cu_char' is set
        if ('cu_char' not in params or
                params['cu_char'] is None):
            raise ValueError("Missing the required parameter `cu_char` when calling `update_standard_content_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'pid' is set
        if ('pid' not in params or
                params['pid'] is None):
            raise ValueError("Missing the required parameter `pid` when calling `update_standard_content_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `update_standard_content_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'vid' is set
        if ('vid' not in params or
                params['vid'] is None):
            raise ValueError("Missing the required parameter `vid` when calling `update_standard_content_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `update_standard_content_metadata_metadata`")  # noqa: E501
        # verify the required parameter 'oid' is set
        if ('oid' not in params or
                params['oid'] is None):
            raise ValueError("Missing the required parameter `oid` when calling `update_standard_content_metadata_metadata`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'cu_char' in params:
            path_params['cu_char'] = params['cu_char']  # noqa: E501
        if 'pid' in params:
            path_params['pid'] = params['pid']  # noqa: E501
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'vid' in params:
            path_params['vid'] = params['vid']  # noqa: E501
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'oid' in params:
            path_params['oid'] = params['oid']  # noqa: E501

        query_params = []
        if 'link_document_id' in params:
            query_params.append(('linkDocumentId', params['link_document_id']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/metadata/standardcontent/d/{did}/v/{vid}/e/{eid}/{cu_char}/{oid}/p/{pid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
