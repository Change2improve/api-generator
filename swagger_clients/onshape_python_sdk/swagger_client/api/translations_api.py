# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class TranslationsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def create_translation_translations(self, file, format_name, flatten_assemblies, y_axis_is_up, store_in_document, did, wid, **kwargs):  # noqa: E501
        """Create translation from upload  # noqa: E501

        Create a translation of the input data. The translation may be incomplete at the time that the                 call completes. If the requestState is ACTIVE, the translation can be polled until the state                 becomes either DONE or FAILED. Alternatively, a webhook callback can be registered for                 notification of translation completion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_translation_translations(file, format_name, flatten_assemblies, y_axis_is_up, store_in_document, did, wid, async=True)
        >>> result = thread.get()

        :param async bool
        :param file file: File to upload (required)
        :param str format_name: Name of format into which this element should be translated. ONSHAPE        indicates that the model file should be translated into a Part Studio or Assembly. (required)
        :param bool flatten_assemblies: If true, remove assembly structure and create only a        Part Studio (required)
        :param bool y_axis_is_up: If true, treat the model's Y axis as the vertical axis.  Otherwise,        Z is treated as the vertical axis. (required)
        :param bool store_in_document: controls whether the translation is stored as a new element or        whether the data is stored as external data (storeInDocument=false). (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str version_string: Version of output format to use (format-dependent)
        :param bool notify_user: Whether a user notification should be generated on completion
        :param bool import_in_background: If storeInDocument is true and formatName is ONSHAPE and        the source is a Parasolid file, this specifies the preference as to whether the import should be completed        prior to the completion of the request (importInBackground=false) or whether it should be performed        asynchronously (importInBackground=true). Historically, this parameter was implicitly set to false, but large        imports can take long enough that the request could result in a timeout. Applications are encouraged to set        this parameter to true for reliable operation.
        :param bool allow_faulty_parts: If not specified or if specified as false, bodies to be imported        are examined for validity and any found to be faulty are removed from the import. If all bodies are found to        be faulty, the import fails. If the value is specified as true, we attempt to import the bodies that appear to        have faults.
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.create_translation_translations_with_http_info(file, format_name, flatten_assemblies, y_axis_is_up, store_in_document, did, wid, **kwargs)  # noqa: E501
        else:
            (data) = self.create_translation_translations_with_http_info(file, format_name, flatten_assemblies, y_axis_is_up, store_in_document, did, wid, **kwargs)  # noqa: E501
            return data

    def create_translation_translations_with_http_info(self, file, format_name, flatten_assemblies, y_axis_is_up, store_in_document, did, wid, **kwargs):  # noqa: E501
        """Create translation from upload  # noqa: E501

        Create a translation of the input data. The translation may be incomplete at the time that the                 call completes. If the requestState is ACTIVE, the translation can be polled until the state                 becomes either DONE or FAILED. Alternatively, a webhook callback can be registered for                 notification of translation completion.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.create_translation_translations_with_http_info(file, format_name, flatten_assemblies, y_axis_is_up, store_in_document, did, wid, async=True)
        >>> result = thread.get()

        :param async bool
        :param file file: File to upload (required)
        :param str format_name: Name of format into which this element should be translated. ONSHAPE        indicates that the model file should be translated into a Part Studio or Assembly. (required)
        :param bool flatten_assemblies: If true, remove assembly structure and create only a        Part Studio (required)
        :param bool y_axis_is_up: If true, treat the model's Y axis as the vertical axis.  Otherwise,        Z is treated as the vertical axis. (required)
        :param bool store_in_document: controls whether the translation is stored as a new element or        whether the data is stored as external data (storeInDocument=false). (required)
        :param str did: Document ID (required)
        :param str wid: Workspace ID (required)
        :param str version_string: Version of output format to use (format-dependent)
        :param bool notify_user: Whether a user notification should be generated on completion
        :param bool import_in_background: If storeInDocument is true and formatName is ONSHAPE and        the source is a Parasolid file, this specifies the preference as to whether the import should be completed        prior to the completion of the request (importInBackground=false) or whether it should be performed        asynchronously (importInBackground=true). Historically, this parameter was implicitly set to false, but large        imports can take long enough that the request could result in a timeout. Applications are encouraged to set        this parameter to true for reliable operation.
        :param bool allow_faulty_parts: If not specified or if specified as false, bodies to be imported        are examined for validity and any found to be faulty are removed from the import. If all bodies are found to        be faulty, the import fails. If the value is specified as true, we attempt to import the bodies that appear to        have faults.
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['file', 'format_name', 'flatten_assemblies', 'y_axis_is_up', 'store_in_document', 'did', 'wid', 'version_string', 'notify_user', 'import_in_background', 'allow_faulty_parts']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method create_translation_translations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'file' is set
        if ('file' not in params or
                params['file'] is None):
            raise ValueError("Missing the required parameter `file` when calling `create_translation_translations`")  # noqa: E501
        # verify the required parameter 'format_name' is set
        if ('format_name' not in params or
                params['format_name'] is None):
            raise ValueError("Missing the required parameter `format_name` when calling `create_translation_translations`")  # noqa: E501
        # verify the required parameter 'flatten_assemblies' is set
        if ('flatten_assemblies' not in params or
                params['flatten_assemblies'] is None):
            raise ValueError("Missing the required parameter `flatten_assemblies` when calling `create_translation_translations`")  # noqa: E501
        # verify the required parameter 'y_axis_is_up' is set
        if ('y_axis_is_up' not in params or
                params['y_axis_is_up'] is None):
            raise ValueError("Missing the required parameter `y_axis_is_up` when calling `create_translation_translations`")  # noqa: E501
        # verify the required parameter 'store_in_document' is set
        if ('store_in_document' not in params or
                params['store_in_document'] is None):
            raise ValueError("Missing the required parameter `store_in_document` when calling `create_translation_translations`")  # noqa: E501
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `create_translation_translations`")  # noqa: E501
        # verify the required parameter 'wid' is set
        if ('wid' not in params or
                params['wid'] is None):
            raise ValueError("Missing the required parameter `wid` when calling `create_translation_translations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501
        if 'wid' in params:
            path_params['wid'] = params['wid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}
        if 'file' in params:
            local_var_files['file'] = params['file']  # noqa: E501
        if 'format_name' in params:
            form_params.append(('formatName', params['format_name']))  # noqa: E501
        if 'version_string' in params:
            form_params.append(('versionString', params['version_string']))  # noqa: E501
        if 'notify_user' in params:
            form_params.append(('notifyUser', params['notify_user']))  # noqa: E501
        if 'flatten_assemblies' in params:
            form_params.append(('flattenAssemblies', params['flatten_assemblies']))  # noqa: E501
        if 'y_axis_is_up' in params:
            form_params.append(('yAxisIsUp', params['y_axis_is_up']))  # noqa: E501
        if 'import_in_background' in params:
            form_params.append(('importInBackground', params['import_in_background']))  # noqa: E501
        if 'allow_faulty_parts' in params:
            form_params.append(('allowFaultyParts', params['allow_faulty_parts']))  # noqa: E501
        if 'store_in_document' in params:
            form_params.append(('storeInDocument', params['store_in_document']))  # noqa: E501

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['multipart/form-data'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/translations/d/{did}/w/{wid}', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def delete_translation_translations(self, tid, **kwargs):  # noqa: E501
        """Delete Translation Status entry  # noqa: E501

        Delete translation status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_translation_translations(tid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str tid: Translation ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.delete_translation_translations_with_http_info(tid, **kwargs)  # noqa: E501
        else:
            (data) = self.delete_translation_translations_with_http_info(tid, **kwargs)  # noqa: E501
            return data

    def delete_translation_translations_with_http_info(self, tid, **kwargs):  # noqa: E501
        """Delete Translation Status entry  # noqa: E501

        Delete translation status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.delete_translation_translations_with_http_info(tid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str tid: Translation ID (required)
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method delete_translation_translations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tid' is set
        if ('tid' not in params or
                params['tid'] is None):
            raise ValueError("Missing the required parameter `tid` when calling `delete_translation_translations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tid' in params:
            path_params['tid'] = params['tid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/translations/{tid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_translation_translations(self, tid, **kwargs):  # noqa: E501
        """Get Translation Status  # noqa: E501

        Get element translation status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_translation_translations(tid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str tid: Translation ID (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_translation_translations_with_http_info(tid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_translation_translations_with_http_info(tid, **kwargs)  # noqa: E501
            return data

    def get_translation_translations_with_http_info(self, tid, **kwargs):  # noqa: E501
        """Get Translation Status  # noqa: E501

        Get element translation status  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_translation_translations_with_http_info(tid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str tid: Translation ID (required)
        :return: InlineResponse20020
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['tid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_translation_translations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'tid' is set
        if ('tid' not in params or
                params['tid'] is None):
            raise ValueError("Missing the required parameter `tid` when calling `get_translation_translations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'tid' in params:
            path_params['tid'] = params['tid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/translations/{tid}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20020',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_translations_translations(self, did, offset, limit, **kwargs):  # noqa: E501
        """Get Translation Status for a document  # noqa: E501

        Get list of translation status entries for a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_translations_translations(did, offset, limit, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param float offset: Offset into list of items (required)
        :param float limit: Maximum number to retrieve (Must be <= 20) (required)
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_translations_translations_with_http_info(did, offset, limit, **kwargs)  # noqa: E501
        else:
            (data) = self.get_translations_translations_with_http_info(did, offset, limit, **kwargs)  # noqa: E501
            return data

    def get_translations_translations_with_http_info(self, did, offset, limit, **kwargs):  # noqa: E501
        """Get Translation Status for a document  # noqa: E501

        Get list of translation status entries for a document  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_translations_translations_with_http_info(did, offset, limit, async=True)
        >>> result = thread.get()

        :param async bool
        :param str did: Document ID (required)
        :param float offset: Offset into list of items (required)
        :param float limit: Maximum number to retrieve (Must be <= 20) (required)
        :return: InlineResponse200101
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['did', 'offset', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_translations_translations" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'did' is set
        if ('did' not in params or
                params['did'] is None):
            raise ValueError("Missing the required parameter `did` when calling `get_translations_translations`")  # noqa: E501
        # verify the required parameter 'offset' is set
        if ('offset' not in params or
                params['offset'] is None):
            raise ValueError("Missing the required parameter `offset` when calling `get_translations_translations`")  # noqa: E501
        # verify the required parameter 'limit' is set
        if ('limit' not in params or
                params['limit'] is None):
            raise ValueError("Missing the required parameter `limit` when calling `get_translations_translations`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'did' in params:
            path_params['did'] = params['did']  # noqa: E501

        query_params = []
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/translations/d/{did}', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200101',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def get_translator_formats_translations(self, **kwargs):  # noqa: E501
        """Get Translation Formats  # noqa: E501

        Get a list of all translator formats. Some are valid only as input formats and cannot be used as                 an output format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_translator_formats_translations(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse200100
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_translator_formats_translations_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_translator_formats_translations_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_translator_formats_translations_with_http_info(self, **kwargs):  # noqa: E501
        """Get Translation Formats  # noqa: E501

        Get a list of all translator formats. Some are valid only as input formats and cannot be used as                 an output format.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_translator_formats_translations_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :return: InlineResponse200100
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = []  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_translator_formats_translations" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/translations/translationformats', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse200100',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
