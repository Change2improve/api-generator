# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class FoldersApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_acl_folders(self, fid, **kwargs):  # noqa: E501
        """Get Access Control List  # noqa: E501

        Get list of entities with access to a folder and the permissions granted to them. The caller must                 have read access for the folder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_acl_folders(fid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str fid: Folder ID (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_acl_folders_with_http_info(fid, **kwargs)  # noqa: E501
        else:
            (data) = self.get_acl_folders_with_http_info(fid, **kwargs)  # noqa: E501
            return data

    def get_acl_folders_with_http_info(self, fid, **kwargs):  # noqa: E501
        """Get Access Control List  # noqa: E501

        Get list of entities with access to a folder and the permissions granted to them. The caller must                 have read access for the folder.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_acl_folders_with_http_info(fid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str fid: Folder ID (required)
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fid']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_acl_folders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fid' is set
        if ('fid' not in params or
                params['fid'] is None):
            raise ValueError("Missing the required parameter `fid` when calling `get_acl_folders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fid' in params:
            path_params['fid'] = params['fid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/folders/{fid}/acl', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20046',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def share_folder_folders(self, fid, **kwargs):  # noqa: E501
        """Share Folder  # noqa: E501

        Share folder with one or more entities, which may be users, companies, teams or applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.share_folder_folders(fid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str fid: Folder ID (required)
        :param Body28 body: The JSON request body.
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.share_folder_folders_with_http_info(fid, **kwargs)  # noqa: E501
        else:
            (data) = self.share_folder_folders_with_http_info(fid, **kwargs)  # noqa: E501
            return data

    def share_folder_folders_with_http_info(self, fid, **kwargs):  # noqa: E501
        """Share Folder  # noqa: E501

        Share folder with one or more entities, which may be users, companies, teams or applications.  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.share_folder_folders_with_http_info(fid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str fid: Folder ID (required)
        :param Body28 body: The JSON request body.
        :return: InlineResponse20046
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['fid', 'body']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method share_folder_folders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'fid' is set
        if ('fid' not in params or
                params['fid'] is None):
            raise ValueError("Missing the required parameter `fid` when calling `share_folder_folders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'fid' in params:
            path_params['fid'] = params['fid']  # noqa: E501

        query_params = []

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        if 'body' in params:
            body_params = params['body']
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/folders/{fid}/share', 'POST',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='InlineResponse20046',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)

    def un_share_folders(self, eid, fid, **kwargs):  # noqa: E501
        """Unshare Folder  # noqa: E501

        Remove share permissions from folder  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.un_share_folders(eid, fid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str eid: Entry ID of the share entry to be deleted (required)
        :param str fid: Folder ID (required)
        :param float entry_type: The type of entity referenced by eid. Valid values are 0=User,           1=Company, 2=Team, 4=Application.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.un_share_folders_with_http_info(eid, fid, **kwargs)  # noqa: E501
        else:
            (data) = self.un_share_folders_with_http_info(eid, fid, **kwargs)  # noqa: E501
            return data

    def un_share_folders_with_http_info(self, eid, fid, **kwargs):  # noqa: E501
        """Unshare Folder  # noqa: E501

        Remove share permissions from folder  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.un_share_folders_with_http_info(eid, fid, async=True)
        >>> result = thread.get()

        :param async bool
        :param str eid: Entry ID of the share entry to be deleted (required)
        :param str fid: Folder ID (required)
        :param float entry_type: The type of entity referenced by eid. Valid values are 0=User,           1=Company, 2=Team, 4=Application.
        :return: None
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['eid', 'fid', 'entry_type']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method un_share_folders" % key
                )
            params[key] = val
        del params['kwargs']
        # verify the required parameter 'eid' is set
        if ('eid' not in params or
                params['eid'] is None):
            raise ValueError("Missing the required parameter `eid` when calling `un_share_folders`")  # noqa: E501
        # verify the required parameter 'fid' is set
        if ('fid' not in params or
                params['fid'] is None):
            raise ValueError("Missing the required parameter `fid` when calling `un_share_folders`")  # noqa: E501

        collection_formats = {}

        path_params = {}
        if 'eid' in params:
            path_params['eid'] = params['eid']  # noqa: E501
        if 'fid' in params:
            path_params['fid'] = params['fid']  # noqa: E501

        query_params = []
        if 'entry_type' in params:
            query_params.append(('entryType', params['entry_type']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/folders/{fid}/share/{eid}', 'DELETE',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type=None,  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
