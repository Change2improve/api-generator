# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


from __future__ import absolute_import

import re  # noqa: F401

# python 2 and python 3 compatibility library
import six

from swagger_client.api_client import ApiClient


class DocumentsApi(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    Ref: https://github.com/swagger-api/swagger-codegen
    """

    def __init__(self, api_client=None):
        if api_client is None:
            api_client = ApiClient()
        self.api_client = api_client

    def get_documents_documents(self, **kwargs):  # noqa: E501
        """Get Documents  # noqa: E501

        Search for documents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_documents_documents(async=True)
        >>> result = thread.get()

        :param async bool
        :param str q: Search for documents that contain the given string in the name. Search is           not case-sensitive.
        :param float filter: Filter ID, which can be 0: my docs, 1: created, 2: shared, 3: trash,           4: public, 5: recent, 6: by owner, 7: by company, or 9: by team
        :param str owner: Document owner's ID if filter is 6 or 7. Team Id if filter is 9
        :param float owner_type: Type of owner, which can be 0: user, 1: company, 2: onshape. If           owner is a teamId, leave this unspecified.
        :param str sort_column: Column by which to sort search results. Valid options           are name, modifiedAt, createdAt, email, modifiedBy, and promotedAt
        :param str sort_order: Sort order, which can be desc: descending, or asc: ascending
        :param float offset: Where to begin search results
        :param float limit: Number of results to return per page (max is 20)
        :return: GetDocumentsDocuments
                 If the method is called asynchronously,
                 returns the request thread.
        """
        kwargs['_return_http_data_only'] = True
        if kwargs.get('async'):
            return self.get_documents_documents_with_http_info(**kwargs)  # noqa: E501
        else:
            (data) = self.get_documents_documents_with_http_info(**kwargs)  # noqa: E501
            return data

    def get_documents_documents_with_http_info(self, **kwargs):  # noqa: E501
        """Get Documents  # noqa: E501

        Search for documents  # noqa: E501
        This method makes a synchronous HTTP request by default. To make an
        asynchronous HTTP request, please pass async=True
        >>> thread = api.get_documents_documents_with_http_info(async=True)
        >>> result = thread.get()

        :param async bool
        :param str q: Search for documents that contain the given string in the name. Search is           not case-sensitive.
        :param float filter: Filter ID, which can be 0: my docs, 1: created, 2: shared, 3: trash,           4: public, 5: recent, 6: by owner, 7: by company, or 9: by team
        :param str owner: Document owner's ID if filter is 6 or 7. Team Id if filter is 9
        :param float owner_type: Type of owner, which can be 0: user, 1: company, 2: onshape. If           owner is a teamId, leave this unspecified.
        :param str sort_column: Column by which to sort search results. Valid options           are name, modifiedAt, createdAt, email, modifiedBy, and promotedAt
        :param str sort_order: Sort order, which can be desc: descending, or asc: ascending
        :param float offset: Where to begin search results
        :param float limit: Number of results to return per page (max is 20)
        :return: GetDocumentsDocuments
                 If the method is called asynchronously,
                 returns the request thread.
        """

        all_params = ['q', 'filter', 'owner', 'owner_type', 'sort_column', 'sort_order', 'offset', 'limit']  # noqa: E501
        all_params.append('async')
        all_params.append('_return_http_data_only')
        all_params.append('_preload_content')
        all_params.append('_request_timeout')

        params = locals()
        for key, val in six.iteritems(params['kwargs']):
            if key not in all_params:
                raise TypeError(
                    "Got an unexpected keyword argument '%s'"
                    " to method get_documents_documents" % key
                )
            params[key] = val
        del params['kwargs']

        collection_formats = {}

        path_params = {}

        query_params = []
        if 'q' in params:
            query_params.append(('q', params['q']))  # noqa: E501
        if 'filter' in params:
            query_params.append(('filter', params['filter']))  # noqa: E501
        if 'owner' in params:
            query_params.append(('owner', params['owner']))  # noqa: E501
        if 'owner_type' in params:
            query_params.append(('ownerType', params['owner_type']))  # noqa: E501
        if 'sort_column' in params:
            query_params.append(('sortColumn', params['sort_column']))  # noqa: E501
        if 'sort_order' in params:
            query_params.append(('sortOrder', params['sort_order']))  # noqa: E501
        if 'offset' in params:
            query_params.append(('offset', params['offset']))  # noqa: E501
        if 'limit' in params:
            query_params.append(('limit', params['limit']))  # noqa: E501

        header_params = {}

        form_params = []
        local_var_files = {}

        body_params = None
        # HTTP header `Accept`
        header_params['Accept'] = self.api_client.select_header_accept(
            ['application/json'])  # noqa: E501

        # HTTP header `Content-Type`
        header_params['Content-Type'] = self.api_client.select_header_content_type(  # noqa: E501
            ['application/json'])  # noqa: E501

        # Authentication setting
        auth_settings = ['OAuth2', 'apiAccessKey', 'apiSecretKey']  # noqa: E501

        return self.api_client.call_api(
            '/documents', 'GET',
            path_params,
            query_params,
            header_params,
            body=body_params,
            post_params=form_params,
            files=local_var_files,
            response_type='GetDocumentsDocuments',  # noqa: E501
            auth_settings=auth_settings,
            async=params.get('async'),
            _return_http_data_only=params.get('_return_http_data_only'),
            _preload_content=params.get('_preload_content', True),
            _request_timeout=params.get('_request_timeout'),
            collection_formats=collection_formats)
