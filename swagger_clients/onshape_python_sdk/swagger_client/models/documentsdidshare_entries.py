# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class DocumentsdidshareEntries(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'company_id': 'str',
        'email': 'str',
        'team_id': 'str',
        'user_id': 'str',
        'application_id': 'str',
        'entry_type': 'str'
    }

    attribute_map = {
        'company_id': 'companyId',
        'email': 'email',
        'team_id': 'teamId',
        'user_id': 'userId',
        'application_id': 'applicationId',
        'entry_type': 'entryType'
    }

    def __init__(self, company_id=None, email=None, team_id=None, user_id=None, application_id=None, entry_type=None):  # noqa: E501
        """DocumentsdidshareEntries - a model defined in Swagger"""  # noqa: E501

        self._company_id = None
        self._email = None
        self._team_id = None
        self._user_id = None
        self._application_id = None
        self._entry_type = None
        self.discriminator = None

        if company_id is not None:
            self.company_id = company_id
        if email is not None:
            self.email = email
        if team_id is not None:
            self.team_id = team_id
        if user_id is not None:
            self.user_id = user_id
        if application_id is not None:
            self.application_id = application_id
        self.entry_type = entry_type

    @property
    def company_id(self):
        """Gets the company_id of this DocumentsdidshareEntries.  # noqa: E501

        The ID of an Onshape Company to share with  # noqa: E501

        :return: The company_id of this DocumentsdidshareEntries.  # noqa: E501
        :rtype: str
        """
        return self._company_id

    @company_id.setter
    def company_id(self, company_id):
        """Sets the company_id of this DocumentsdidshareEntries.

        The ID of an Onshape Company to share with  # noqa: E501

        :param company_id: The company_id of this DocumentsdidshareEntries.  # noqa: E501
        :type: str
        """

        self._company_id = company_id

    @property
    def email(self):
        """Gets the email of this DocumentsdidshareEntries.  # noqa: E501

        The email of a user to share with. If the email is not     associated with an existing Onshape user, an invite email will be sent to the email address if update=false,     otherwise the response will be a NOT FOUND error.  # noqa: E501

        :return: The email of this DocumentsdidshareEntries.  # noqa: E501
        :rtype: str
        """
        return self._email

    @email.setter
    def email(self, email):
        """Sets the email of this DocumentsdidshareEntries.

        The email of a user to share with. If the email is not     associated with an existing Onshape user, an invite email will be sent to the email address if update=false,     otherwise the response will be a NOT FOUND error.  # noqa: E501

        :param email: The email of this DocumentsdidshareEntries.  # noqa: E501
        :type: str
        """

        self._email = email

    @property
    def team_id(self):
        """Gets the team_id of this DocumentsdidshareEntries.  # noqa: E501

        The ID of an Onshape Team to share with  # noqa: E501

        :return: The team_id of this DocumentsdidshareEntries.  # noqa: E501
        :rtype: str
        """
        return self._team_id

    @team_id.setter
    def team_id(self, team_id):
        """Sets the team_id of this DocumentsdidshareEntries.

        The ID of an Onshape Team to share with  # noqa: E501

        :param team_id: The team_id of this DocumentsdidshareEntries.  # noqa: E501
        :type: str
        """

        self._team_id = team_id

    @property
    def user_id(self):
        """Gets the user_id of this DocumentsdidshareEntries.  # noqa: E501

        The ID of an Onshape User to share with  # noqa: E501

        :return: The user_id of this DocumentsdidshareEntries.  # noqa: E501
        :rtype: str
        """
        return self._user_id

    @user_id.setter
    def user_id(self, user_id):
        """Sets the user_id of this DocumentsdidshareEntries.

        The ID of an Onshape User to share with  # noqa: E501

        :param user_id: The user_id of this DocumentsdidshareEntries.  # noqa: E501
        :type: str
        """

        self._user_id = user_id

    @property
    def application_id(self):
        """Gets the application_id of this DocumentsdidshareEntries.  # noqa: E501

        The ID of an Onshape Application to share with.     Note that application sharing only allows READ to be specified as a permission.  # noqa: E501

        :return: The application_id of this DocumentsdidshareEntries.  # noqa: E501
        :rtype: str
        """
        return self._application_id

    @application_id.setter
    def application_id(self, application_id):
        """Sets the application_id of this DocumentsdidshareEntries.

        The ID of an Onshape Application to share with.     Note that application sharing only allows READ to be specified as a permission.  # noqa: E501

        :param application_id: The application_id of this DocumentsdidshareEntries.  # noqa: E501
        :type: str
        """

        self._application_id = application_id

    @property
    def entry_type(self):
        """Gets the entry_type of this DocumentsdidshareEntries.  # noqa: E501

        The type of entity that whe are sharing with. Valid values are      0=User (specify userId or email), 1=Company, 2=Team, 4=Application. Must correspond to the id field populated.  # noqa: E501

        :return: The entry_type of this DocumentsdidshareEntries.  # noqa: E501
        :rtype: str
        """
        return self._entry_type

    @entry_type.setter
    def entry_type(self, entry_type):
        """Sets the entry_type of this DocumentsdidshareEntries.

        The type of entity that whe are sharing with. Valid values are      0=User (specify userId or email), 1=Company, 2=Team, 4=Application. Must correspond to the id field populated.  # noqa: E501

        :param entry_type: The entry_type of this DocumentsdidshareEntries.  # noqa: E501
        :type: str
        """
        if entry_type is None:
            raise ValueError("Invalid value for `entry_type`, must not be `None`")  # noqa: E501

        self._entry_type = entry_type

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, DocumentsdidshareEntries):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
