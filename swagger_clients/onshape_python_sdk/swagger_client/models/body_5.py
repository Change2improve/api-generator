# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body5(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'format': 'str',
        'store_in_document': 'bool',
        'link_document_workspace_id': 'str',
        'part_ids': 'str',
        'microversion': 'str',
        'grouping': 'bool',
        'zip_single_file_output': 'bool',
        'scale': 'float',
        'units': 'str',
        'angle_tolerance': 'float',
        'chord_tolerance': 'float',
        'max_facet_width': 'float',
        'min_facet_width': 'float',
        'mode': 'str',
        'version': 'float'
    }

    attribute_map = {
        'format': 'format',
        'store_in_document': 'storeInDocument',
        'link_document_workspace_id': 'linkDocumentWorkspaceId',
        'part_ids': 'partIds',
        'microversion': 'microversion',
        'grouping': 'grouping',
        'zip_single_file_output': 'zipSingleFileOutput',
        'scale': 'scale',
        'units': 'units',
        'angle_tolerance': 'angleTolerance',
        'chord_tolerance': 'chordTolerance',
        'max_facet_width': 'maxFacetWidth',
        'min_facet_width': 'minFacetWidth',
        'mode': 'mode',
        'version': 'version'
    }

    def __init__(self, format=None, store_in_document=None, link_document_workspace_id=None, part_ids=None, microversion=None, grouping=None, zip_single_file_output=None, scale=None, units=None, angle_tolerance=None, chord_tolerance=None, max_facet_width=None, min_facet_width=None, mode=None, version=None):  # noqa: E501
        """Body5 - a model defined in Swagger"""  # noqa: E501

        self._format = None
        self._store_in_document = None
        self._link_document_workspace_id = None
        self._part_ids = None
        self._microversion = None
        self._grouping = None
        self._zip_single_file_output = None
        self._scale = None
        self._units = None
        self._angle_tolerance = None
        self._chord_tolerance = None
        self._max_facet_width = None
        self._min_facet_width = None
        self._mode = None
        self._version = None
        self.discriminator = None

        self.format = format
        if store_in_document is not None:
            self.store_in_document = store_in_document
        if link_document_workspace_id is not None:
            self.link_document_workspace_id = link_document_workspace_id
        if part_ids is not None:
            self.part_ids = part_ids
        if microversion is not None:
            self.microversion = microversion
        if grouping is not None:
            self.grouping = grouping
        if zip_single_file_output is not None:
            self.zip_single_file_output = zip_single_file_output
        self.scale = scale
        if units is not None:
            self.units = units
        if angle_tolerance is not None:
            self.angle_tolerance = angle_tolerance
        if chord_tolerance is not None:
            self.chord_tolerance = chord_tolerance
        if max_facet_width is not None:
            self.max_facet_width = max_facet_width
        if min_facet_width is not None:
            self.min_facet_width = min_facet_width
        self.mode = mode
        if version is not None:
            self.version = version

    @property
    def format(self):
        """Gets the format of this Body5.  # noqa: E501

        Export format: STL, PS  # noqa: E501

        :return: The format of this Body5.  # noqa: E501
        :rtype: str
        """
        return self._format

    @format.setter
    def format(self, format):
        """Sets the format of this Body5.

        Export format: STL, PS  # noqa: E501

        :param format: The format of this Body5.  # noqa: E501
        :type: str
        """
        if format is None:
            raise ValueError("Invalid value for `format`, must not be `None`")  # noqa: E501

        self._format = format

    @property
    def store_in_document(self):
        """Gets the store_in_document of this Body5.  # noqa: E501

        whether the output should be stored as a new element  # noqa: E501

        :return: The store_in_document of this Body5.  # noqa: E501
        :rtype: bool
        """
        return self._store_in_document

    @store_in_document.setter
    def store_in_document(self, store_in_document):
        """Sets the store_in_document of this Body5.

        whether the output should be stored as a new element  # noqa: E501

        :param store_in_document: The store_in_document of this Body5.  # noqa: E501
        :type: bool
        """

        self._store_in_document = store_in_document

    @property
    def link_document_workspace_id(self):
        """Gets the link_document_workspace_id of this Body5.  # noqa: E501

        The id of the workspace in which the result should be stored           if storeInDocument is true and linkDocumentId is set.  # noqa: E501

        :return: The link_document_workspace_id of this Body5.  # noqa: E501
        :rtype: str
        """
        return self._link_document_workspace_id

    @link_document_workspace_id.setter
    def link_document_workspace_id(self, link_document_workspace_id):
        """Sets the link_document_workspace_id of this Body5.

        The id of the workspace in which the result should be stored           if storeInDocument is true and linkDocumentId is set.  # noqa: E501

        :param link_document_workspace_id: The link_document_workspace_id of this Body5.  # noqa: E501
        :type: str
        """

        self._link_document_workspace_id = link_document_workspace_id

    @property
    def part_ids(self):
        """Gets the part_ids of this Body5.  # noqa: E501

        Comma-separated list of part IDs to export  # noqa: E501

        :return: The part_ids of this Body5.  # noqa: E501
        :rtype: str
        """
        return self._part_ids

    @part_ids.setter
    def part_ids(self, part_ids):
        """Sets the part_ids of this Body5.

        Comma-separated list of part IDs to export  # noqa: E501

        :param part_ids: The part_ids of this Body5.  # noqa: E501
        :type: str
        """

        self._part_ids = part_ids

    @property
    def microversion(self):
        """Gets the microversion of this Body5.  # noqa: E501

        Specified microversion for operation  # noqa: E501

        :return: The microversion of this Body5.  # noqa: E501
        :rtype: str
        """
        return self._microversion

    @microversion.setter
    def microversion(self, microversion):
        """Sets the microversion of this Body5.

        Specified microversion for operation  # noqa: E501

        :param microversion: The microversion of this Body5.  # noqa: E501
        :type: str
        """

        self._microversion = microversion

    @property
    def grouping(self):
        """Gets the grouping of this Body5.  # noqa: E501

        Whether parts should be exported as a group or individually in a .zip           file (STL)  # noqa: E501

        :return: The grouping of this Body5.  # noqa: E501
        :rtype: bool
        """
        return self._grouping

    @grouping.setter
    def grouping(self, grouping):
        """Sets the grouping of this Body5.

        Whether parts should be exported as a group or individually in a .zip           file (STL)  # noqa: E501

        :param grouping: The grouping of this Body5.  # noqa: E501
        :type: bool
        """

        self._grouping = grouping

    @property
    def zip_single_file_output(self):
        """Gets the zip_single_file_output of this Body5.  # noqa: E501

        Whether single file output should be returned as a .zip           file (STL, grouping==true)  # noqa: E501

        :return: The zip_single_file_output of this Body5.  # noqa: E501
        :rtype: bool
        """
        return self._zip_single_file_output

    @zip_single_file_output.setter
    def zip_single_file_output(self, zip_single_file_output):
        """Sets the zip_single_file_output of this Body5.

        Whether single file output should be returned as a .zip           file (STL, grouping==true)  # noqa: E501

        :param zip_single_file_output: The zip_single_file_output of this Body5.  # noqa: E501
        :type: bool
        """

        self._zip_single_file_output = zip_single_file_output

    @property
    def scale(self):
        """Gets the scale of this Body5.  # noqa: E501

        Scale for measurements (STL)  # noqa: E501

        :return: The scale of this Body5.  # noqa: E501
        :rtype: float
        """
        return self._scale

    @scale.setter
    def scale(self, scale):
        """Sets the scale of this Body5.

        Scale for measurements (STL)  # noqa: E501

        :param scale: The scale of this Body5.  # noqa: E501
        :type: float
        """
        if scale is None:
            raise ValueError("Invalid value for `scale`, must not be `None`")  # noqa: E501

        self._scale = scale

    @property
    def units(self):
        """Gets the units of this Body5.  # noqa: E501

        Name of base unit: meter, centimeter, millimeter, inch, foot, yard (STL)  # noqa: E501

        :return: The units of this Body5.  # noqa: E501
        :rtype: str
        """
        return self._units

    @units.setter
    def units(self, units):
        """Sets the units of this Body5.

        Name of base unit: meter, centimeter, millimeter, inch, foot, yard (STL)  # noqa: E501

        :param units: The units of this Body5.  # noqa: E501
        :type: str
        """

        self._units = units

    @property
    def angle_tolerance(self):
        """Gets the angle_tolerance of this Body5.  # noqa: E501

        Angle tolerance (must be < pi/2) (STL)  # noqa: E501

        :return: The angle_tolerance of this Body5.  # noqa: E501
        :rtype: float
        """
        return self._angle_tolerance

    @angle_tolerance.setter
    def angle_tolerance(self, angle_tolerance):
        """Sets the angle_tolerance of this Body5.

        Angle tolerance (must be < pi/2) (STL)  # noqa: E501

        :param angle_tolerance: The angle_tolerance of this Body5.  # noqa: E501
        :type: float
        """

        self._angle_tolerance = angle_tolerance

    @property
    def chord_tolerance(self):
        """Gets the chord_tolerance of this Body5.  # noqa: E501

        Chord tolerance (STL)  # noqa: E501

        :return: The chord_tolerance of this Body5.  # noqa: E501
        :rtype: float
        """
        return self._chord_tolerance

    @chord_tolerance.setter
    def chord_tolerance(self, chord_tolerance):
        """Sets the chord_tolerance of this Body5.

        Chord tolerance (STL)  # noqa: E501

        :param chord_tolerance: The chord_tolerance of this Body5.  # noqa: E501
        :type: float
        """

        self._chord_tolerance = chord_tolerance

    @property
    def max_facet_width(self):
        """Gets the max_facet_width of this Body5.  # noqa: E501

        Maximum facet width (STL)  # noqa: E501

        :return: The max_facet_width of this Body5.  # noqa: E501
        :rtype: float
        """
        return self._max_facet_width

    @max_facet_width.setter
    def max_facet_width(self, max_facet_width):
        """Sets the max_facet_width of this Body5.

        Maximum facet width (STL)  # noqa: E501

        :param max_facet_width: The max_facet_width of this Body5.  # noqa: E501
        :type: float
        """

        self._max_facet_width = max_facet_width

    @property
    def min_facet_width(self):
        """Gets the min_facet_width of this Body5.  # noqa: E501

        Minimum facet width (must be < maximumFacetWidth) (STL)  # noqa: E501

        :return: The min_facet_width of this Body5.  # noqa: E501
        :rtype: float
        """
        return self._min_facet_width

    @min_facet_width.setter
    def min_facet_width(self, min_facet_width):
        """Sets the min_facet_width of this Body5.

        Minimum facet width (must be < maximumFacetWidth) (STL)  # noqa: E501

        :param min_facet_width: The min_facet_width of this Body5.  # noqa: E501
        :type: float
        """

        self._min_facet_width = min_facet_width

    @property
    def mode(self):
        """Gets the mode of this Body5.  # noqa: E501

        Type of file: text, binary (STL)  # noqa: E501

        :return: The mode of this Body5.  # noqa: E501
        :rtype: str
        """
        return self._mode

    @mode.setter
    def mode(self, mode):
        """Sets the mode of this Body5.

        Type of file: text, binary (STL)  # noqa: E501

        :param mode: The mode of this Body5.  # noqa: E501
        :type: str
        """
        if mode is None:
            raise ValueError("Invalid value for `mode`, must not be `None`")  # noqa: E501

        self._mode = mode

    @property
    def version(self):
        """Gets the version of this Body5.  # noqa: E501

        Parasolid version (PS)  # noqa: E501

        :return: The version of this Body5.  # noqa: E501
        :rtype: float
        """
        return self._version

    @version.setter
    def version(self, version):
        """Sets the version of this Body5.

        Parasolid version (PS)  # noqa: E501

        :param version: The version of this Body5.  # noqa: E501
        :type: float
        """

        self._version = version

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body5):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
