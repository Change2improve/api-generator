# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.inline_response20011_entries import InlineResponse20011Entries  # noqa: F401,E501
from swagger_client.models.inline_response20011_inherited_acls import InlineResponse20011InheritedAcls  # noqa: F401,E501
from swagger_client.models.inline_response20011_owner import InlineResponse20011Owner  # noqa: F401,E501


class InlineResponse20011(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'is_public': 'bool',
        'is_admin': 'bool',
        'shared_with_support': 'bool',
        'visibility': 'str',
        'entries': 'list[InlineResponse20011Entries]',
        'object_id': 'str',
        'object_type': 'float',
        'owner': 'InlineResponse20011Owner',
        'id': 'str',
        'name': 'str',
        'href': 'str',
        'inherited_acls': 'list[InlineResponse20011InheritedAcls]'
    }

    attribute_map = {
        'is_public': 'isPublic',
        'is_admin': 'isAdmin',
        'shared_with_support': 'sharedWithSupport',
        'visibility': 'visibility',
        'entries': 'entries',
        'object_id': 'objectId',
        'object_type': 'objectType',
        'owner': 'owner',
        'id': 'id',
        'name': 'name',
        'href': 'href',
        'inherited_acls': 'inheritedAcls'
    }

    def __init__(self, is_public=None, is_admin=None, shared_with_support=None, visibility=None, entries=None, object_id=None, object_type=None, owner=None, id=None, name=None, href=None, inherited_acls=None):  # noqa: E501
        """InlineResponse20011 - a model defined in Swagger"""  # noqa: E501

        self._is_public = None
        self._is_admin = None
        self._shared_with_support = None
        self._visibility = None
        self._entries = None
        self._object_id = None
        self._object_type = None
        self._owner = None
        self._id = None
        self._name = None
        self._href = None
        self._inherited_acls = None
        self.discriminator = None

        self.is_public = is_public
        self.is_admin = is_admin
        self.shared_with_support = shared_with_support
        self.visibility = visibility
        self.entries = entries
        self.object_id = object_id
        self.object_type = object_type
        self.owner = owner
        self.id = id
        self.name = name
        self.href = href
        self.inherited_acls = inherited_acls

    @property
    def is_public(self):
        """Gets the is_public of this InlineResponse20011.  # noqa: E501

        True if the object is public  # noqa: E501

        :return: The is_public of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._is_public

    @is_public.setter
    def is_public(self, is_public):
        """Sets the is_public of this InlineResponse20011.

        True if the object is public  # noqa: E501

        :param is_public: The is_public of this InlineResponse20011.  # noqa: E501
        :type: bool
        """
        if is_public is None:
            raise ValueError("Invalid value for `is_public`, must not be `None`")  # noqa: E501

        self._is_public = is_public

    @property
    def is_admin(self):
        """Gets the is_admin of this InlineResponse20011.  # noqa: E501

        True if the requesting user has RESHARE privileges on the object.      If set to false, entries that do not relate to the caller are removed from the output.  # noqa: E501

        :return: The is_admin of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._is_admin

    @is_admin.setter
    def is_admin(self, is_admin):
        """Sets the is_admin of this InlineResponse20011.

        True if the requesting user has RESHARE privileges on the object.      If set to false, entries that do not relate to the caller are removed from the output.  # noqa: E501

        :param is_admin: The is_admin of this InlineResponse20011.  # noqa: E501
        :type: bool
        """
        if is_admin is None:
            raise ValueError("Invalid value for `is_admin`, must not be `None`")  # noqa: E501

        self._is_admin = is_admin

    @property
    def shared_with_support(self):
        """Gets the shared_with_support of this InlineResponse20011.  # noqa: E501

        True if the object is shared with support  # noqa: E501

        :return: The shared_with_support of this InlineResponse20011.  # noqa: E501
        :rtype: bool
        """
        return self._shared_with_support

    @shared_with_support.setter
    def shared_with_support(self, shared_with_support):
        """Sets the shared_with_support of this InlineResponse20011.

        True if the object is shared with support  # noqa: E501

        :param shared_with_support: The shared_with_support of this InlineResponse20011.  # noqa: E501
        :type: bool
        """
        if shared_with_support is None:
            raise ValueError("Invalid value for `shared_with_support`, must not be `None`")  # noqa: E501

        self._shared_with_support = shared_with_support

    @property
    def visibility(self):
        """Gets the visibility of this InlineResponse20011.  # noqa: E501

        A description string indicating whether the object is public or private  # noqa: E501

        :return: The visibility of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._visibility

    @visibility.setter
    def visibility(self, visibility):
        """Sets the visibility of this InlineResponse20011.

        A description string indicating whether the object is public or private  # noqa: E501

        :param visibility: The visibility of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if visibility is None:
            raise ValueError("Invalid value for `visibility`, must not be `None`")  # noqa: E501

        self._visibility = visibility

    @property
    def entries(self):
        """Gets the entries of this InlineResponse20011.  # noqa: E501

        The current share entries for the object. Each share entry indicates      an entity that the object is shared with and the permissions granted to the entity  # noqa: E501

        :return: The entries of this InlineResponse20011.  # noqa: E501
        :rtype: list[InlineResponse20011Entries]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this InlineResponse20011.

        The current share entries for the object. Each share entry indicates      an entity that the object is shared with and the permissions granted to the entity  # noqa: E501

        :param entries: The entries of this InlineResponse20011.  # noqa: E501
        :type: list[InlineResponse20011Entries]
        """
        if entries is None:
            raise ValueError("Invalid value for `entries`, must not be `None`")  # noqa: E501

        self._entries = entries

    @property
    def object_id(self):
        """Gets the object_id of this InlineResponse20011.  # noqa: E501

        The ID of the object  # noqa: E501

        :return: The object_id of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._object_id

    @object_id.setter
    def object_id(self, object_id):
        """Sets the object_id of this InlineResponse20011.

        The ID of the object  # noqa: E501

        :param object_id: The object_id of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if object_id is None:
            raise ValueError("Invalid value for `object_id`, must not be `None`")  # noqa: E501

        self._object_id = object_id

    @property
    def object_type(self):
        """Gets the object_type of this InlineResponse20011.  # noqa: E501

        Set to the value 1, indicating the the objectId indicates a document,       or 4, indicating that the objectId indicates a folder  # noqa: E501

        :return: The object_type of this InlineResponse20011.  # noqa: E501
        :rtype: float
        """
        return self._object_type

    @object_type.setter
    def object_type(self, object_type):
        """Sets the object_type of this InlineResponse20011.

        Set to the value 1, indicating the the objectId indicates a document,       or 4, indicating that the objectId indicates a folder  # noqa: E501

        :param object_type: The object_type of this InlineResponse20011.  # noqa: E501
        :type: float
        """
        if object_type is None:
            raise ValueError("Invalid value for `object_type`, must not be `None`")  # noqa: E501

        self._object_type = object_type

    @property
    def owner(self):
        """Gets the owner of this InlineResponse20011.  # noqa: E501


        :return: The owner of this InlineResponse20011.  # noqa: E501
        :rtype: InlineResponse20011Owner
        """
        return self._owner

    @owner.setter
    def owner(self, owner):
        """Sets the owner of this InlineResponse20011.


        :param owner: The owner of this InlineResponse20011.  # noqa: E501
        :type: InlineResponse20011Owner
        """
        if owner is None:
            raise ValueError("Invalid value for `owner`, must not be `None`")  # noqa: E501

        self._owner = owner

    @property
    def id(self):
        """Gets the id of this InlineResponse20011.  # noqa: E501

        Not used  # noqa: E501

        :return: The id of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._id

    @id.setter
    def id(self, id):
        """Sets the id of this InlineResponse20011.

        Not used  # noqa: E501

        :param id: The id of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if id is None:
            raise ValueError("Invalid value for `id`, must not be `None`")  # noqa: E501

        self._id = id

    @property
    def name(self):
        """Gets the name of this InlineResponse20011.  # noqa: E501

        Not used  # noqa: E501

        :return: The name of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this InlineResponse20011.

        Not used  # noqa: E501

        :param name: The name of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def href(self):
        """Gets the href of this InlineResponse20011.  # noqa: E501

        A URL referencing the API to get this structure  # noqa: E501

        :return: The href of this InlineResponse20011.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this InlineResponse20011.

        A URL referencing the API to get this structure  # noqa: E501

        :param href: The href of this InlineResponse20011.  # noqa: E501
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def inherited_acls(self):
        """Gets the inherited_acls of this InlineResponse20011.  # noqa: E501

        A list of parent objects from which this object inherits access       rights. Parent objects are currently always folders  # noqa: E501

        :return: The inherited_acls of this InlineResponse20011.  # noqa: E501
        :rtype: list[InlineResponse20011InheritedAcls]
        """
        return self._inherited_acls

    @inherited_acls.setter
    def inherited_acls(self, inherited_acls):
        """Sets the inherited_acls of this InlineResponse20011.

        A list of parent objects from which this object inherits access       rights. Parent objects are currently always folders  # noqa: E501

        :param inherited_acls: The inherited_acls of this InlineResponse20011.  # noqa: E501
        :type: list[InlineResponse20011InheritedAcls]
        """
        if inherited_acls is None:
            raise ValueError("Invalid value for `inherited_acls`, must not be `None`")  # noqa: E501

        self._inherited_acls = inherited_acls

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse20011):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
