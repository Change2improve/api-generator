# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class InlineResponse2001ThumbnailSizes(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'size': 'str',
        'media_type': 'str',
        'href': 'str',
        'view_orientation': 'str',
        'render_mode': 'str'
    }

    attribute_map = {
        'size': 'size',
        'media_type': 'mediaType',
        'href': 'href',
        'view_orientation': 'viewOrientation',
        'render_mode': 'renderMode'
    }

    def __init__(self, size=None, media_type=None, href=None, view_orientation=None, render_mode=None):  # noqa: E501
        """InlineResponse2001ThumbnailSizes - a model defined in Swagger"""  # noqa: E501

        self._size = None
        self._media_type = None
        self._href = None
        self._view_orientation = None
        self._render_mode = None
        self.discriminator = None

        self.size = size
        self.media_type = media_type
        self.href = href
        self.view_orientation = view_orientation
        self.render_mode = render_mode

    @property
    def size(self):
        """Gets the size of this InlineResponse2001ThumbnailSizes.  # noqa: E501

        A size description string (e.g. 300x300)  # noqa: E501

        :return: The size of this InlineResponse2001ThumbnailSizes.  # noqa: E501
        :rtype: str
        """
        return self._size

    @size.setter
    def size(self, size):
        """Sets the size of this InlineResponse2001ThumbnailSizes.

        A size description string (e.g. 300x300)  # noqa: E501

        :param size: The size of this InlineResponse2001ThumbnailSizes.  # noqa: E501
        :type: str
        """
        if size is None:
            raise ValueError("Invalid value for `size`, must not be `None`")  # noqa: E501

        self._size = size

    @property
    def media_type(self):
        """Gets the media_type of this InlineResponse2001ThumbnailSizes.  # noqa: E501

        The image mediaType  # noqa: E501

        :return: The media_type of this InlineResponse2001ThumbnailSizes.  # noqa: E501
        :rtype: str
        """
        return self._media_type

    @media_type.setter
    def media_type(self, media_type):
        """Sets the media_type of this InlineResponse2001ThumbnailSizes.

        The image mediaType  # noqa: E501

        :param media_type: The media_type of this InlineResponse2001ThumbnailSizes.  # noqa: E501
        :type: str
        """
        if media_type is None:
            raise ValueError("Invalid value for `media_type`, must not be `None`")  # noqa: E501

        self._media_type = media_type

    @property
    def href(self):
        """Gets the href of this InlineResponse2001ThumbnailSizes.  # noqa: E501

        A URI to the thumbnail  # noqa: E501

        :return: The href of this InlineResponse2001ThumbnailSizes.  # noqa: E501
        :rtype: str
        """
        return self._href

    @href.setter
    def href(self, href):
        """Sets the href of this InlineResponse2001ThumbnailSizes.

        A URI to the thumbnail  # noqa: E501

        :param href: The href of this InlineResponse2001ThumbnailSizes.  # noqa: E501
        :type: str
        """
        if href is None:
            raise ValueError("Invalid value for `href`, must not be `None`")  # noqa: E501

        self._href = href

    @property
    def view_orientation(self):
        """Gets the view_orientation of this InlineResponse2001ThumbnailSizes.  # noqa: E501

        Reserved for future use  # noqa: E501

        :return: The view_orientation of this InlineResponse2001ThumbnailSizes.  # noqa: E501
        :rtype: str
        """
        return self._view_orientation

    @view_orientation.setter
    def view_orientation(self, view_orientation):
        """Sets the view_orientation of this InlineResponse2001ThumbnailSizes.

        Reserved for future use  # noqa: E501

        :param view_orientation: The view_orientation of this InlineResponse2001ThumbnailSizes.  # noqa: E501
        :type: str
        """
        if view_orientation is None:
            raise ValueError("Invalid value for `view_orientation`, must not be `None`")  # noqa: E501

        self._view_orientation = view_orientation

    @property
    def render_mode(self):
        """Gets the render_mode of this InlineResponse2001ThumbnailSizes.  # noqa: E501

        Reserved for future use  # noqa: E501

        :return: The render_mode of this InlineResponse2001ThumbnailSizes.  # noqa: E501
        :rtype: str
        """
        return self._render_mode

    @render_mode.setter
    def render_mode(self, render_mode):
        """Sets the render_mode of this InlineResponse2001ThumbnailSizes.

        Reserved for future use  # noqa: E501

        :param render_mode: The render_mode of this InlineResponse2001ThumbnailSizes.  # noqa: E501
        :type: str
        """
        if render_mode is None:
            raise ValueError("Invalid value for `render_mode`, must not be `None`")  # noqa: E501

        self._render_mode = render_mode

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, InlineResponse2001ThumbnailSizes):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
