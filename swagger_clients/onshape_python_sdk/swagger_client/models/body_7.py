# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six

from swagger_client.models.documentsdidshare_entries import DocumentsdidshareEntries  # noqa: F401,E501


class Body7(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_id': 'str',
        'workspace_id': 'str',
        'element_id': 'str',
        'entries': 'list[DocumentsdidshareEntries]',
        'permission_set': 'list[str]',
        'update': 'bool',
        'message': 'str'
    }

    attribute_map = {
        'document_id': 'documentId',
        'workspace_id': 'workspaceId',
        'element_id': 'elementId',
        'entries': 'entries',
        'permission_set': 'permissionSet',
        'update': 'update',
        'message': 'message'
    }

    def __init__(self, document_id=None, workspace_id=None, element_id=None, entries=None, permission_set=None, update=None, message=None):  # noqa: E501
        """Body7 - a model defined in Swagger"""  # noqa: E501

        self._document_id = None
        self._workspace_id = None
        self._element_id = None
        self._entries = None
        self._permission_set = None
        self._update = None
        self._message = None
        self.discriminator = None

        self.document_id = document_id
        if workspace_id is not None:
            self.workspace_id = workspace_id
        if element_id is not None:
            self.element_id = element_id
        self.entries = entries
        self.permission_set = permission_set
        if update is not None:
            self.update = update
        if message is not None:
            self.message = message

    @property
    def document_id(self):
        """Gets the document_id of this Body7.  # noqa: E501

        The ID of the document to be shared. Must match the document ID specified in           the URL.  # noqa: E501

        :return: The document_id of this Body7.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this Body7.

        The ID of the document to be shared. Must match the document ID specified in           the URL.  # noqa: E501

        :param document_id: The document_id of this Body7.  # noqa: E501
        :type: str
        """
        if document_id is None:
            raise ValueError("Invalid value for `document_id`, must not be `None`")  # noqa: E501

        self._document_id = document_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this Body7.  # noqa: E501

        The ID of a workspace for use as the scope of           sharing. Used only to form URLs in a share email to the share recipient.  # noqa: E501

        :return: The workspace_id of this Body7.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this Body7.

        The ID of a workspace for use as the scope of           sharing. Used only to form URLs in a share email to the share recipient.  # noqa: E501

        :param workspace_id: The workspace_id of this Body7.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    @property
    def element_id(self):
        """Gets the element_id of this Body7.  # noqa: E501

        The ID of an element within the document to share. Used only to form URLs           in a share email to the share recipient.  # noqa: E501

        :return: The element_id of this Body7.  # noqa: E501
        :rtype: str
        """
        return self._element_id

    @element_id.setter
    def element_id(self, element_id):
        """Sets the element_id of this Body7.

        The ID of an element within the document to share. Used only to form URLs           in a share email to the share recipient.  # noqa: E501

        :param element_id: The element_id of this Body7.  # noqa: E501
        :type: str
        """

        self._element_id = element_id

    @property
    def entries(self):
        """Gets the entries of this Body7.  # noqa: E501

        List of target entities to share with. Must not be empty.  # noqa: E501

        :return: The entries of this Body7.  # noqa: E501
        :rtype: list[DocumentsdidshareEntries]
        """
        return self._entries

    @entries.setter
    def entries(self, entries):
        """Sets the entries of this Body7.

        List of target entities to share with. Must not be empty.  # noqa: E501

        :param entries: The entries of this Body7.  # noqa: E501
        :type: list[DocumentsdidshareEntries]
        """
        if entries is None:
            raise ValueError("Invalid value for `entries`, must not be `None`")  # noqa: E501

        self._entries = entries

    @property
    def permission_set(self):
        """Gets the permission_set of this Body7.  # noqa: E501

        The permissions to grant to the entities. Must not be empty. The      valid permissions are READ, WRITE, DELETE, RESHARE, COMMENT, LINK, COPY, OWNER. It is an error for a      permission set to be specified that is identical to the current permissions for an entity in the entries      list.  # noqa: E501

        :return: The permission_set of this Body7.  # noqa: E501
        :rtype: list[str]
        """
        return self._permission_set

    @permission_set.setter
    def permission_set(self, permission_set):
        """Sets the permission_set of this Body7.

        The permissions to grant to the entities. Must not be empty. The      valid permissions are READ, WRITE, DELETE, RESHARE, COMMENT, LINK, COPY, OWNER. It is an error for a      permission set to be specified that is identical to the current permissions for an entity in the entries      list.  # noqa: E501

        :param permission_set: The permission_set of this Body7.  # noqa: E501
        :type: list[str]
        """
        if permission_set is None:
            raise ValueError("Invalid value for `permission_set`, must not be `None`")  # noqa: E501

        self._permission_set = permission_set

    @property
    def update(self):
        """Gets the update of this Body7.  # noqa: E501

        If true, indicates that the request is intended to be an update of existing      share permissions for the entities in the entries list.  # noqa: E501

        :return: The update of this Body7.  # noqa: E501
        :rtype: bool
        """
        return self._update

    @update.setter
    def update(self, update):
        """Sets the update of this Body7.

        If true, indicates that the request is intended to be an update of existing      share permissions for the entities in the entries list.  # noqa: E501

        :param update: The update of this Body7.  # noqa: E501
        :type: bool
        """

        self._update = update

    @property
    def message(self):
        """Gets the message of this Body7.  # noqa: E501

        An optional message to include in the share email.      This message has a maximum allowed size.  # noqa: E501

        :return: The message of this Body7.  # noqa: E501
        :rtype: str
        """
        return self._message

    @message.setter
    def message(self, message):
        """Sets the message of this Body7.

        An optional message to include in the share email.      This message has a maximum allowed size.  # noqa: E501

        :param message: The message of this Body7.  # noqa: E501
        :type: str
        """

        self._message = message

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body7):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
