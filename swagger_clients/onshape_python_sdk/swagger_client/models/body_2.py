# coding: utf-8

"""
    Onshape API

    Onshape API  # noqa: E501

    OpenAPI spec version: 1.0.0
    Contact: ekeller@onshape.com
    Generated by: https://github.com/swagger-api/swagger-codegen.git
"""


import pprint
import re  # noqa: F401

import six


class Body2(object):
    """NOTE: This class is auto generated by the swagger code generator program.

    Do not edit the class manually.
    """

    """
    Attributes:
      swagger_types (dict): The key is attribute name
                            and the value is attribute type.
      attribute_map (dict): The key is attribute name
                            and the value is json key in definition.
    """
    swagger_types = {
        'document_id': 'str',
        'workspace_id': 'str',
        'name': 'str',
        'description': 'str',
        'microversion_id': 'str',
        'from_history': 'bool'
    }

    attribute_map = {
        'document_id': 'documentId',
        'workspace_id': 'workspaceId',
        'name': 'name',
        'description': 'description',
        'microversion_id': 'microversionId',
        'from_history': 'fromHistory'
    }

    def __init__(self, document_id=None, workspace_id=None, name=None, description=None, microversion_id=None, from_history=None):  # noqa: E501
        """Body2 - a model defined in Swagger"""  # noqa: E501

        self._document_id = None
        self._workspace_id = None
        self._name = None
        self._description = None
        self._microversion_id = None
        self._from_history = None
        self.discriminator = None

        self.document_id = document_id
        if workspace_id is not None:
            self.workspace_id = workspace_id
        self.name = name
        if description is not None:
            self.description = description
        if microversion_id is not None:
            self.microversion_id = microversion_id
        if from_history is not None:
            self.from_history = from_history

    @property
    def document_id(self):
        """Gets the document_id of this Body2.  # noqa: E501

        Document ID (must match path parameter)  # noqa: E501

        :return: The document_id of this Body2.  # noqa: E501
        :rtype: str
        """
        return self._document_id

    @document_id.setter
    def document_id(self, document_id):
        """Sets the document_id of this Body2.

        Document ID (must match path parameter)  # noqa: E501

        :param document_id: The document_id of this Body2.  # noqa: E501
        :type: str
        """
        if document_id is None:
            raise ValueError("Invalid value for `document_id`, must not be `None`")  # noqa: E501

        self._document_id = document_id

    @property
    def workspace_id(self):
        """Gets the workspace_id of this Body2.  # noqa: E501

        Workspace ID of a workspace where the version will be created if           fromHistory is false. If fromHistory is false and workspaceId is not set, the default workspace is           used.  # noqa: E501

        :return: The workspace_id of this Body2.  # noqa: E501
        :rtype: str
        """
        return self._workspace_id

    @workspace_id.setter
    def workspace_id(self, workspace_id):
        """Sets the workspace_id of this Body2.

        Workspace ID of a workspace where the version will be created if           fromHistory is false. If fromHistory is false and workspaceId is not set, the default workspace is           used.  # noqa: E501

        :param workspace_id: The workspace_id of this Body2.  # noqa: E501
        :type: str
        """

        self._workspace_id = workspace_id

    @property
    def name(self):
        """Gets the name of this Body2.  # noqa: E501

        Version name  # noqa: E501

        :return: The name of this Body2.  # noqa: E501
        :rtype: str
        """
        return self._name

    @name.setter
    def name(self, name):
        """Sets the name of this Body2.

        Version name  # noqa: E501

        :param name: The name of this Body2.  # noqa: E501
        :type: str
        """
        if name is None:
            raise ValueError("Invalid value for `name`, must not be `None`")  # noqa: E501

        self._name = name

    @property
    def description(self):
        """Gets the description of this Body2.  # noqa: E501

        Version description  # noqa: E501

        :return: The description of this Body2.  # noqa: E501
        :rtype: str
        """
        return self._description

    @description.setter
    def description(self, description):
        """Sets the description of this Body2.

        Version description  # noqa: E501

        :param description: The description of this Body2.  # noqa: E501
        :type: str
        """

        self._description = description

    @property
    def microversion_id(self):
        """Gets the microversion_id of this Body2.  # noqa: E501

        Microversion ID at which to create the version if fromHistory is true  # noqa: E501

        :return: The microversion_id of this Body2.  # noqa: E501
        :rtype: str
        """
        return self._microversion_id

    @microversion_id.setter
    def microversion_id(self, microversion_id):
        """Sets the microversion_id of this Body2.

        Microversion ID at which to create the version if fromHistory is true  # noqa: E501

        :param microversion_id: The microversion_id of this Body2.  # noqa: E501
        :type: str
        """

        self._microversion_id = microversion_id

    @property
    def from_history(self):
        """Gets the from_history of this Body2.  # noqa: E501

        Specifies whether to create a version at a specific microversion           (specified by microversionId)  # noqa: E501

        :return: The from_history of this Body2.  # noqa: E501
        :rtype: bool
        """
        return self._from_history

    @from_history.setter
    def from_history(self, from_history):
        """Sets the from_history of this Body2.

        Specifies whether to create a version at a specific microversion           (specified by microversionId)  # noqa: E501

        :param from_history: The from_history of this Body2.  # noqa: E501
        :type: bool
        """

        self._from_history = from_history

    def to_dict(self):
        """Returns the model properties as a dict"""
        result = {}

        for attr, _ in six.iteritems(self.swagger_types):
            value = getattr(self, attr)
            if isinstance(value, list):
                result[attr] = list(map(
                    lambda x: x.to_dict() if hasattr(x, "to_dict") else x,
                    value
                ))
            elif hasattr(value, "to_dict"):
                result[attr] = value.to_dict()
            elif isinstance(value, dict):
                result[attr] = dict(map(
                    lambda item: (item[0], item[1].to_dict())
                    if hasattr(item[1], "to_dict") else item,
                    value.items()
                ))
            else:
                result[attr] = value

        return result

    def to_str(self):
        """Returns the string representation of the model"""
        return pprint.pformat(self.to_dict())

    def __repr__(self):
        """For `print` and `pprint`"""
        return self.to_str()

    def __eq__(self, other):
        """Returns true if both objects are equal"""
        if not isinstance(other, Body2):
            return False

        return self.__dict__ == other.__dict__

    def __ne__(self, other):
        """Returns true if both objects are not equal"""
        return not self == other
